/* automatically generated by rust-bindgen 0.69.4 */

pub const H5_DEFAULT_PLUGINDIR: &[u8; 27] = b"/usr/local/hdf5/lib/plugin\0";
pub const H5_DEV_T_IS_SCALAR: u32 = 1;
pub const H5_EXAMPLESDIR: &[u8; 30] = b"/usr/share/doc/hdf5/examples/\0";
pub const H5_FORTRAN_C_BOOL_IS_UNIQUE: u32 = 1;
pub const H5_FORTRAN_C_LONG_DOUBLE_IS_UNIQUE: u32 = 1;
pub const H5_FORTRAN_HAVE_CHAR_ALLOC: u32 = 1;
pub const H5_FORTRAN_HAVE_C_LONG_DOUBLE: u32 = 1;
pub const H5_FORTRAN_HAVE_C_SIZEOF: u32 = 1;
pub const H5_FORTRAN_HAVE_SIZEOF: u32 = 1;
pub const H5_FORTRAN_HAVE_STORAGE_SIZE: u32 = 1;
pub const H5_FORTRAN_SIZEOF_LONG_DOUBLE: &[u8; 3] = b"16\0";
pub const H5_HAVE_ALARM: u32 = 1;
pub const H5_HAVE_ARPA_INET_H: u32 = 1;
pub const H5_HAVE_ASPRINTF: u32 = 1;
pub const H5_HAVE_ATTRIBUTE: u32 = 1;
pub const H5_HAVE_CLOCK_GETTIME: u32 = 1;
pub const H5_HAVE_DIRENT_H: u32 = 1;
pub const H5_HAVE_DLFCN_H: u32 = 1;
pub const H5_HAVE_EMBEDDED_LIBINFO: u32 = 1;
pub const H5_HAVE_FCNTL: u32 = 1;
pub const H5_HAVE_FEATURES_H: u32 = 1;
pub const H5_HAVE_FILTER_DEFLATE: u32 = 1;
pub const H5_HAVE_FILTER_SZIP: u32 = 1;
pub const H5_HAVE_FLOAT128: u32 = 1;
pub const H5_HAVE_FLOCK: u32 = 1;
pub const H5_HAVE_FORK: u32 = 1;
pub const H5_HAVE_Fortran_INTEGER_SIZEOF_16: u32 = 1;
pub const H5_HAVE_GETHOSTNAME: u32 = 1;
pub const H5_HAVE_GETRUSAGE: u32 = 1;
pub const H5_HAVE_GETTIMEOFDAY: u32 = 1;
pub const H5_HAVE_INTTYPES_H: u32 = 1;
pub const H5_HAVE_IOCTL: u32 = 1;
pub const H5_HAVE_ISO_FORTRAN_ENV: u32 = 1;
pub const H5_HAVE_LIBDL: u32 = 1;
pub const H5_HAVE_LIBM: u32 = 1;
pub const H5_HAVE_LIBSZ: u32 = 1;
pub const H5_HAVE_LIBZ: u32 = 1;
pub const H5_HAVE_MPI_F08: u32 = 1;
pub const H5_HAVE_MPI_MULTI_LANG_Comm: u32 = 1;
pub const H5_HAVE_MPI_MULTI_LANG_Info: u32 = 1;
pub const H5_HAVE_NETDB_H: u32 = 1;
pub const H5_HAVE_NETINET_IN_H: u32 = 1;
pub const H5_HAVE_PARALLEL: u32 = 1;
pub const H5_HAVE_PARALLEL_FILTERED_WRITES: u32 = 1;
pub const H5_HAVE_PREADWRITE: u32 = 1;
pub const H5_HAVE_PWD_H: u32 = 1;
pub const H5_HAVE_QUADMATH_H: u32 = 1;
pub const H5_HAVE_RANDOM: u32 = 1;
pub const H5_HAVE_RAND_R: u32 = 1;
pub const H5_HAVE_STAT_ST_BLOCKS: u32 = 1;
pub const H5_HAVE_STDINT_H: u32 = 1;
pub const H5_HAVE_STDIO_H: u32 = 1;
pub const H5_HAVE_STDLIB_H: u32 = 1;
pub const H5_HAVE_STRCASESTR: u32 = 1;
pub const H5_HAVE_STRDUP: u32 = 1;
pub const H5_HAVE_STRINGS_H: u32 = 1;
pub const H5_HAVE_STRING_H: u32 = 1;
pub const H5_HAVE_SYMLINK: u32 = 1;
pub const H5_HAVE_SYS_FILE_H: u32 = 1;
pub const H5_HAVE_SYS_IOCTL_H: u32 = 1;
pub const H5_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const H5_HAVE_SYS_SOCKET_H: u32 = 1;
pub const H5_HAVE_SYS_STAT_H: u32 = 1;
pub const H5_HAVE_SYS_TIME_H: u32 = 1;
pub const H5_HAVE_SYS_TYPES_H: u32 = 1;
pub const H5_HAVE_SZLIB_H: u32 = 1;
pub const H5_HAVE_TIMEZONE: u32 = 1;
pub const H5_HAVE_TIOCGETD: u32 = 1;
pub const H5_HAVE_TIOCGWINSZ: u32 = 1;
pub const H5_HAVE_TMPFILE: u32 = 1;
pub const H5_HAVE_TM_GMTOFF: u32 = 1;
pub const H5_HAVE_UNISTD_H: u32 = 1;
pub const H5_HAVE_VASPRINTF: u32 = 1;
pub const H5_HAVE_WAITPID: u32 = 1;
pub const H5_HAVE_ZLIB_H: u32 = 1;
pub const H5_HAVE__FLOAT16: u32 = 1;
pub const H5_IGNORE_DISABLED_FILE_LOCKS: u32 = 1;
pub const H5_INCLUDE_HL: u32 = 1;
pub const H5_LDOUBLE_TO_FLOAT16_CORRECT: u32 = 1;
pub const H5_LDOUBLE_TO_LLONG_ACCURATE: u32 = 1;
pub const H5_LLONG_TO_LDOUBLE_CORRECT: u32 = 1;
pub const H5_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const H5_MPI_LOGICAL_KIND: u32 = 4;
pub const H5_PACKAGE: &[u8; 5] = b"hdf5\0";
pub const H5_PACKAGE_BUGREPORT: &[u8; 18] = b"help@hdfgroup.org\0";
pub const H5_PACKAGE_NAME: &[u8; 5] = b"HDF5\0";
pub const H5_PACKAGE_STRING: &[u8; 14] = b"HDF5 1.14.4-3\0";
pub const H5_PACKAGE_TARNAME: &[u8; 5] = b"hdf5\0";
pub const H5_PACKAGE_URL: &[u8; 1] = b"\0";
pub const H5_PACKAGE_VERSION: &[u8; 9] = b"1.14.4-3\0";
pub const H5_PAC_C_MAX_REAL_PRECISION: u32 = 33;
pub const H5_PAC_FC_MAX_REAL_PRECISION: u32 = 33;
pub const H5_SIZEOF_BOOL: u32 = 1;
pub const H5_SIZEOF_CHAR: u32 = 1;
pub const H5_SIZEOF_DOUBLE: u32 = 8;
pub const H5_SIZEOF_FLOAT: u32 = 4;
pub const H5_SIZEOF_INT: u32 = 4;
pub const H5_SIZEOF_INT16_T: u32 = 2;
pub const H5_SIZEOF_INT32_T: u32 = 4;
pub const H5_SIZEOF_INT64_T: u32 = 8;
pub const H5_SIZEOF_INT8_T: u32 = 1;
pub const H5_SIZEOF_INT_FAST16_T: u32 = 8;
pub const H5_SIZEOF_INT_FAST32_T: u32 = 8;
pub const H5_SIZEOF_INT_FAST64_T: u32 = 8;
pub const H5_SIZEOF_INT_FAST8_T: u32 = 1;
pub const H5_SIZEOF_INT_LEAST16_T: u32 = 2;
pub const H5_SIZEOF_INT_LEAST32_T: u32 = 4;
pub const H5_SIZEOF_INT_LEAST64_T: u32 = 8;
pub const H5_SIZEOF_INT_LEAST8_T: u32 = 1;
pub const H5_SIZEOF_LONG: u32 = 8;
pub const H5_SIZEOF_LONG_DOUBLE: u32 = 16;
pub const H5_SIZEOF_LONG_LONG: u32 = 8;
pub const H5_SIZEOF_OFF_T: u32 = 8;
pub const H5_SIZEOF_PTRDIFF_T: u32 = 8;
pub const H5_SIZEOF_SHORT: u32 = 2;
pub const H5_SIZEOF_SIZE_T: u32 = 8;
pub const H5_SIZEOF_SSIZE_T: u32 = 8;
pub const H5_SIZEOF_TIME_T: u32 = 8;
pub const H5_SIZEOF_UINT16_T: u32 = 2;
pub const H5_SIZEOF_UINT32_T: u32 = 4;
pub const H5_SIZEOF_UINT64_T: u32 = 8;
pub const H5_SIZEOF_UINT8_T: u32 = 1;
pub const H5_SIZEOF_UINT_FAST16_T: u32 = 8;
pub const H5_SIZEOF_UINT_FAST32_T: u32 = 8;
pub const H5_SIZEOF_UINT_FAST64_T: u32 = 8;
pub const H5_SIZEOF_UINT_FAST8_T: u32 = 1;
pub const H5_SIZEOF_UINT_LEAST16_T: u32 = 2;
pub const H5_SIZEOF_UINT_LEAST32_T: u32 = 4;
pub const H5_SIZEOF_UINT_LEAST64_T: u32 = 8;
pub const H5_SIZEOF_UINT_LEAST8_T: u32 = 1;
pub const H5_SIZEOF_UNSIGNED: u32 = 4;
pub const H5_SIZEOF__FLOAT16: u32 = 2;
pub const H5_SIZEOF__QUAD: u32 = 0;
pub const H5_SIZEOF___FLOAT128: u32 = 16;
pub const H5_STDC_HEADERS: u32 = 1;
pub const H5_TEST_EXPRESS_LEVEL_DEFAULT: u32 = 3;
pub const H5_USE_114_API_DEFAULT: u32 = 1;
pub const H5_USE_FILE_LOCKING: u32 = 1;
pub const H5_VERSION: &[u8; 9] = b"1.14.4-3\0";
pub const H5_VERS_MAJOR_TMP: u32 = 1;
pub const H5_VERS_MINOR_TMP: u32 = 14;
pub const H5_VERS_RELEASE_TMP: u32 = 4;
pub const H5_WANT_DATA_ACCURACY: u32 = 1;
pub const H5_WANT_DCONV_EXCEPTION: u32 = 1;
pub const H5Acreate_vers: u32 = 2;
pub const H5Aiterate_vers: u32 = 2;
pub const H5Dcreate_vers: u32 = 2;
pub const H5Dopen_vers: u32 = 2;
pub const H5Eclear_vers: u32 = 2;
pub const H5Eget_auto_vers: u32 = 2;
pub const H5Eprint_vers: u32 = 2;
pub const H5Epush_vers: u32 = 2;
pub const H5Eset_auto_vers: u32 = 2;
pub const H5Ewalk_vers: u32 = 2;
pub const H5Fget_info_vers: u32 = 2;
pub const H5Gcreate_vers: u32 = 2;
pub const H5Gopen_vers: u32 = 2;
pub const H5Lget_info_vers: u32 = 2;
pub const H5Lget_info_by_idx_vers: u32 = 2;
pub const H5Literate_vers: u32 = 2;
pub const H5Literate_by_name_vers: u32 = 2;
pub const H5Lvisit_vers: u32 = 2;
pub const H5Lvisit_by_name_vers: u32 = 2;
pub const H5Oget_info_vers: u32 = 3;
pub const H5Oget_info_by_idx_vers: u32 = 3;
pub const H5Oget_info_by_name_vers: u32 = 3;
pub const H5Ovisit_vers: u32 = 3;
pub const H5Ovisit_by_name_vers: u32 = 3;
pub const H5Pencode_vers: u32 = 2;
pub const H5Pget_filter_vers: u32 = 2;
pub const H5Pget_filter_by_id_vers: u32 = 2;
pub const H5Pinsert_vers: u32 = 2;
pub const H5Pregister_vers: u32 = 2;
pub const H5Rdereference_vers: u32 = 2;
pub const H5Rget_obj_type_vers: u32 = 2;
pub const H5Sencode_vers: u32 = 2;
pub const H5Tarray_create_vers: u32 = 2;
pub const H5Tcommit_vers: u32 = 2;
pub const H5Tget_array_dims_vers: u32 = 2;
pub const H5Topen_vers: u32 = 2;
pub const H5E_auto_t_vers: u32 = 2;
pub const H5O_info_t_vers: u32 = 2;
pub const H5O_iterate_t_vers: u32 = 2;
pub const H5Z_class_t_vers: u32 = 2;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const MPICH_SKIP_MPICXX: u32 = 1;
pub const OMPI_SKIP_MPICXX: u32 = 1;
pub const OPAL_BUILD_PLATFORM_COMPILER_FAMILYID: u32 = 1;
pub const OPAL_BUILD_PLATFORM_COMPILER_VERSION: u32 = 917761;
pub const OPAL_STDC_HEADERS: u32 = 1;
pub const OPAL_HAVE_ATTRIBUTE_DEPRECATED: u32 = 1;
pub const OPAL_HAVE_ATTRIBUTE_DEPRECATED_ARGUMENT: u32 = 1;
pub const OPAL_HAVE_ATTRIBUTE_ERROR: u32 = 1;
pub const OPAL_HAVE_SYS_TIME_H: u32 = 1;
pub const OPAL_HAVE_LONG_LONG: u32 = 1;
pub const OPAL_MAX_DATAREP_STRING: u32 = 128;
pub const OPAL_MAX_ERROR_STRING: u32 = 256;
pub const OPAL_MAX_INFO_KEY: u32 = 36;
pub const OPAL_MAX_INFO_VAL: u32 = 256;
pub const OPAL_MAX_OBJECT_NAME: u32 = 64;
pub const OPAL_MAX_PORT_NAME: u32 = 1024;
pub const OPAL_MAX_PROCESSOR_NAME: u32 = 256;
pub const OPAL_MAX_PSET_NAME_LEN: u32 = 512;
pub const OPAL_MAX_STRINGTAG_LEN: u32 = 1024;
pub const OMPI_FORTRAN_STATUS_SIZE: u32 = 6;
pub const OMPI_HAVE_FORTRAN_LOGICAL1: u32 = 1;
pub const OMPI_HAVE_FORTRAN_LOGICAL2: u32 = 1;
pub const OMPI_HAVE_FORTRAN_LOGICAL4: u32 = 1;
pub const OMPI_HAVE_FORTRAN_LOGICAL8: u32 = 1;
pub const OMPI_HAVE_FORTRAN_INTEGER1: u32 = 1;
pub const OMPI_HAVE_FORTRAN_INTEGER16: u32 = 0;
pub const OMPI_HAVE_FORTRAN_INTEGER2: u32 = 1;
pub const OMPI_HAVE_FORTRAN_INTEGER4: u32 = 1;
pub const OMPI_HAVE_FORTRAN_INTEGER8: u32 = 1;
pub const OMPI_HAVE_FORTRAN_REAL16: u32 = 1;
pub const OMPI_HAVE_FORTRAN_REAL2: u32 = 0;
pub const OMPI_HAVE_FORTRAN_REAL4: u32 = 1;
pub const OMPI_HAVE_FORTRAN_REAL8: u32 = 1;
pub const OMPI_ENABLE_MPI1_COMPAT: u32 = 0;
pub const HAVE_FLOAT__COMPLEX: u32 = 1;
pub const HAVE_DOUBLE__COMPLEX: u32 = 1;
pub const HAVE_LONG_DOUBLE__COMPLEX: u32 = 1;
pub const OMPI_MPI_OFFSET_SIZE: u32 = 8;
pub const OMPI_PARAM_CHECK: u32 = 1;
pub const OMPI_WANT_MPI_INTERFACE_WARNING: u32 = 1;
pub const OMPI_MAJOR_VERSION: u32 = 5;
pub const OMPI_MINOR_VERSION: u32 = 0;
pub const OMPI_RELEASE_VERSION: u32 = 5;
pub const MPI_VERSION: u32 = 3;
pub const MPI_SUBVERSION: u32 = 1;
pub const OPAL_C_HAVE_VISIBILITY: u32 = 1;
pub const OMPI_BUILDING: u32 = 0;
pub const OPEN_MPI: u32 = 1;
pub const CLEANUP_SIZEOF_VOID_P: u32 = 1;
pub const SIZEOF_VOID_P: u32 = 8;
pub const _PORTABLE_PLATFORM_H: u32 = 0;
pub const PLATFORM_HEADER_VERSION: u32 = 0;
pub const PLATFORM_COMPILER_CLANG: u32 = 1;
pub const PLATFORM_COMPILER_FAMILYID: u32 = 19;
pub const PLATFORM_COMPILER_CLANG_C: u32 = 1;
pub const PLATFORM_COMPILER_ID: u32 = 19;
pub const _PLATFORM_COMPILER_STD_STDC: &[u8; 9] = b"__STDC__\0";
pub const PLATFORM_OS_LINUX: u32 = 1;
pub const PLATFORM_ARCH_X86_64: u32 = 1;
pub const _PLATFORM_ARCH_64: u32 = 1;
pub const _PLATFORM_ARCH_LITTLE_ENDIAN: u32 = 1;
pub const PLATFORM_ARCH_LITTLE_ENDIAN: u32 = 1;
pub const PLATFORM_ARCH_64: u32 = 1;
pub const OMPI_REMOVED_USE_STATIC_ASSERT: u32 = 0;
pub const MPI_ANY_SOURCE: i32 = -1;
pub const MPI_PROC_NULL: i32 = -2;
pub const MPI_ROOT: i32 = -4;
pub const MPI_ANY_TAG: i32 = -1;
pub const MPI_MAX_PROCESSOR_NAME: u32 = 256;
pub const MPI_MAX_ERROR_STRING: u32 = 256;
pub const MPI_MAX_OBJECT_NAME: u32 = 64;
pub const MPI_MAX_LIBRARY_VERSION_STRING: u32 = 256;
pub const MPI_UNDEFINED: i32 = -32766;
pub const MPI_DIST_GRAPH: u32 = 3;
pub const MPI_CART: u32 = 1;
pub const MPI_GRAPH: u32 = 2;
pub const MPI_KEYVAL_INVALID: i32 = -1;
pub const MPI_BSEND_OVERHEAD: u32 = 128;
pub const MPI_MAX_INFO_KEY: u32 = 36;
pub const MPI_MAX_INFO_VAL: u32 = 256;
pub const MPI_MAX_PORT_NAME: u32 = 1024;
pub const MPI_ORDER_C: u32 = 0;
pub const MPI_ORDER_FORTRAN: u32 = 1;
pub const MPI_DISTRIBUTE_BLOCK: u32 = 0;
pub const MPI_DISTRIBUTE_CYCLIC: u32 = 1;
pub const MPI_DISTRIBUTE_NONE: u32 = 2;
pub const MPI_DISTRIBUTE_DFLT_DARG: i32 = -1;
pub const MPI_MAX_PSET_NAME_LEN: u32 = 512;
pub const MPI_MAX_STRINGTAG_LEN: u32 = 1024;
pub const MPI_F_STATUS_SIZE: u32 = 6;
pub const MPI_F_SOURCE: u32 = 0;
pub const MPI_F_TAG: u32 = 1;
pub const MPI_F_ERROR: u32 = 2;
pub const MPI_MODE_CREATE: u32 = 1;
pub const MPI_MODE_RDONLY: u32 = 2;
pub const MPI_MODE_WRONLY: u32 = 4;
pub const MPI_MODE_RDWR: u32 = 8;
pub const MPI_MODE_DELETE_ON_CLOSE: u32 = 16;
pub const MPI_MODE_UNIQUE_OPEN: u32 = 32;
pub const MPI_MODE_EXCL: u32 = 64;
pub const MPI_MODE_APPEND: u32 = 128;
pub const MPI_MODE_SEQUENTIAL: u32 = 256;
pub const MPI_DISPLACEMENT_CURRENT: i32 = -54278278;
pub const MPI_SEEK_SET: u32 = 600;
pub const MPI_SEEK_CUR: u32 = 602;
pub const MPI_SEEK_END: u32 = 604;
pub const MPI_MAX_DATAREP_STRING: u32 = 128;
pub const MPI_MODE_NOCHECK: u32 = 1;
pub const MPI_MODE_NOPRECEDE: u32 = 2;
pub const MPI_MODE_NOPUT: u32 = 4;
pub const MPI_MODE_NOSTORE: u32 = 8;
pub const MPI_MODE_NOSUCCEED: u32 = 16;
pub const MPI_LOCK_EXCLUSIVE: u32 = 1;
pub const MPI_LOCK_SHARED: u32 = 2;
pub const MPI_WIN_FLAVOR_CREATE: u32 = 1;
pub const MPI_WIN_FLAVOR_ALLOCATE: u32 = 2;
pub const MPI_WIN_FLAVOR_DYNAMIC: u32 = 3;
pub const MPI_WIN_FLAVOR_SHARED: u32 = 4;
pub const MPI_WIN_UNIFIED: u32 = 0;
pub const MPI_WIN_SEPARATE: u32 = 1;
pub const MPI_SUCCESS: u32 = 0;
pub const MPI_ERR_BUFFER: u32 = 1;
pub const MPI_ERR_COUNT: u32 = 2;
pub const MPI_ERR_TYPE: u32 = 3;
pub const MPI_ERR_TAG: u32 = 4;
pub const MPI_ERR_COMM: u32 = 5;
pub const MPI_ERR_RANK: u32 = 6;
pub const MPI_ERR_REQUEST: u32 = 7;
pub const MPI_ERR_ROOT: u32 = 8;
pub const MPI_ERR_GROUP: u32 = 9;
pub const MPI_ERR_OP: u32 = 10;
pub const MPI_ERR_TOPOLOGY: u32 = 11;
pub const MPI_ERR_DIMS: u32 = 12;
pub const MPI_ERR_ARG: u32 = 13;
pub const MPI_ERR_UNKNOWN: u32 = 14;
pub const MPI_ERR_TRUNCATE: u32 = 15;
pub const MPI_ERR_OTHER: u32 = 16;
pub const MPI_ERR_INTERN: u32 = 17;
pub const MPI_ERR_IN_STATUS: u32 = 18;
pub const MPI_ERR_PENDING: u32 = 19;
pub const MPI_ERR_ACCESS: u32 = 20;
pub const MPI_ERR_AMODE: u32 = 21;
pub const MPI_ERR_ASSERT: u32 = 22;
pub const MPI_ERR_BAD_FILE: u32 = 23;
pub const MPI_ERR_BASE: u32 = 24;
pub const MPI_ERR_CONVERSION: u32 = 25;
pub const MPI_ERR_DISP: u32 = 26;
pub const MPI_ERR_DUP_DATAREP: u32 = 27;
pub const MPI_ERR_FILE_EXISTS: u32 = 28;
pub const MPI_ERR_FILE_IN_USE: u32 = 29;
pub const MPI_ERR_FILE: u32 = 30;
pub const MPI_ERR_INFO_KEY: u32 = 31;
pub const MPI_ERR_INFO_NOKEY: u32 = 32;
pub const MPI_ERR_INFO_VALUE: u32 = 33;
pub const MPI_ERR_INFO: u32 = 34;
pub const MPI_ERR_IO: u32 = 35;
pub const MPI_ERR_KEYVAL: u32 = 36;
pub const MPI_ERR_LOCKTYPE: u32 = 37;
pub const MPI_ERR_NAME: u32 = 38;
pub const MPI_ERR_NO_MEM: u32 = 39;
pub const MPI_ERR_NOT_SAME: u32 = 40;
pub const MPI_ERR_NO_SPACE: u32 = 41;
pub const MPI_ERR_NO_SUCH_FILE: u32 = 42;
pub const MPI_ERR_PORT: u32 = 43;
pub const MPI_ERR_QUOTA: u32 = 44;
pub const MPI_ERR_READ_ONLY: u32 = 45;
pub const MPI_ERR_RMA_CONFLICT: u32 = 46;
pub const MPI_ERR_RMA_SYNC: u32 = 47;
pub const MPI_ERR_SERVICE: u32 = 48;
pub const MPI_ERR_SIZE: u32 = 49;
pub const MPI_ERR_SPAWN: u32 = 50;
pub const MPI_ERR_UNSUPPORTED_DATAREP: u32 = 51;
pub const MPI_ERR_UNSUPPORTED_OPERATION: u32 = 52;
pub const MPI_ERR_WIN: u32 = 53;
pub const MPI_T_ERR_MEMORY: u32 = 54;
pub const MPI_T_ERR_NOT_INITIALIZED: u32 = 55;
pub const MPI_T_ERR_CANNOT_INIT: u32 = 56;
pub const MPI_T_ERR_INVALID_INDEX: u32 = 57;
pub const MPI_T_ERR_INVALID_ITEM: u32 = 58;
pub const MPI_T_ERR_INVALID_HANDLE: u32 = 59;
pub const MPI_T_ERR_OUT_OF_HANDLES: u32 = 60;
pub const MPI_T_ERR_OUT_OF_SESSIONS: u32 = 61;
pub const MPI_T_ERR_INVALID_SESSION: u32 = 62;
pub const MPI_T_ERR_CVAR_SET_NOT_NOW: u32 = 63;
pub const MPI_T_ERR_CVAR_SET_NEVER: u32 = 64;
pub const MPI_T_ERR_PVAR_NO_STARTSTOP: u32 = 65;
pub const MPI_T_ERR_PVAR_NO_WRITE: u32 = 66;
pub const MPI_T_ERR_PVAR_NO_ATOMIC: u32 = 67;
pub const MPI_ERR_RMA_RANGE: u32 = 68;
pub const MPI_ERR_RMA_ATTACH: u32 = 69;
pub const MPI_ERR_RMA_FLAVOR: u32 = 70;
pub const MPI_ERR_RMA_SHARED: u32 = 71;
pub const MPI_T_ERR_INVALID: u32 = 72;
pub const MPI_T_ERR_INVALID_NAME: u32 = 73;
pub const MPI_ERR_PROC_ABORTED: u32 = 74;
pub const MPI_ERR_PROC_FAILED: u32 = 75;
pub const MPI_ERR_PROC_FAILED_PENDING: u32 = 76;
pub const MPI_ERR_REVOKED: u32 = 77;
pub const MPI_ERR_SESSION: u32 = 78;
pub const MPI_ERR_VALUE_TOO_LARGE: u32 = 79;
pub const MPI_ERR_LASTCODE: u32 = 92;
pub const MPI_TYPECLASS_INTEGER: u32 = 1;
pub const MPI_TYPECLASS_REAL: u32 = 2;
pub const MPI_TYPECLASS_COMPLEX: u32 = 3;
pub const MPI_INFO_KEY_SESSION_PSET_SIZE: &[u8; 9] = b"mpi_size\0";
pub const H5_VERS_MAJOR: u32 = 1;
pub const H5_VERS_MINOR: u32 = 14;
pub const H5_VERS_RELEASE: u32 = 4;
pub const H5_VERS_SUBRELEASE: &[u8; 2] = b"3\0";
pub const H5_VERS_INFO: &[u8; 31] = b"HDF5 library version: 1.14.4-3\0";
pub const HDF5_DRIVER: &[u8; 12] = b"HDF5_DRIVER\0";
pub const HDF5_DRIVER_CONFIG: &[u8; 19] = b"HDF5_DRIVER_CONFIG\0";
pub const HDF5_VOL_CONNECTOR: &[u8; 19] = b"HDF5_VOL_CONNECTOR\0";
pub const HDF5_PLUGIN_PATH: &[u8; 17] = b"HDF5_PLUGIN_PATH\0";
pub const HDF5_PLUGIN_PRELOAD: &[u8; 20] = b"HDF5_PLUGIN_PRELOAD\0";
pub const HDF5_USE_FILE_LOCKING: &[u8; 22] = b"HDF5_USE_FILE_LOCKING\0";
pub const HDF5_NOCLEANUP: &[u8; 15] = b"HDF5_NOCLEANUP\0";
pub const PRIdHSIZE: &[u8; 3] = b"ld\0";
pub const PRIiHSIZE: &[u8; 3] = b"li\0";
pub const PRIoHSIZE: &[u8; 3] = b"lo\0";
pub const PRIuHSIZE: &[u8; 3] = b"lu\0";
pub const PRIxHSIZE: &[u8; 3] = b"lx\0";
pub const PRIXHSIZE: &[u8; 3] = b"lX\0";
pub const H5_SIZEOF_HSIZE_T: u32 = 8;
pub const H5_SIZEOF_HSSIZE_T: u32 = 8;
pub const PRIdHADDR: &[u8; 3] = b"ld\0";
pub const PRIoHADDR: &[u8; 3] = b"lo\0";
pub const PRIuHADDR: &[u8; 3] = b"lu\0";
pub const PRIxHADDR: &[u8; 3] = b"lx\0";
pub const PRIXHADDR: &[u8; 3] = b"lX\0";
pub const H5_SIZEOF_HADDR_T: u32 = 8;
pub const H5_PRINTF_HADDR_FMT: &[u8; 4] = b"%lu\0";
pub const H5_ITER_ERROR: i32 = -1;
pub const H5_ITER_CONT: u32 = 0;
pub const H5_ITER_STOP: u32 = 1;
pub const H5O_MAX_TOKEN_SIZE: u32 = 16;
pub const PRIdHID: &[u8; 3] = b"ld\0";
pub const PRIxHID: &[u8; 3] = b"lx\0";
pub const PRIXHID: &[u8; 3] = b"lX\0";
pub const PRIoHID: &[u8; 3] = b"lo\0";
pub const H5_SIZEOF_HID_T: u32 = 8;
pub const H5I_INVALID_HID: i32 = -1;
pub const H5O_COPY_SHALLOW_HIERARCHY_FLAG: u32 = 1;
pub const H5O_COPY_EXPAND_SOFT_LINK_FLAG: u32 = 2;
pub const H5O_COPY_EXPAND_EXT_LINK_FLAG: u32 = 4;
pub const H5O_COPY_EXPAND_REFERENCE_FLAG: u32 = 8;
pub const H5O_COPY_WITHOUT_ATTR_FLAG: u32 = 16;
pub const H5O_COPY_PRESERVE_NULL_FLAG: u32 = 32;
pub const H5O_COPY_MERGE_COMMITTED_DTYPE_FLAG: u32 = 64;
pub const H5O_COPY_ALL: u32 = 127;
pub const H5O_SHMESG_NONE_FLAG: u32 = 0;
pub const H5O_HDR_CHUNK0_SIZE: u32 = 3;
pub const H5O_HDR_ATTR_CRT_ORDER_TRACKED: u32 = 4;
pub const H5O_HDR_ATTR_CRT_ORDER_INDEXED: u32 = 8;
pub const H5O_HDR_ATTR_STORE_PHASE_CHANGE: u32 = 16;
pub const H5O_HDR_STORE_TIMES: u32 = 32;
pub const H5O_HDR_ALL_FLAGS: u32 = 63;
pub const H5O_SHMESG_MAX_NINDEXES: u32 = 8;
pub const H5O_SHMESG_MAX_LIST_SIZE: u32 = 5000;
pub const H5O_INFO_BASIC: u32 = 1;
pub const H5O_INFO_TIME: u32 = 2;
pub const H5O_INFO_NUM_ATTRS: u32 = 4;
pub const H5O_INFO_ALL: u32 = 7;
pub const H5O_NATIVE_INFO_HDR: u32 = 8;
pub const H5O_NATIVE_INFO_META_SIZE: u32 = 16;
pub const H5O_NATIVE_INFO_ALL: u32 = 24;
pub const H5O_INFO_HDR: u32 = 8;
pub const H5O_INFO_META_SIZE: u32 = 16;
pub const H5T_VARIABLE: i32 = -1;
pub const H5T_OPAQUE_TAG_MAX: u32 = 256;
pub const H5AC__CURR_CACHE_CONFIG_VERSION: u32 = 1;
pub const H5AC__MAX_TRACE_FILE_NAME_LEN: u32 = 1024;
pub const H5AC_METADATA_WRITE_STRATEGY__PROCESS_0_ONLY: u32 = 0;
pub const H5AC_METADATA_WRITE_STRATEGY__DISTRIBUTED: u32 = 1;
pub const H5AC__CURR_CACHE_IMAGE_CONFIG_VERSION: u32 = 1;
pub const H5AC__CACHE_IMAGE__ENTRY_AGEOUT__NONE: i32 = -1;
pub const H5AC__CACHE_IMAGE__ENTRY_AGEOUT__MAX: u32 = 100;
pub const H5D_CHUNK_CACHE_NSLOTS_DEFAULT: i32 = -1;
pub const H5D_CHUNK_CACHE_NBYTES_DEFAULT: i32 = -1;
pub const H5D_CHUNK_CACHE_W0_DEFAULT: f64 = -1.0;
pub const H5D_CHUNK_DONT_FILTER_PARTIAL_CHUNKS: u32 = 2;
pub const H5D_XFER_DIRECT_CHUNK_WRITE_FLAG_NAME: &[u8; 18] =
    b"direct_chunk_flag\0";
pub const H5D_XFER_DIRECT_CHUNK_WRITE_FILTERS_NAME: &[u8; 21] =
    b"direct_chunk_filters\0";
pub const H5D_XFER_DIRECT_CHUNK_WRITE_OFFSET_NAME: &[u8; 20] =
    b"direct_chunk_offset\0";
pub const H5D_XFER_DIRECT_CHUNK_WRITE_DATASIZE_NAME: &[u8; 22] =
    b"direct_chunk_datasize\0";
pub const H5D_XFER_DIRECT_CHUNK_READ_FLAG_NAME: &[u8; 23] =
    b"direct_chunk_read_flag\0";
pub const H5D_XFER_DIRECT_CHUNK_READ_OFFSET_NAME: &[u8; 25] =
    b"direct_chunk_read_offset\0";
pub const H5D_XFER_DIRECT_CHUNK_READ_FILTERS_NAME: &[u8; 26] =
    b"direct_chunk_read_filters\0";
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const H5E_DEFAULT: u32 = 0;
pub const H5ES_NONE: u32 = 0;
pub const H5ES_WAIT_NONE: u32 = 0;
pub const H5F_OBJ_FILE: u32 = 1;
pub const H5F_OBJ_DATASET: u32 = 2;
pub const H5F_OBJ_GROUP: u32 = 4;
pub const H5F_OBJ_DATATYPE: u32 = 8;
pub const H5F_OBJ_ATTR: u32 = 16;
pub const H5F_OBJ_ALL: u32 = 31;
pub const H5F_OBJ_LOCAL: u32 = 32;
pub const H5F_FAMILY_DEFAULT: u32 = 0;
pub const H5F_MPIO_DEBUG_KEY: &[u8; 19] = b"H5F_mpio_debug_key\0";
pub const H5F_NUM_METADATA_READ_RETRY_TYPES: u32 = 21;
pub const H5F_RFIC_UNUSUAL_NUM_UNUSED_NUMERIC_BITS: u32 = 1;
pub const H5F_RFIC_ALL: u32 = 1;
pub const H5FD_VFD_DEFAULT: u32 = 0;
pub const H5_VFD_RESERVED: u32 = 256;
pub const H5_VFD_MAX: u32 = 65535;
pub const H5FD_FEAT_AGGREGATE_METADATA: u32 = 1;
pub const H5FD_FEAT_ACCUMULATE_METADATA_WRITE: u32 = 2;
pub const H5FD_FEAT_ACCUMULATE_METADATA_READ: u32 = 4;
pub const H5FD_FEAT_ACCUMULATE_METADATA: u32 = 6;
pub const H5FD_FEAT_DATA_SIEVE: u32 = 8;
pub const H5FD_FEAT_AGGREGATE_SMALLDATA: u32 = 16;
pub const H5FD_FEAT_IGNORE_DRVRINFO: u32 = 32;
pub const H5FD_FEAT_DIRTY_DRVRINFO_LOAD: u32 = 64;
pub const H5FD_FEAT_POSIX_COMPAT_HANDLE: u32 = 128;
pub const H5FD_FEAT_HAS_MPI: u32 = 256;
pub const H5FD_FEAT_ALLOCATE_EARLY: u32 = 512;
pub const H5FD_FEAT_ALLOW_FILE_IMAGE: u32 = 1024;
pub const H5FD_FEAT_CAN_USE_FILE_IMAGE_CALLBACKS: u32 = 2048;
pub const H5FD_FEAT_SUPPORTS_SWMR_IO: u32 = 4096;
pub const H5FD_FEAT_USE_ALLOC_SIZE: u32 = 8192;
pub const H5FD_FEAT_PAGED_AGGR: u32 = 16384;
pub const H5FD_FEAT_DEFAULT_VFD_COMPATIBLE: u32 = 32768;
pub const H5FD_FEAT_MEMMANAGE: u32 = 65536;
pub const H5FD_CTL_OPC_RESERVED: u32 = 512;
pub const H5FD_CTL_OPC_EXPER_MIN: u32 = 512;
pub const H5FD_CTL_OPC_EXPER_MAX: u32 = 1023;
pub const H5FD_CTL_INVALID_OPCODE: u32 = 0;
pub const H5FD_CTL_TEST_OPCODE: u32 = 1;
pub const H5FD_CTL_GET_MPI_COMMUNICATOR_OPCODE: u32 = 2;
pub const H5FD_CTL_GET_MPI_INFO_OPCODE: u32 = 9;
pub const H5FD_CTL_GET_MPI_RANK_OPCODE: u32 = 3;
pub const H5FD_CTL_GET_MPI_SIZE_OPCODE: u32 = 4;
pub const H5FD_CTL_MEM_ALLOC: u32 = 5;
pub const H5FD_CTL_MEM_FREE: u32 = 6;
pub const H5FD_CTL_MEM_COPY: u32 = 7;
pub const H5FD_CTL_GET_MPI_FILE_SYNC_OPCODE: u32 = 8;
pub const H5FD_CTL_FAIL_IF_UNKNOWN_FLAG: u32 = 1;
pub const H5FD_CTL_ROUTE_TO_TERMINAL_VFD_FLAG: u32 = 2;
pub const H5L_MAX_LINK_NAME_LEN: u32 = 4294967295;
pub const H5L_SAME_LOC: u32 = 0;
pub const H5G_SAME_LOC: u32 = 0;
pub const H5G_NTYPES: u32 = 256;
pub const H5G_NLIBTYPES: u32 = 8;
pub const H5G_NUSERTYPES: u32 = 248;
pub const H5VL_VERSION: u32 = 3;
pub const H5_VOL_INVALID: i32 = -1;
pub const H5_VOL_NATIVE: u32 = 0;
pub const H5_VOL_RESERVED: u32 = 256;
pub const H5_VOL_MAX: u32 = 65535;
pub const H5VL_CAP_FLAG_NONE: u32 = 0;
pub const H5VL_CAP_FLAG_THREADSAFE: u32 = 1;
pub const H5VL_CAP_FLAG_ASYNC: u32 = 2;
pub const H5VL_CAP_FLAG_NATIVE_FILES: u32 = 4;
pub const H5VL_CAP_FLAG_ATTR_BASIC: u32 = 8;
pub const H5VL_CAP_FLAG_ATTR_MORE: u32 = 16;
pub const H5VL_CAP_FLAG_DATASET_BASIC: u32 = 32;
pub const H5VL_CAP_FLAG_DATASET_MORE: u32 = 64;
pub const H5VL_CAP_FLAG_FILE_BASIC: u32 = 128;
pub const H5VL_CAP_FLAG_FILE_MORE: u32 = 256;
pub const H5VL_CAP_FLAG_GROUP_BASIC: u32 = 512;
pub const H5VL_CAP_FLAG_GROUP_MORE: u32 = 1024;
pub const H5VL_CAP_FLAG_LINK_BASIC: u32 = 2048;
pub const H5VL_CAP_FLAG_LINK_MORE: u32 = 4096;
pub const H5VL_CAP_FLAG_MAP_BASIC: u32 = 8192;
pub const H5VL_CAP_FLAG_MAP_MORE: u32 = 16384;
pub const H5VL_CAP_FLAG_OBJECT_BASIC: u32 = 32768;
pub const H5VL_CAP_FLAG_OBJECT_MORE: u32 = 65536;
pub const H5VL_CAP_FLAG_REF_BASIC: u32 = 131072;
pub const H5VL_CAP_FLAG_REF_MORE: u32 = 262144;
pub const H5VL_CAP_FLAG_OBJ_REF: u32 = 524288;
pub const H5VL_CAP_FLAG_REG_REF: u32 = 1048576;
pub const H5VL_CAP_FLAG_ATTR_REF: u32 = 2097152;
pub const H5VL_CAP_FLAG_STORED_DATATYPES: u32 = 4194304;
pub const H5VL_CAP_FLAG_CREATION_ORDER: u32 = 8388608;
pub const H5VL_CAP_FLAG_ITERATE: u32 = 16777216;
pub const H5VL_CAP_FLAG_STORAGE_SIZE: u32 = 33554432;
pub const H5VL_CAP_FLAG_BY_IDX: u32 = 67108864;
pub const H5VL_CAP_FLAG_GET_PLIST: u32 = 134217728;
pub const H5VL_CAP_FLAG_FLUSH_REFRESH: u32 = 268435456;
pub const H5VL_CAP_FLAG_EXTERNAL_LINKS: u32 = 536870912;
pub const H5VL_CAP_FLAG_HARD_LINKS: u32 = 1073741824;
pub const H5VL_CAP_FLAG_SOFT_LINKS: u32 = 2147483648;
pub const H5VL_CAP_FLAG_UD_LINKS: u64 = 4294967296;
pub const H5VL_CAP_FLAG_TRACK_TIMES: u64 = 8589934592;
pub const H5VL_CAP_FLAG_MOUNT: u64 = 17179869184;
pub const H5VL_CAP_FLAG_FILTERS: u64 = 34359738368;
pub const H5VL_CAP_FLAG_FILL_VALUES: u64 = 68719476736;
pub const H5VL_OPT_QUERY_SUPPORTED: u32 = 1;
pub const H5VL_OPT_QUERY_READ_DATA: u32 = 2;
pub const H5VL_OPT_QUERY_WRITE_DATA: u32 = 4;
pub const H5VL_OPT_QUERY_QUERY_METADATA: u32 = 8;
pub const H5VL_OPT_QUERY_MODIFY_METADATA: u32 = 16;
pub const H5VL_OPT_QUERY_COLLECTIVE: u32 = 32;
pub const H5VL_OPT_QUERY_NO_ASYNC: u32 = 64;
pub const H5VL_OPT_QUERY_MULTI_OBJ: u32 = 128;
pub const H5R_REF_BUF_SIZE: u32 = 64;
pub const H5VL_CONTAINER_INFO_VERSION: u32 = 1;
pub const H5VL_MAX_BLOB_ID_SIZE: u32 = 16;
pub const H5VL_RESERVED_NATIVE_OPTIONAL: u32 = 1024;
pub const H5VL_MAP_CREATE: u32 = 1;
pub const H5VL_MAP_OPEN: u32 = 2;
pub const H5VL_MAP_GET_VAL: u32 = 3;
pub const H5VL_MAP_EXISTS: u32 = 4;
pub const H5VL_MAP_PUT: u32 = 5;
pub const H5VL_MAP_GET: u32 = 6;
pub const H5VL_MAP_SPECIFIC: u32 = 7;
pub const H5VL_MAP_OPTIONAL: u32 = 8;
pub const H5VL_MAP_CLOSE: u32 = 9;
pub const H5S_ALL: u32 = 0;
pub const H5S_BLOCK: u32 = 1;
pub const H5S_PLIST: u32 = 2;
pub const H5S_MAX_RANK: u32 = 32;
pub const H5S_SEL_ITER_GET_SEQ_LIST_SORTED: u32 = 1;
pub const H5S_SEL_ITER_SHARE_WITH_DATASPACE: u32 = 2;
pub const H5Z_FILTER_ERROR: i32 = -1;
pub const H5Z_FILTER_NONE: u32 = 0;
pub const H5Z_FILTER_DEFLATE: u32 = 1;
pub const H5Z_FILTER_SHUFFLE: u32 = 2;
pub const H5Z_FILTER_FLETCHER32: u32 = 3;
pub const H5Z_FILTER_SZIP: u32 = 4;
pub const H5Z_FILTER_NBIT: u32 = 5;
pub const H5Z_FILTER_SCALEOFFSET: u32 = 6;
pub const H5Z_FILTER_RESERVED: u32 = 256;
pub const H5Z_FILTER_MAX: u32 = 65535;
pub const H5Z_FILTER_ALL: u32 = 0;
pub const H5Z_MAX_NFILTERS: u32 = 32;
pub const H5Z_FLAG_DEFMASK: u32 = 255;
pub const H5Z_FLAG_MANDATORY: u32 = 0;
pub const H5Z_FLAG_OPTIONAL: u32 = 1;
pub const H5Z_FLAG_INVMASK: u32 = 65280;
pub const H5Z_FLAG_REVERSE: u32 = 256;
pub const H5Z_FLAG_SKIP_EDC: u32 = 512;
pub const H5_SZIP_ALLOW_K13_OPTION_MASK: u32 = 1;
pub const H5_SZIP_CHIP_OPTION_MASK: u32 = 2;
pub const H5_SZIP_EC_OPTION_MASK: u32 = 4;
pub const H5_SZIP_NN_OPTION_MASK: u32 = 32;
pub const H5_SZIP_MAX_PIXELS_PER_BLOCK: u32 = 32;
pub const H5Z_SHUFFLE_USER_NPARMS: u32 = 0;
pub const H5Z_SHUFFLE_TOTAL_NPARMS: u32 = 1;
pub const H5Z_SZIP_USER_NPARMS: u32 = 2;
pub const H5Z_SZIP_TOTAL_NPARMS: u32 = 4;
pub const H5Z_SZIP_PARM_MASK: u32 = 0;
pub const H5Z_SZIP_PARM_PPB: u32 = 1;
pub const H5Z_SZIP_PARM_BPP: u32 = 2;
pub const H5Z_SZIP_PARM_PPS: u32 = 3;
pub const H5Z_NBIT_USER_NPARMS: u32 = 0;
pub const H5Z_SCALEOFFSET_USER_NPARMS: u32 = 2;
pub const H5Z_SO_INT_MINBITS_DEFAULT: u32 = 0;
pub const H5Z_FILTER_CONFIG_ENCODE_ENABLED: u32 = 1;
pub const H5Z_FILTER_CONFIG_DECODE_ENABLED: u32 = 2;
pub const H5P_CRT_ORDER_TRACKED: u32 = 1;
pub const H5P_CRT_ORDER_INDEXED: u32 = 2;
pub const H5P_DEFAULT: u32 = 0;
pub const H5D_SEL_IO_DISABLE_BY_API: u32 = 1;
pub const H5D_SEL_IO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET: u32 = 2;
pub const H5D_SEL_IO_CONTIGUOUS_SIEVE_BUFFER: u32 = 4;
pub const H5D_SEL_IO_NO_VECTOR_OR_SELECTION_IO_CB: u32 = 8;
pub const H5D_SEL_IO_PAGE_BUFFER: u32 = 16;
pub const H5D_SEL_IO_DATASET_FILTER: u32 = 32;
pub const H5D_SEL_IO_CHUNK_CACHE: u32 = 64;
pub const H5D_SEL_IO_TCONV_BUF_TOO_SMALL: u32 = 128;
pub const H5D_SEL_IO_BKG_BUF_TOO_SMALL: u32 = 256;
pub const H5D_SEL_IO_DEFAULT_OFF: u32 = 512;
pub const H5D_MPIO_NO_SELECTION_IO_CAUSES: u32 = 481;
pub const H5D_SCALAR_IO: u32 = 1;
pub const H5D_VECTOR_IO: u32 = 2;
pub const H5D_SELECTION_IO: u32 = 4;
pub const H5PL_NO_PLUGIN: &[u8; 3] = b"::\0";
pub const H5PL_FILTER_PLUGIN: u32 = 1;
pub const H5PL_VOL_PLUGIN: u32 = 2;
pub const H5PL_VFD_PLUGIN: u32 = 4;
pub const H5PL_ALL_PLUGIN: u32 = 65535;
pub const H5FD_CLASS_VERSION: u32 = 1;
pub const H5L_LINK_CLASS_T_VERS: u32 = 1;
pub const H5L_EXT_VERSION: u32 = 0;
pub const H5L_EXT_FLAGS_ALL: u32 = 0;
pub const H5L_LINK_CLASS_T_VERS_0: u32 = 0;
pub const H5Z_CLASS_T_VERS: u32 = 1;
pub const H5VL_NATIVE_NAME: &[u8; 7] = b"native\0";
pub const H5VL_NATIVE_VALUE: u32 = 0;
pub const H5VL_NATIVE_VERSION: u32 = 0;
pub const H5VL_NATIVE_ATTR_ITERATE_OLD: u32 = 0;
pub const H5VL_NATIVE_DATASET_FORMAT_CONVERT: u32 = 0;
pub const H5VL_NATIVE_DATASET_GET_CHUNK_INDEX_TYPE: u32 = 1;
pub const H5VL_NATIVE_DATASET_GET_CHUNK_STORAGE_SIZE: u32 = 2;
pub const H5VL_NATIVE_DATASET_GET_NUM_CHUNKS: u32 = 3;
pub const H5VL_NATIVE_DATASET_GET_CHUNK_INFO_BY_IDX: u32 = 4;
pub const H5VL_NATIVE_DATASET_GET_CHUNK_INFO_BY_COORD: u32 = 5;
pub const H5VL_NATIVE_DATASET_CHUNK_READ: u32 = 6;
pub const H5VL_NATIVE_DATASET_CHUNK_WRITE: u32 = 7;
pub const H5VL_NATIVE_DATASET_GET_VLEN_BUF_SIZE: u32 = 8;
pub const H5VL_NATIVE_DATASET_GET_OFFSET: u32 = 9;
pub const H5VL_NATIVE_DATASET_CHUNK_ITER: u32 = 10;
pub const H5VL_NATIVE_FILE_CLEAR_ELINK_CACHE: u32 = 0;
pub const H5VL_NATIVE_FILE_GET_FILE_IMAGE: u32 = 1;
pub const H5VL_NATIVE_FILE_GET_FREE_SECTIONS: u32 = 2;
pub const H5VL_NATIVE_FILE_GET_FREE_SPACE: u32 = 3;
pub const H5VL_NATIVE_FILE_GET_INFO: u32 = 4;
pub const H5VL_NATIVE_FILE_GET_MDC_CONF: u32 = 5;
pub const H5VL_NATIVE_FILE_GET_MDC_HR: u32 = 6;
pub const H5VL_NATIVE_FILE_GET_MDC_SIZE: u32 = 7;
pub const H5VL_NATIVE_FILE_GET_SIZE: u32 = 8;
pub const H5VL_NATIVE_FILE_GET_VFD_HANDLE: u32 = 9;
pub const H5VL_NATIVE_FILE_RESET_MDC_HIT_RATE: u32 = 10;
pub const H5VL_NATIVE_FILE_SET_MDC_CONFIG: u32 = 11;
pub const H5VL_NATIVE_FILE_GET_METADATA_READ_RETRY_INFO: u32 = 12;
pub const H5VL_NATIVE_FILE_START_SWMR_WRITE: u32 = 13;
pub const H5VL_NATIVE_FILE_START_MDC_LOGGING: u32 = 14;
pub const H5VL_NATIVE_FILE_STOP_MDC_LOGGING: u32 = 15;
pub const H5VL_NATIVE_FILE_GET_MDC_LOGGING_STATUS: u32 = 16;
pub const H5VL_NATIVE_FILE_FORMAT_CONVERT: u32 = 17;
pub const H5VL_NATIVE_FILE_RESET_PAGE_BUFFERING_STATS: u32 = 18;
pub const H5VL_NATIVE_FILE_GET_PAGE_BUFFERING_STATS: u32 = 19;
pub const H5VL_NATIVE_FILE_GET_MDC_IMAGE_INFO: u32 = 20;
pub const H5VL_NATIVE_FILE_GET_EOA: u32 = 21;
pub const H5VL_NATIVE_FILE_INCR_FILESIZE: u32 = 22;
pub const H5VL_NATIVE_FILE_SET_LIBVER_BOUNDS: u32 = 23;
pub const H5VL_NATIVE_FILE_GET_MIN_DSET_OHDR_FLAG: u32 = 24;
pub const H5VL_NATIVE_FILE_SET_MIN_DSET_OHDR_FLAG: u32 = 25;
pub const H5VL_NATIVE_FILE_GET_MPI_ATOMICITY: u32 = 26;
pub const H5VL_NATIVE_FILE_SET_MPI_ATOMICITY: u32 = 27;
pub const H5VL_NATIVE_FILE_POST_OPEN: u32 = 28;
pub const H5VL_NATIVE_GROUP_ITERATE_OLD: u32 = 0;
pub const H5VL_NATIVE_GROUP_GET_OBJINFO: u32 = 1;
pub const H5VL_NATIVE_OBJECT_GET_COMMENT: u32 = 0;
pub const H5VL_NATIVE_OBJECT_SET_COMMENT: u32 = 1;
pub const H5VL_NATIVE_OBJECT_DISABLE_MDC_FLUSHES: u32 = 2;
pub const H5VL_NATIVE_OBJECT_ENABLE_MDC_FLUSHES: u32 = 3;
pub const H5VL_NATIVE_OBJECT_ARE_MDC_FLUSHES_DISABLED: u32 = 4;
pub const H5VL_NATIVE_OBJECT_GET_NATIVE_INFO: u32 = 5;
pub const H5FD_DIRECT: i32 = -1;
pub const MBOUNDARY_DEF: u32 = 4096;
pub const FBSIZE_DEF: u32 = 4096;
pub const CBSIZE_DEF: u32 = 16777216;
pub const H5FD_HDFS: i32 = -1;
pub const H5FD_LOG_TRUNCATE: u32 = 1;
pub const H5FD_LOG_META_IO: u32 = 1;
pub const H5FD_LOG_LOC_READ: u32 = 2;
pub const H5FD_LOG_LOC_WRITE: u32 = 4;
pub const H5FD_LOG_LOC_SEEK: u32 = 8;
pub const H5FD_LOG_LOC_IO: u32 = 14;
pub const H5FD_LOG_FILE_READ: u32 = 16;
pub const H5FD_LOG_FILE_WRITE: u32 = 32;
pub const H5FD_LOG_FILE_IO: u32 = 48;
pub const H5FD_LOG_FLAVOR: u32 = 64;
pub const H5FD_LOG_NUM_READ: u32 = 128;
pub const H5FD_LOG_NUM_WRITE: u32 = 256;
pub const H5FD_LOG_NUM_SEEK: u32 = 512;
pub const H5FD_LOG_NUM_TRUNCATE: u32 = 1024;
pub const H5FD_LOG_NUM_IO: u32 = 1920;
pub const H5FD_LOG_TIME_OPEN: u32 = 2048;
pub const H5FD_LOG_TIME_STAT: u32 = 4096;
pub const H5FD_LOG_TIME_READ: u32 = 8192;
pub const H5FD_LOG_TIME_WRITE: u32 = 16384;
pub const H5FD_LOG_TIME_SEEK: u32 = 32768;
pub const H5FD_LOG_TIME_TRUNCATE: u32 = 65536;
pub const H5FD_LOG_TIME_CLOSE: u32 = 131072;
pub const H5FD_LOG_TIME_IO: u32 = 260096;
pub const H5FD_LOG_ALLOC: u32 = 262144;
pub const H5FD_LOG_FREE: u32 = 524288;
pub const H5FD_LOG_ALL: u32 = 1048575;
pub const H5D_ONE_LINK_CHUNK_IO_THRESHOLD: u32 = 0;
pub const H5D_MULTI_CHUNK_IO_COL_THRESHOLD: u32 = 60;
pub const H5FD_ONION_FAPL_INFO_VERSION_CURR: u32 = 1;
pub const H5FD_ONION_FAPL_INFO_CREATE_FLAG_ENABLE_PAGE_ALIGNMENT: u32 = 1;
pub const H5FD_ONION_FAPL_INFO_COMMENT_MAX_LEN: u32 = 255;
pub const H5FD_ROS3: i32 = -1;
pub const H5FD_CURR_SPLITTER_VFD_CONFIG_VERSION: u32 = 1;
pub const H5FD_SPLITTER_PATH_MAX: u32 = 4096;
pub const H5FD_SPLITTER_MAGIC: u32 = 730949760;
pub const H5FD_SUBFILING: i32 = -1;
pub const H5FD_SUBFILING_NAME: &[u8; 10] = b"subfiling\0";
pub const H5FD_IOC: i32 = -1;
pub const H5FD_IOC_NAME: &[u8; 4] = b"ioc\0";
pub const H5VL_PASSTHRU_NAME: &[u8; 13] = b"pass_through\0";
pub const H5VL_PASSTHRU_VALUE: u32 = 1;
pub const H5VL_PASSTHRU_VERSION: u32 = 0;
pub const DATE_STRING_LEN: u32 = 32;
pub const ANALOG_LABEL_STRING_LEN: u32 = 64;
pub const CHANNEL_LABEL_STRING_LEN: u32 = 32;
pub const MAX_EVENT_STREAMS: u32 = 16;
pub const MAX_CHANNELS: u32 = 60;
pub const MAX_ANALOG_STREAMS: u32 = 4;
pub const MAX_GROUP_STRING_LEN: u32 = 256;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type MPI_Aint = isize;
pub type MPI_Offset = ::std::os::raw::c_longlong;
pub type MPI_Count = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_communicator_t {
    _unused: [u8; 0],
}
pub type MPI_Comm = *mut ompi_communicator_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_datatype_t {
    _unused: [u8; 0],
}
pub type MPI_Datatype = *mut ompi_datatype_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_errhandler_t {
    _unused: [u8; 0],
}
pub type MPI_Errhandler = *mut ompi_errhandler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_file_t {
    _unused: [u8; 0],
}
pub type MPI_File = *mut ompi_file_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_group_t {
    _unused: [u8; 0],
}
pub type MPI_Group = *mut ompi_group_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_info_t {
    _unused: [u8; 0],
}
pub type MPI_Info = *mut ompi_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_op_t {
    _unused: [u8; 0],
}
pub type MPI_Op = *mut ompi_op_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_request_t {
    _unused: [u8; 0],
}
pub type MPI_Request = *mut ompi_request_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_message_t {
    _unused: [u8; 0],
}
pub type MPI_Message = *mut ompi_message_t;
pub type MPI_Status = ompi_status_public_t;
pub type MPI_F08_status = ompi_f08_status_public_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_win_t {
    _unused: [u8; 0],
}
pub type MPI_Win = *mut ompi_win_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mca_base_var_enum_t {
    _unused: [u8; 0],
}
pub type MPI_T_enum = *mut mca_base_var_enum_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_mpit_cvar_handle_t {
    _unused: [u8; 0],
}
pub type MPI_T_cvar_handle = *mut ompi_mpit_cvar_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mca_base_pvar_handle_t {
    _unused: [u8; 0],
}
pub type MPI_T_pvar_handle = *mut mca_base_pvar_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mca_base_pvar_session_t {
    _unused: [u8; 0],
}
pub type MPI_T_pvar_session = *mut mca_base_pvar_session_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_instance_t {
    _unused: [u8; 0],
}
pub type MPI_Session = *mut ompi_instance_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_status_public_t {
    pub MPI_SOURCE: ::std::os::raw::c_int,
    pub MPI_TAG: ::std::os::raw::c_int,
    pub MPI_ERROR: ::std::os::raw::c_int,
    pub _cancelled: ::std::os::raw::c_int,
    pub _ucount: usize,
}
#[test]
fn bindgen_test_layout_ompi_status_public_t() {
    const UNINIT: ::std::mem::MaybeUninit<ompi_status_public_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ompi_status_public_t>(),
        24usize,
        concat!("Size of: ", stringify!(ompi_status_public_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ompi_status_public_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ompi_status_public_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).MPI_SOURCE) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_status_public_t),
            "::",
            stringify!(MPI_SOURCE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MPI_TAG) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_status_public_t),
            "::",
            stringify!(MPI_TAG)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).MPI_ERROR) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_status_public_t),
            "::",
            stringify!(MPI_ERROR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._cancelled) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_status_public_t),
            "::",
            stringify!(_cancelled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ucount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_status_public_t),
            "::",
            stringify!(_ucount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_f08_status_public_t {
    pub MPI_SOURCE: ::std::os::raw::c_int,
    pub MPI_TAG: ::std::os::raw::c_int,
    pub MPI_ERROR: ::std::os::raw::c_int,
    pub internal: [::std::os::raw::c_int; 3usize],
}
#[test]
fn bindgen_test_layout_ompi_f08_status_public_t() {
    const UNINIT: ::std::mem::MaybeUninit<ompi_f08_status_public_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ompi_f08_status_public_t>(),
        24usize,
        concat!("Size of: ", stringify!(ompi_f08_status_public_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ompi_f08_status_public_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ompi_f08_status_public_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).MPI_SOURCE) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_f08_status_public_t),
            "::",
            stringify!(MPI_SOURCE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MPI_TAG) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_f08_status_public_t),
            "::",
            stringify!(MPI_TAG)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).MPI_ERROR) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_f08_status_public_t),
            "::",
            stringify!(MPI_ERROR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ompi_f08_status_public_t),
            "::",
            stringify!(internal)
        )
    );
}
pub type MPI_Datarep_extent_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Datatype,
        arg2: *mut MPI_Aint,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Datarep_conversion_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: MPI_Datatype,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: MPI_Offset,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Comm_errhandler_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut MPI_Comm,
        arg2: *mut ::std::os::raw::c_int,
        ...
    ),
>;
pub type MPI_Session_errhandler_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut MPI_Session,
        arg2: *mut ::std::os::raw::c_int,
        ...
    ),
>;
pub type ompi_file_errhandler_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut MPI_File,
        arg2: *mut ::std::os::raw::c_int,
        ...
    ),
>;
pub type MPI_Win_errhandler_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut MPI_Win,
        arg2: *mut ::std::os::raw::c_int,
        ...
    ),
>;
pub type MPI_User_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut MPI_Datatype,
    ),
>;
pub type MPI_Comm_copy_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Comm_delete_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Type_copy_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Datatype,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Type_delete_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Datatype,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Win_copy_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Win,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Win_delete_attr_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Win,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Grequest_query_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut MPI_Status,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Grequest_free_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Grequest_cancel_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Comm_errhandler_fn = MPI_Comm_errhandler_function;
pub type MPI_File_errhandler_fn = ompi_file_errhandler_function;
pub type MPI_File_errhandler_function = ompi_file_errhandler_function;
pub type MPI_Win_errhandler_fn = MPI_Win_errhandler_function;
pub const MPI_TAG_UB: _bindgen_ty_1 = 0;
pub const MPI_HOST: _bindgen_ty_1 = 1;
pub const MPI_IO: _bindgen_ty_1 = 2;
pub const MPI_WTIME_IS_GLOBAL: _bindgen_ty_1 = 3;
pub const MPI_APPNUM: _bindgen_ty_1 = 4;
pub const MPI_LASTUSEDCODE: _bindgen_ty_1 = 5;
pub const MPI_UNIVERSE_SIZE: _bindgen_ty_1 = 6;
pub const MPI_WIN_BASE: _bindgen_ty_1 = 7;
pub const MPI_WIN_SIZE: _bindgen_ty_1 = 8;
pub const MPI_WIN_DISP_UNIT: _bindgen_ty_1 = 9;
pub const MPI_WIN_CREATE_FLAVOR: _bindgen_ty_1 = 10;
pub const MPI_WIN_MODEL: _bindgen_ty_1 = 11;
pub const MPI_FT: _bindgen_ty_1 = 12;
pub const MPI_ATTR_PREDEFINED_KEY_MAX: _bindgen_ty_1 = 13;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const MPI_IDENT: _bindgen_ty_2 = 0;
pub const MPI_CONGRUENT: _bindgen_ty_2 = 1;
pub const MPI_SIMILAR: _bindgen_ty_2 = 2;
pub const MPI_UNEQUAL: _bindgen_ty_2 = 3;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const MPI_THREAD_SINGLE: _bindgen_ty_3 = 0;
pub const MPI_THREAD_FUNNELED: _bindgen_ty_3 = 1;
pub const MPI_THREAD_SERIALIZED: _bindgen_ty_3 = 2;
pub const MPI_THREAD_MULTIPLE: _bindgen_ty_3 = 3;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const MPI_COMBINER_NAMED: _bindgen_ty_4 = 0;
pub const MPI_COMBINER_DUP: _bindgen_ty_4 = 1;
pub const MPI_COMBINER_CONTIGUOUS: _bindgen_ty_4 = 2;
pub const MPI_COMBINER_VECTOR: _bindgen_ty_4 = 3;
pub const OMPI_WAS_MPI_COMBINER_HVECTOR_INTEGER: _bindgen_ty_4 = 4;
pub const MPI_COMBINER_HVECTOR: _bindgen_ty_4 = 5;
pub const MPI_COMBINER_INDEXED: _bindgen_ty_4 = 6;
pub const OMPI_WAS_MPI_COMBINER_HINDEXED_INTEGER: _bindgen_ty_4 = 7;
pub const MPI_COMBINER_HINDEXED: _bindgen_ty_4 = 8;
pub const MPI_COMBINER_INDEXED_BLOCK: _bindgen_ty_4 = 9;
pub const OMPI_WAS_MPI_COMBINER_STRUCT_INTEGER: _bindgen_ty_4 = 10;
pub const MPI_COMBINER_STRUCT: _bindgen_ty_4 = 11;
pub const MPI_COMBINER_SUBARRAY: _bindgen_ty_4 = 12;
pub const MPI_COMBINER_DARRAY: _bindgen_ty_4 = 13;
pub const MPI_COMBINER_F90_REAL: _bindgen_ty_4 = 14;
pub const MPI_COMBINER_F90_COMPLEX: _bindgen_ty_4 = 15;
pub const MPI_COMBINER_F90_INTEGER: _bindgen_ty_4 = 16;
pub const MPI_COMBINER_RESIZED: _bindgen_ty_4 = 17;
pub const MPI_COMBINER_HINDEXED_BLOCK: _bindgen_ty_4 = 18;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const MPI_COMM_TYPE_SHARED: _bindgen_ty_5 = 0;
pub const OMPI_COMM_TYPE_HWTHREAD: _bindgen_ty_5 = 1;
pub const OMPI_COMM_TYPE_CORE: _bindgen_ty_5 = 2;
pub const OMPI_COMM_TYPE_L1CACHE: _bindgen_ty_5 = 3;
pub const OMPI_COMM_TYPE_L2CACHE: _bindgen_ty_5 = 4;
pub const OMPI_COMM_TYPE_L3CACHE: _bindgen_ty_5 = 5;
pub const OMPI_COMM_TYPE_SOCKET: _bindgen_ty_5 = 6;
pub const OMPI_COMM_TYPE_NUMA: _bindgen_ty_5 = 7;
pub const OMPI_COMM_TYPE_BOARD: _bindgen_ty_5 = 8;
pub const OMPI_COMM_TYPE_HOST: _bindgen_ty_5 = 9;
pub const OMPI_COMM_TYPE_CU: _bindgen_ty_5 = 10;
pub const OMPI_COMM_TYPE_CLUSTER: _bindgen_ty_5 = 11;
pub const MPI_COMM_TYPE_HW_UNGUIDED: _bindgen_ty_5 = 12;
pub const MPI_COMM_TYPE_HW_GUIDED: _bindgen_ty_5 = 13;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const MPI_T_VERBOSITY_USER_BASIC: _bindgen_ty_6 = 0;
pub const MPI_T_VERBOSITY_USER_DETAIL: _bindgen_ty_6 = 1;
pub const MPI_T_VERBOSITY_USER_ALL: _bindgen_ty_6 = 2;
pub const MPI_T_VERBOSITY_TUNER_BASIC: _bindgen_ty_6 = 3;
pub const MPI_T_VERBOSITY_TUNER_DETAIL: _bindgen_ty_6 = 4;
pub const MPI_T_VERBOSITY_TUNER_ALL: _bindgen_ty_6 = 5;
pub const MPI_T_VERBOSITY_MPIDEV_BASIC: _bindgen_ty_6 = 6;
pub const MPI_T_VERBOSITY_MPIDEV_DETAIL: _bindgen_ty_6 = 7;
pub const MPI_T_VERBOSITY_MPIDEV_ALL: _bindgen_ty_6 = 8;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const MPI_T_SCOPE_CONSTANT: _bindgen_ty_7 = 0;
pub const MPI_T_SCOPE_READONLY: _bindgen_ty_7 = 1;
pub const MPI_T_SCOPE_LOCAL: _bindgen_ty_7 = 2;
pub const MPI_T_SCOPE_GROUP: _bindgen_ty_7 = 3;
pub const MPI_T_SCOPE_GROUP_EQ: _bindgen_ty_7 = 4;
pub const MPI_T_SCOPE_ALL: _bindgen_ty_7 = 5;
pub const MPI_T_SCOPE_ALL_EQ: _bindgen_ty_7 = 6;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const MPI_T_BIND_NO_OBJECT: _bindgen_ty_8 = 0;
pub const MPI_T_BIND_MPI_COMM: _bindgen_ty_8 = 1;
pub const MPI_T_BIND_MPI_DATATYPE: _bindgen_ty_8 = 2;
pub const MPI_T_BIND_MPI_ERRHANDLER: _bindgen_ty_8 = 3;
pub const MPI_T_BIND_MPI_FILE: _bindgen_ty_8 = 4;
pub const MPI_T_BIND_MPI_GROUP: _bindgen_ty_8 = 5;
pub const MPI_T_BIND_MPI_OP: _bindgen_ty_8 = 6;
pub const MPI_T_BIND_MPI_REQUEST: _bindgen_ty_8 = 7;
pub const MPI_T_BIND_MPI_WIN: _bindgen_ty_8 = 8;
pub const MPI_T_BIND_MPI_MESSAGE: _bindgen_ty_8 = 9;
pub const MPI_T_BIND_MPI_INFO: _bindgen_ty_8 = 10;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const MPI_T_PVAR_CLASS_STATE: _bindgen_ty_9 = 0;
pub const MPI_T_PVAR_CLASS_LEVEL: _bindgen_ty_9 = 1;
pub const MPI_T_PVAR_CLASS_SIZE: _bindgen_ty_9 = 2;
pub const MPI_T_PVAR_CLASS_PERCENTAGE: _bindgen_ty_9 = 3;
pub const MPI_T_PVAR_CLASS_HIGHWATERMARK: _bindgen_ty_9 = 4;
pub const MPI_T_PVAR_CLASS_LOWWATERMARK: _bindgen_ty_9 = 5;
pub const MPI_T_PVAR_CLASS_COUNTER: _bindgen_ty_9 = 6;
pub const MPI_T_PVAR_CLASS_AGGREGATE: _bindgen_ty_9 = 7;
pub const MPI_T_PVAR_CLASS_TIMER: _bindgen_ty_9 = 8;
pub const MPI_T_PVAR_CLASS_GENERIC: _bindgen_ty_9 = 9;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
extern "C" {
    pub fn OMPI_C_MPI_TYPE_NULL_DELETE_FN(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attribute_val_out: *mut ::std::os::raw::c_void,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_TYPE_NULL_COPY_FN(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_TYPE_DUP_FN(
        datatype: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_COMM_NULL_DELETE_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val_out: *mut ::std::os::raw::c_void,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_COMM_NULL_COPY_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_COMM_DUP_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_WIN_NULL_DELETE_FN(
        window: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val_out: *mut ::std::os::raw::c_void,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_WIN_NULL_COPY_FN(
        window: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_WIN_DUP_FN(
        window: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_communicator_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_comm_world: ompi_predefined_communicator_t;
}
extern "C" {
    pub static mut ompi_mpi_comm_self: ompi_predefined_communicator_t;
}
extern "C" {
    pub static mut ompi_mpi_comm_null: ompi_predefined_communicator_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_group_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_group_empty: ompi_predefined_group_t;
}
extern "C" {
    pub static mut ompi_mpi_group_null: ompi_predefined_group_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_instance_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_instance_null: ompi_predefined_instance_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_request_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_request_null: ompi_predefined_request_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_message_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_message_null: ompi_predefined_message_t;
}
extern "C" {
    pub static mut ompi_message_no_proc: ompi_predefined_message_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_op_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_op_null: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_min: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_max: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_sum: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_prod: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_land: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_band: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_lor: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_bor: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_lxor: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_bxor: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_maxloc: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_minloc: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_replace: ompi_predefined_op_t;
}
extern "C" {
    pub static mut ompi_mpi_op_no_op: ompi_predefined_op_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_datatype_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_datatype_null: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_char: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_signed_char: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_unsigned_char: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_byte: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_short: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_unsigned_short: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_unsigned: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_long: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_unsigned_long: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_long_long_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_unsigned_long_long: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_float: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_double: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_long_double: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_wchar: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_packed: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_cxx_bool: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_cxx_cplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_cxx_dblcplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_cxx_ldblcplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_logical: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_character: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_real: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_dblprec: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_cplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_dblcplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_ldblcplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2integer: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2real: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2dblprec: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2cplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_2dblcplex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_float_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_double_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_longdbl_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_short_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_long_int: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_logical1: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_logical2: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_logical4: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_logical8: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer1: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer2: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer4: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer8: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_integer16: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_real2: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_real4: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_real8: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_real16: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_complex4: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_complex8: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_complex16: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_complex32: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_int8_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_uint8_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_int16_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_uint16_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_int32_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_uint32_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_int64_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_uint64_t: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_aint: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_offset: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_count: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_c_bool: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_c_float_complex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_c_double_complex: ompi_predefined_datatype_t;
}
extern "C" {
    pub static mut ompi_mpi_c_long_double_complex: ompi_predefined_datatype_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_errhandler_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_errhandler_null: ompi_predefined_errhandler_t;
}
extern "C" {
    pub static mut ompi_mpi_errors_are_fatal: ompi_predefined_errhandler_t;
}
extern "C" {
    pub static mut ompi_mpi_errors_abort: ompi_predefined_errhandler_t;
}
extern "C" {
    pub static mut ompi_mpi_errors_return: ompi_predefined_errhandler_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_win_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_win_null: ompi_predefined_win_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_file_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_file_null: ompi_predefined_file_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ompi_predefined_info_t {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ompi_mpi_info_null: ompi_predefined_info_t;
}
extern "C" {
    pub static mut ompi_mpi_info_env: ompi_predefined_info_t;
}
extern "C" {
    pub static mut MPI_F_STATUS_IGNORE: *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static mut MPI_F_STATUSES_IGNORE: *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static mut MPI_F08_STATUS_IGNORE: *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static mut MPI_F08_STATUSES_IGNORE: *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Abort(
        comm: MPI_Comm,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Add_error_class(
        errorclass: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Add_error_code(
        errorclass: ::std::os::raw::c_int,
        errorcode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Add_error_string(
        errorcode: ::std::os::raw::c_int,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iallgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allgather_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iallgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allgatherv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alloc_mem(
        size: MPI_Aint,
        info: MPI_Info,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iallreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Allreduce_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ialltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoall_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ialltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoallv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ialltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Alltoallw_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Barrier(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ibarrier(
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Barrier_init(
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Bcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ibcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Bcast_init(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Bsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Bsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Buffer_attach(
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Buffer_detach(
        buffer: *mut ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cancel(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_coords(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxdims: ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_create(
        old_comm: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_cart: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_get(
        comm: MPI_Comm,
        maxdims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        periods: *mut ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_map(
        comm: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_rank(
        comm: MPI_Comm,
        coords: *const ::std::os::raw::c_int,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_shift(
        comm: MPI_Comm,
        direction: ::std::os::raw::c_int,
        disp: ::std::os::raw::c_int,
        rank_source: *mut ::std::os::raw::c_int,
        rank_dest: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cart_sub(
        comm: MPI_Comm,
        remain_dims: *const ::std::os::raw::c_int,
        new_comm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Cartdim_get(
        comm: MPI_Comm,
        ndims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Close_port(
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_accept(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_c2f(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_call_errhandler(
        comm: MPI_Comm,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_compare(
        comm1: MPI_Comm,
        comm2: MPI_Comm,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_connect(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create_errhandler(
        function: MPI_Comm_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create_keyval(
        comm_copy_attr_fn: MPI_Comm_copy_attr_function,
        comm_delete_attr_fn: MPI_Comm_delete_attr_function,
        comm_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create_group(
        comm: MPI_Comm,
        group: MPI_Group,
        tag: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create_from_group(
        group: MPI_Group,
        tag: *const ::std::os::raw::c_char,
        info: MPI_Info,
        errhandler: MPI_Errhandler,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_create(
        comm: MPI_Comm,
        group: MPI_Group,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_delete_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_disconnect(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_dup(
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_idup(
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_dup_with_info(
        comm: MPI_Comm,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_idup_with_info(
        comm: MPI_Comm,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_f2c(comm: ::std::os::raw::c_int) -> MPI_Comm;
}
extern "C" {
    pub fn MPI_Comm_free_keyval(
        comm_keyval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_free(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_create(
        comm_old: MPI_Comm,
        n: ::std::os::raw::c_int,
        nodes: *const ::std::os::raw::c_int,
        degrees: *const ::std::os::raw::c_int,
        targets: *const ::std::os::raw::c_int,
        weights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_create_adjacent(
        comm_old: MPI_Comm,
        indegree: ::std::os::raw::c_int,
        sources: *const ::std::os::raw::c_int,
        sourceweights: *const ::std::os::raw::c_int,
        outdegree: ::std::os::raw::c_int,
        destinations: *const ::std::os::raw::c_int,
        destweights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        comm_dist_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_neighbors(
        comm: MPI_Comm,
        maxindegree: ::std::os::raw::c_int,
        sources: *mut ::std::os::raw::c_int,
        sourceweights: *mut ::std::os::raw::c_int,
        maxoutdegree: ::std::os::raw::c_int,
        destinations: *mut ::std::os::raw::c_int,
        destweights: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dist_graph_neighbors_count(
        comm: MPI_Comm,
        inneighbors: *mut ::std::os::raw::c_int,
        outneighbors: *mut ::std::os::raw::c_int,
        weighted: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_errhandler(
        comm: MPI_Comm,
        erhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_info(
        comm: MPI_Comm,
        info_used: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_name(
        comm: MPI_Comm,
        comm_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_get_parent(parent: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_group(
        comm: MPI_Comm,
        group: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_join(
        fd: ::std::os::raw::c_int,
        intercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_rank(
        comm: MPI_Comm,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_remote_group(
        comm: MPI_Comm,
        group: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_remote_size(
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_errhandler(
        comm: MPI_Comm,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_info(
        comm: MPI_Comm,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_set_name(
        comm: MPI_Comm,
        comm_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_size(
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_spawn(
        command: *const ::std::os::raw::c_char,
        argv: *mut *mut ::std::os::raw::c_char,
        maxprocs: ::std::os::raw::c_int,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_spawn_multiple(
        count: ::std::os::raw::c_int,
        array_of_commands: *mut *mut ::std::os::raw::c_char,
        array_of_argv: *mut *mut *mut ::std::os::raw::c_char,
        array_of_maxprocs: *const ::std::os::raw::c_int,
        array_of_info: *const MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_split(
        comm: MPI_Comm,
        color: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_split_type(
        comm: MPI_Comm,
        split_type: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Comm_test_inter(
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Compare_and_swap(
        origin_addr: *const ::std::os::raw::c_void,
        compare_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Dims_create(
        nnodes: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Errhandler_c2f(
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Errhandler_f2c(
        errhandler: ::std::os::raw::c_int,
    ) -> MPI_Errhandler;
}
extern "C" {
    pub fn MPI_Errhandler_free(
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Error_class(
        errorcode: ::std::os::raw::c_int,
        errorclass: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Error_string(
        errorcode: ::std::os::raw::c_int,
        string: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Exscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iexscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Exscan_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Fetch_and_op(
        origin_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_c2f(file: MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_f2c(file: ::std::os::raw::c_int) -> MPI_File;
}
extern "C" {
    pub fn MPI_File_call_errhandler(
        fh: MPI_File,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_create_errhandler(
        function: MPI_File_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_errhandler(
        file: MPI_File,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_errhandler(
        file: MPI_File,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_open(
        comm: MPI_Comm,
        filename: *const ::std::os::raw::c_char,
        amode: ::std::os::raw::c_int,
        info: MPI_Info,
        fh: *mut MPI_File,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_close(fh: *mut MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_delete(
        filename: *const ::std::os::raw::c_char,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_size(
        fh: MPI_File,
        size: MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_preallocate(
        fh: MPI_File,
        size: MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_size(
        fh: MPI_File,
        size: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_group(
        fh: MPI_File,
        group: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_amode(
        fh: MPI_File,
        amode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_info(
        fh: MPI_File,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_info(
        fh: MPI_File,
        info_used: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_view(
        fh: MPI_File,
        disp: MPI_Offset,
        etype: MPI_Datatype,
        filetype: MPI_Datatype,
        datarep: *const ::std::os::raw::c_char,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_view(
        fh: MPI_File,
        disp: *mut MPI_Offset,
        etype: *mut MPI_Datatype,
        filetype: *mut MPI_Datatype,
        datarep: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_all(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_all(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_all(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_all(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_seek(
        fh: MPI_File,
        offset: MPI_Offset,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_position(
        fh: MPI_File,
        offset: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_byte_offset(
        fh: MPI_File,
        offset: MPI_Offset,
        disp: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_shared(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_shared(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iread_shared(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_iwrite_shared(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_ordered(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_ordered(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_seek_shared(
        fh: MPI_File,
        offset: MPI_Offset,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_position_shared(
        fh: MPI_File,
        offset: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at_all_begin(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_at_all_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at_all_begin(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_at_all_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_all_begin(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_all_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_all_begin(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_all_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_ordered_begin(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_read_ordered_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_ordered_begin(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_write_ordered_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_type_extent(
        fh: MPI_File,
        datatype: MPI_Datatype,
        extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_set_atomicity(
        fh: MPI_File,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_get_atomicity(
        fh: MPI_File,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_File_sync(fh: MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Finalized(
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Free_mem(
        base: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Gather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Igather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Gather_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Gatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Igatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Gatherv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_address(
        location: *const ::std::os::raw::c_void,
        address: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_count(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_elements(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_elements_x(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_library_version(
        version: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_processor_name(
        name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Get_version(
        version: *mut ::std::os::raw::c_int,
        subversion: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_create(
        comm_old: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        index: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_get(
        comm: MPI_Comm,
        maxindex: ::std::os::raw::c_int,
        maxedges: ::std::os::raw::c_int,
        index: *mut ::std::os::raw::c_int,
        edges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_map(
        comm: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        index: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_neighbors_count(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        nneighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graph_neighbors(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxneighbors: ::std::os::raw::c_int,
        neighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Graphdims_get(
        comm: MPI_Comm,
        nnodes: *mut ::std::os::raw::c_int,
        nedges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Grequest_complete(request: MPI_Request)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Grequest_start(
        query_fn: MPI_Grequest_query_function,
        free_fn: MPI_Grequest_free_function,
        cancel_fn: MPI_Grequest_cancel_function,
        extra_state: *mut ::std::os::raw::c_void,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_c2f(group: MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_compare(
        group1: MPI_Group,
        group2: MPI_Group,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_difference(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_f2c(group: ::std::os::raw::c_int) -> MPI_Group;
}
extern "C" {
    pub fn MPI_Group_free(group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_from_session_pset(
        session: MPI_Session,
        pset_name: *const ::std::os::raw::c_char,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_intersection(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_range_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_range_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_rank(
        group: MPI_Group,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_size(
        group: MPI_Group,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_translate_ranks(
        group1: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks1: *const ::std::os::raw::c_int,
        group2: MPI_Group,
        ranks2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Group_union(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ibsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Improbe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Imrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        type_: MPI_Datatype,
        message: *mut MPI_Message,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_c2f(info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_create(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_create_env(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        info: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_delete(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_dup(
        info: MPI_Info,
        newinfo: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_f2c(info: ::std::os::raw::c_int) -> MPI_Info;
}
extern "C" {
    pub fn MPI_Info_free(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_char,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get_nkeys(
        info: MPI_Info,
        nkeys: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get_nthkey(
        info: MPI_Info,
        n: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get_string(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        buflen: *mut ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_char,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_get_valuelen(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Info_set(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Init(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Initialized(
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Init_thread(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Intercomm_create(
        local_comm: MPI_Comm,
        local_leader: ::std::os::raw::c_int,
        bridge_comm: MPI_Comm,
        remote_leader: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        newintercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Intercomm_create_from_groups(
        local_group: MPI_Group,
        local_leader: ::std::os::raw::c_int,
        remote_group: MPI_Group,
        remote_leader: ::std::os::raw::c_int,
        tag: *const ::std::os::raw::c_char,
        info: MPI_Info,
        errhandler: MPI_Errhandler,
        newintercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Intercomm_merge(
        intercomm: MPI_Comm,
        high: ::std::os::raw::c_int,
        newintracomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Irecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Irsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Isend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Isendrecv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Isendrecv_replace(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Issend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Is_thread_main(
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Lookup_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Message_c2f(message: MPI_Message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Message_f2c(message: ::std::os::raw::c_int) -> MPI_Message;
}
extern "C" {
    pub fn MPI_Mprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Mrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        type_: MPI_Datatype,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_allgather_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_allgatherv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoall_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoallv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ineighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Neighbor_alltoallw_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Op_c2f(op: MPI_Op) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Op_commutative(
        op: MPI_Op,
        commute: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Op_create(
        function: MPI_User_function,
        commute: ::std::os::raw::c_int,
        op: *mut MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Open_port(
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Op_f2c(op: ::std::os::raw::c_int) -> MPI_Op;
}
extern "C" {
    pub fn MPI_Op_free(op: *mut MPI_Op) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: MPI_Aint,
        position: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack_external_size(
        datarep: *const ::std::os::raw::c_char,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        size: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack(
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pack_size(
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Parrived(
        request: MPI_Request,
        partition: ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pcontrol(
        level: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pready(
        partitions: ::std::os::raw::c_int,
        request: MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pready_range(
        partition_low: ::std::os::raw::c_int,
        partition_high: ::std::os::raw::c_int,
        request: MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Pready_list(
        length: ::std::os::raw::c_int,
        partition_list: *mut ::std::os::raw::c_int,
        request: MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Precv_init(
        buf: *mut ::std::os::raw::c_void,
        partitions: ::std::os::raw::c_int,
        count: MPI_Count,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Probe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Psend_init(
        buf: *const ::std::os::raw::c_void,
        partitions: ::std::os::raw::c_int,
        count: MPI_Count,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Publish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Put(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Query_thread(
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Raccumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Recv_init(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Recv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ireduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_local(
        inbuf: *const ::std::os::raw::c_void,
        inoutbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ireduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_scatter_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ireduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Reduce_scatter_block_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Register_datarep(
        datarep: *const ::std::os::raw::c_char,
        read_conversion_fn: MPI_Datarep_conversion_function,
        write_conversion_fn: MPI_Datarep_conversion_function,
        dtype_file_extent_fn: MPI_Datarep_extent_function,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Request_c2f(request: MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Request_f2c(request: ::std::os::raw::c_int) -> MPI_Request;
}
extern "C" {
    pub fn MPI_Request_free(request: *mut MPI_Request)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Request_get_status(
        request: MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rget(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rget_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rput(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_cout: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rsend(
        ibuf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Rsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scan_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iscatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scatter_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Iscatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Scatterv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Send_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Send(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Sendrecv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Sendrecv_replace(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_c2f(session: MPI_Session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_call_errhandler(
        session: MPI_Session,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_create_errhandler(
        session_errhandler_fn: MPI_Session_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_finalize(
        session: *mut MPI_Session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_get_errhandler(
        session: MPI_Session,
        erhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_get_info(
        session: MPI_Session,
        info_used: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_get_num_psets(
        session: MPI_Session,
        info: MPI_Info,
        npset_names: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_get_nth_pset(
        session: MPI_Session,
        info: MPI_Info,
        n: ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
        pset_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_get_pset_info(
        session: MPI_Session,
        pset_name: *const ::std::os::raw::c_char,
        info_used: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_init(
        info: MPI_Info,
        errhandler: MPI_Errhandler,
        session: *mut MPI_Session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_f2c(session: ::std::os::raw::c_int) -> MPI_Session;
}
extern "C" {
    pub fn MPI_Session_set_errhandler(
        session: MPI_Session,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Session_set_info(
        session: MPI_Session,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ssend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Ssend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Start(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Startall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_c2f(
        c_status: *const MPI_Status,
        f_status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_c2f08(
        c_status: *const MPI_Status,
        f08_status: *mut MPI_F08_status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_f082c(
        f08_status: *const MPI_F08_status,
        c_status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_f082f(
        f08_status: *const MPI_F08_status,
        f_status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_f2c(
        f_status: *const ::std::os::raw::c_int,
        c_status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_f2f08(
        f_status: *const ::std::os::raw::c_int,
        f08_status: *mut MPI_F08_status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_set_cancelled(
        status: *mut MPI_Status,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_set_elements(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Status_set_elements_x(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Testall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Testany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        index: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Test(
        request: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Test_cancelled(
        status: *const MPI_Status,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Testsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Topo_test(
        comm: MPI_Comm,
        status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_c2f(datatype: MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_commit(type_: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_contiguous(
        count: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_darray(
        size: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        gsize_array: *const ::std::os::raw::c_int,
        distrib_array: *const ::std::os::raw::c_int,
        darg_array: *const ::std::os::raw::c_int,
        psize_array: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_f90_complex(
        p: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_f90_integer(
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_f90_real(
        p: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_hindexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_hindexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_hvector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_keyval(
        type_copy_attr_fn: MPI_Type_copy_attr_function,
        type_delete_attr_fn: MPI_Type_delete_attr_function,
        type_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_indexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_struct(
        count: ::std::os::raw::c_int,
        array_of_block_lengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        array_of_types: *const MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_subarray(
        ndims: ::std::os::raw::c_int,
        size_array: *const ::std::os::raw::c_int,
        subsize_array: *const ::std::os::raw::c_int,
        start_array: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_create_resized(
        oldtype: MPI_Datatype,
        lb: MPI_Aint,
        extent: MPI_Aint,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_delete_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_dup(
        type_: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_free(type_: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_free_keyval(
        type_keyval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_f2c(datatype: ::std::os::raw::c_int) -> MPI_Datatype;
}
extern "C" {
    pub fn MPI_Type_get_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_contents(
        mtype: MPI_Datatype,
        max_integers: ::std::os::raw::c_int,
        max_addresses: ::std::os::raw::c_int,
        max_datatypes: ::std::os::raw::c_int,
        array_of_integers: *mut ::std::os::raw::c_int,
        array_of_addresses: *mut MPI_Aint,
        array_of_datatypes: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_envelope(
        type_: MPI_Datatype,
        num_integers: *mut ::std::os::raw::c_int,
        num_addresses: *mut ::std::os::raw::c_int,
        num_datatypes: *mut ::std::os::raw::c_int,
        combiner: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_extent(
        type_: MPI_Datatype,
        lb: *mut MPI_Aint,
        extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_extent_x(
        type_: MPI_Datatype,
        lb: *mut MPI_Count,
        extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_name(
        type_: MPI_Datatype,
        type_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_true_extent(
        datatype: MPI_Datatype,
        true_lb: *mut MPI_Aint,
        true_extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_get_true_extent_x(
        datatype: MPI_Datatype,
        true_lb: *mut MPI_Count,
        true_extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_indexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_match_size(
        typeclass: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        type_: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_set_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attr_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_set_name(
        type_: MPI_Datatype,
        type_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_size(
        type_: MPI_Datatype,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_size_x(
        type_: MPI_Datatype,
        size: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Type_vector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Unpack(
        inbuf: *const ::std::os::raw::c_void,
        insize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Unpublish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Unpack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        insize: MPI_Aint,
        position: *mut MPI_Aint,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Waitall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Waitany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        index: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Wait(
        request: *mut MPI_Request,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Waitsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_allocate(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_allocate_shared(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_attach(
        win: MPI_Win,
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_c2f(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_call_errhandler(
        win: MPI_Win,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_complete(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create(
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create_dynamic(
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create_errhandler(
        function: MPI_Win_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_create_keyval(
        win_copy_attr_fn: MPI_Win_copy_attr_function,
        win_delete_attr_fn: MPI_Win_delete_attr_function,
        win_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_delete_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_detach(
        win: MPI_Win,
        base: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_f2c(win: ::std::os::raw::c_int) -> MPI_Win;
}
extern "C" {
    pub fn MPI_Win_fence(
        mpi_assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush(
        rank: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush_local(
        rank: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_flush_local_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_free(win: *mut MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_free_keyval(
        win_keyval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_errhandler(
        win: MPI_Win,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_group(
        win: MPI_Win,
        group: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_info(
        win: MPI_Win,
        info_used: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_get_name(
        win: MPI_Win,
        win_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_lock(
        lock_type: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        mpi_assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_lock_all(
        mpi_assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_post(
        group: MPI_Group,
        mpi_assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_errhandler(
        win: MPI_Win,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_info(
        win: MPI_Win,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_set_name(
        win: MPI_Win,
        win_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_shared_query(
        win: MPI_Win,
        rank: ::std::os::raw::c_int,
        size: *mut MPI_Aint,
        disp_unit: *mut ::std::os::raw::c_int,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_start(
        group: MPI_Group,
        mpi_assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_sync(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_test(
        win: MPI_Win,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_unlock(
        rank: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_unlock_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Win_wait(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Wtick() -> f64;
}
extern "C" {
    pub fn MPI_Wtime() -> f64;
}
extern "C" {
    pub fn PMPI_Abort(
        comm: MPI_Comm,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Add_error_class(
        errorclass: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Add_error_code(
        errorclass: ::std::os::raw::c_int,
        errorcode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Add_error_string(
        errorcode: ::std::os::raw::c_int,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iallgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allgather_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iallgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allgatherv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alloc_mem(
        size: MPI_Aint,
        info: MPI_Info,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iallreduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Allreduce_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ialltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoall_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ialltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoallv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ialltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Alltoallw_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_create(
        comm_old: MPI_Comm,
        n: ::std::os::raw::c_int,
        nodes: *const ::std::os::raw::c_int,
        degrees: *const ::std::os::raw::c_int,
        targets: *const ::std::os::raw::c_int,
        weights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_create_adjacent(
        comm_old: MPI_Comm,
        indegree: ::std::os::raw::c_int,
        sources: *const ::std::os::raw::c_int,
        sourceweights: *const ::std::os::raw::c_int,
        outdegree: ::std::os::raw::c_int,
        destinations: *const ::std::os::raw::c_int,
        destweights: *const ::std::os::raw::c_int,
        info: MPI_Info,
        reorder: ::std::os::raw::c_int,
        comm_dist_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_neighbors(
        comm: MPI_Comm,
        maxindegree: ::std::os::raw::c_int,
        sources: *mut ::std::os::raw::c_int,
        sourceweights: *mut ::std::os::raw::c_int,
        maxoutdegree: ::std::os::raw::c_int,
        destinations: *mut ::std::os::raw::c_int,
        destweights: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dist_graph_neighbors_count(
        comm: MPI_Comm,
        inneighbors: *mut ::std::os::raw::c_int,
        outneighbors: *mut ::std::os::raw::c_int,
        weighted: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Barrier(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ibarrier(
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Barrier_init(
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Bcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ibcast(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Bcast_init(
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Bsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Bsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Buffer_attach(
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Buffer_detach(
        buffer: *mut ::std::os::raw::c_void,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cancel(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_coords(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxdims: ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_create(
        old_comm: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_cart: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_get(
        comm: MPI_Comm,
        maxdims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        periods: *mut ::std::os::raw::c_int,
        coords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_map(
        comm: MPI_Comm,
        ndims: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        periods: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_rank(
        comm: MPI_Comm,
        coords: *const ::std::os::raw::c_int,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_shift(
        comm: MPI_Comm,
        direction: ::std::os::raw::c_int,
        disp: ::std::os::raw::c_int,
        rank_source: *mut ::std::os::raw::c_int,
        rank_dest: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cart_sub(
        comm: MPI_Comm,
        remain_dims: *const ::std::os::raw::c_int,
        new_comm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Cartdim_get(
        comm: MPI_Comm,
        ndims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Close_port(
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_accept(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_c2f(comm: MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_call_errhandler(
        comm: MPI_Comm,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_compare(
        comm1: MPI_Comm,
        comm2: MPI_Comm,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_connect(
        port_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create_errhandler(
        function: MPI_Comm_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create_keyval(
        comm_copy_attr_fn: MPI_Comm_copy_attr_function,
        comm_delete_attr_fn: MPI_Comm_delete_attr_function,
        comm_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create_group(
        comm: MPI_Comm,
        group: MPI_Group,
        tag: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create_from_group(
        group: MPI_Group,
        tag: *const ::std::os::raw::c_char,
        info: MPI_Info,
        errhandler: MPI_Errhandler,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_create(
        comm: MPI_Comm,
        group: MPI_Group,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_delete_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_disconnect(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_dup(
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_idup(
        comm: MPI_Comm,
        newcomm: *mut MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_dup_with_info(
        comm: MPI_Comm,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_idup_with_info(
        comm: MPI_Comm,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_f2c(comm: ::std::os::raw::c_int) -> MPI_Comm;
}
extern "C" {
    pub fn PMPI_Comm_free_keyval(
        comm_keyval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_free(comm: *mut MPI_Comm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_errhandler(
        comm: MPI_Comm,
        erhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_info(
        comm: MPI_Comm,
        info_used: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_name(
        comm: MPI_Comm,
        comm_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_get_parent(parent: *mut MPI_Comm)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_group(
        comm: MPI_Comm,
        group: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_join(
        fd: ::std::os::raw::c_int,
        intercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_rank(
        comm: MPI_Comm,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_remote_group(
        comm: MPI_Comm,
        group: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_remote_size(
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_attr(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_errhandler(
        comm: MPI_Comm,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_info(
        comm: MPI_Comm,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_set_name(
        comm: MPI_Comm,
        comm_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_size(
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_spawn(
        command: *const ::std::os::raw::c_char,
        argv: *mut *mut ::std::os::raw::c_char,
        maxprocs: ::std::os::raw::c_int,
        info: MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_spawn_multiple(
        count: ::std::os::raw::c_int,
        array_of_commands: *mut *mut ::std::os::raw::c_char,
        array_of_argv: *mut *mut *mut ::std::os::raw::c_char,
        array_of_maxprocs: *const ::std::os::raw::c_int,
        array_of_info: *const MPI_Info,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        intercomm: *mut MPI_Comm,
        array_of_errcodes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_split(
        comm: MPI_Comm,
        color: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_split_type(
        comm: MPI_Comm,
        split_type: ::std::os::raw::c_int,
        key: ::std::os::raw::c_int,
        info: MPI_Info,
        newcomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Comm_test_inter(
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Compare_and_swap(
        origin_addr: *const ::std::os::raw::c_void,
        compare_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Dims_create(
        nnodes: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Errhandler_c2f(
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Errhandler_f2c(
        errhandler: ::std::os::raw::c_int,
    ) -> MPI_Errhandler;
}
extern "C" {
    pub fn PMPI_Errhandler_free(
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Error_class(
        errorcode: ::std::os::raw::c_int,
        errorclass: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Error_string(
        errorcode: ::std::os::raw::c_int,
        string: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Exscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iexscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Exscan_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Fetch_and_op(
        origin_addr: *const ::std::os::raw::c_void,
        result_addr: *mut ::std::os::raw::c_void,
        datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_c2f(file: MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_f2c(file: ::std::os::raw::c_int) -> MPI_File;
}
extern "C" {
    pub fn PMPI_File_call_errhandler(
        fh: MPI_File,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_create_errhandler(
        function: MPI_File_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_errhandler(
        file: MPI_File,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_errhandler(
        file: MPI_File,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_open(
        comm: MPI_Comm,
        filename: *const ::std::os::raw::c_char,
        amode: ::std::os::raw::c_int,
        info: MPI_Info,
        fh: *mut MPI_File,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_close(fh: *mut MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_delete(
        filename: *const ::std::os::raw::c_char,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_size(
        fh: MPI_File,
        size: MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_preallocate(
        fh: MPI_File,
        size: MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_size(
        fh: MPI_File,
        size: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_group(
        fh: MPI_File,
        group: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_amode(
        fh: MPI_File,
        amode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_info(
        fh: MPI_File,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_info(
        fh: MPI_File,
        info_used: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_view(
        fh: MPI_File,
        disp: MPI_Offset,
        etype: MPI_Datatype,
        filetype: MPI_Datatype,
        datarep: *const ::std::os::raw::c_char,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_view(
        fh: MPI_File,
        disp: *mut MPI_Offset,
        etype: *mut MPI_Datatype,
        filetype: *mut MPI_Datatype,
        datarep: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_at(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_at_all(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_all(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_all(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_all(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_all(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_seek(
        fh: MPI_File,
        offset: MPI_Offset,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_position(
        fh: MPI_File,
        offset: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_byte_offset(
        fh: MPI_File,
        offset: MPI_Offset,
        disp: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_shared(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_shared(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iread_shared(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_iwrite_shared(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_ordered(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_ordered(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_seek_shared(
        fh: MPI_File,
        offset: MPI_Offset,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_position_shared(
        fh: MPI_File,
        offset: *mut MPI_Offset,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at_all_begin(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_at_all_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at_all_begin(
        fh: MPI_File,
        offset: MPI_Offset,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_at_all_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_all_begin(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_all_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_all_begin(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_all_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_ordered_begin(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_read_ordered_end(
        fh: MPI_File,
        buf: *mut ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_ordered_begin(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_write_ordered_end(
        fh: MPI_File,
        buf: *const ::std::os::raw::c_void,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_type_extent(
        fh: MPI_File,
        datatype: MPI_Datatype,
        extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_set_atomicity(
        fh: MPI_File,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_get_atomicity(
        fh: MPI_File,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_File_sync(fh: MPI_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Finalized(
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Free_mem(
        base: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Gather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Igather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Gather_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Gatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Igatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Gatherv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_address(
        location: *const ::std::os::raw::c_void,
        address: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_count(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_elements(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_elements_x(
        status: *const MPI_Status,
        datatype: MPI_Datatype,
        count: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_library_version(
        version: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_processor_name(
        name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Get_version(
        version: *mut ::std::os::raw::c_int,
        subversion: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_create(
        comm_old: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        index: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        reorder: ::std::os::raw::c_int,
        comm_graph: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_get(
        comm: MPI_Comm,
        maxindex: ::std::os::raw::c_int,
        maxedges: ::std::os::raw::c_int,
        index: *mut ::std::os::raw::c_int,
        edges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_map(
        comm: MPI_Comm,
        nnodes: ::std::os::raw::c_int,
        index: *const ::std::os::raw::c_int,
        edges: *const ::std::os::raw::c_int,
        newrank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_neighbors_count(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        nneighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graph_neighbors(
        comm: MPI_Comm,
        rank: ::std::os::raw::c_int,
        maxneighbors: ::std::os::raw::c_int,
        neighbors: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Graphdims_get(
        comm: MPI_Comm,
        nnodes: *mut ::std::os::raw::c_int,
        nedges: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Grequest_complete(
        request: MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Grequest_start(
        query_fn: MPI_Grequest_query_function,
        free_fn: MPI_Grequest_free_function,
        cancel_fn: MPI_Grequest_cancel_function,
        extra_state: *mut ::std::os::raw::c_void,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_c2f(group: MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_compare(
        group1: MPI_Group,
        group2: MPI_Group,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_difference(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_f2c(group: ::std::os::raw::c_int) -> MPI_Group;
}
extern "C" {
    pub fn PMPI_Group_free(group: *mut MPI_Group) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_from_session_pset(
        session: MPI_Session,
        pset_name: *const ::std::os::raw::c_char,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks: *const ::std::os::raw::c_int,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_intersection(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_range_excl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_range_incl(
        group: MPI_Group,
        n: ::std::os::raw::c_int,
        ranges: *mut [::std::os::raw::c_int; 3usize],
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_rank(
        group: MPI_Group,
        rank: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_size(
        group: MPI_Group,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_translate_ranks(
        group1: MPI_Group,
        n: ::std::os::raw::c_int,
        ranks1: *const ::std::os::raw::c_int,
        group2: MPI_Group,
        ranks2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Group_union(
        group1: MPI_Group,
        group2: MPI_Group,
        newgroup: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ibsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Improbe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Imrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        type_: MPI_Datatype,
        message: *mut MPI_Message,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_c2f(info: MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_create(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_create_env(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        info: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_delete(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_dup(
        info: MPI_Info,
        newinfo: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_f2c(info: ::std::os::raw::c_int) -> MPI_Info;
}
extern "C" {
    pub fn PMPI_Info_free(info: *mut MPI_Info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_char,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get_nkeys(
        info: MPI_Info,
        nkeys: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get_nthkey(
        info: MPI_Info,
        n: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get_string(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        buflen: *mut ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_char,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_get_valuelen(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        valuelen: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Info_set(
        info: MPI_Info,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Init(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Initialized(
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Init_thread(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Intercomm_create(
        local_comm: MPI_Comm,
        local_leader: ::std::os::raw::c_int,
        bridge_comm: MPI_Comm,
        remote_leader: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        newintercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Intercomm_create_from_groups(
        local_group: MPI_Group,
        local_leader: ::std::os::raw::c_int,
        remote_group: MPI_Group,
        remote_leader: ::std::os::raw::c_int,
        tag: *const ::std::os::raw::c_char,
        info: MPI_Info,
        errhandler: MPI_Errhandler,
        newintercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Intercomm_merge(
        intercomm: MPI_Comm,
        high: ::std::os::raw::c_int,
        newintercomm: *mut MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Irecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Irsend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Isend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Isendrecv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Isendrecv_replace(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Issend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Precv_init(
        buf: *mut ::std::os::raw::c_void,
        partitions: ::std::os::raw::c_int,
        count: MPI_Count,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Psend_init(
        buf: *const ::std::os::raw::c_void,
        partitions: ::std::os::raw::c_int,
        count: MPI_Count,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pready(
        partitions: ::std::os::raw::c_int,
        request: MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pready_range(
        partition_low: ::std::os::raw::c_int,
        partition_high: ::std::os::raw::c_int,
        request: MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pready_list(
        length: ::std::os::raw::c_int,
        partition_list: *mut ::std::os::raw::c_int,
        request: MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Parrived(
        request: MPI_Request,
        partition: ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Is_thread_main(
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Lookup_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Message_c2f(message: MPI_Message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Message_f2c(message: ::std::os::raw::c_int) -> MPI_Message;
}
extern "C" {
    pub fn PMPI_Mprobe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Mrecv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        type_: MPI_Datatype,
        message: *mut MPI_Message,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_allgather(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_allgather_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_allgatherv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_allgatherv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_alltoall(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoall_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_alltoallv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoallv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ineighbor_alltoallw(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Neighbor_alltoallw_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        sdispls: *const MPI_Aint,
        sendtypes: *const MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        rdispls: *const MPI_Aint,
        recvtypes: *const MPI_Datatype,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Op_c2f(op: MPI_Op) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Op_commutative(
        op: MPI_Op,
        commute: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Op_create(
        function: MPI_User_function,
        commute: ::std::os::raw::c_int,
        op: *mut MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Open_port(
        info: MPI_Info,
        port_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Op_f2c(op: ::std::os::raw::c_int) -> MPI_Op;
}
extern "C" {
    pub fn PMPI_Op_free(op: *mut MPI_Op) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: MPI_Aint,
        position: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack_external_size(
        datarep: *const ::std::os::raw::c_char,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        size: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack(
        inbuf: *const ::std::os::raw::c_void,
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        outbuf: *mut ::std::os::raw::c_void,
        outsize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pack_size(
        incount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Pcontrol(
        level: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Probe(
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Publish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Put(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Query_thread(
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Raccumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Recv_init(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Recv(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ireduce(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_local(
        inbuf: *const ::std::os::raw::c_void,
        inoutbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ireduce_scatter(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_scatter_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcounts: *const ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ireduce_scatter_block(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Reduce_scatter_block_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Register_datarep(
        datarep: *const ::std::os::raw::c_char,
        read_conversion_fn: MPI_Datarep_conversion_function,
        write_conversion_fn: MPI_Datarep_conversion_function,
        dtype_file_extent_fn: MPI_Datarep_extent_function,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Request_c2f(request: MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Request_f2c(request: ::std::os::raw::c_int) -> MPI_Request;
}
extern "C" {
    pub fn PMPI_Request_free(
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Request_get_status(
        request: MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rget(
        origin_addr: *mut ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rget_accumulate(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        result_addr: *mut ::std::os::raw::c_void,
        result_count: ::std::os::raw::c_int,
        result_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_count: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        op: MPI_Op,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rput(
        origin_addr: *const ::std::os::raw::c_void,
        origin_count: ::std::os::raw::c_int,
        origin_datatype: MPI_Datatype,
        target_rank: ::std::os::raw::c_int,
        target_disp: MPI_Aint,
        target_cout: ::std::os::raw::c_int,
        target_datatype: MPI_Datatype,
        win: MPI_Win,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rsend(
        ibuf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Rsend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iscan(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scan_init(
        sendbuf: *const ::std::os::raw::c_void,
        recvbuf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        op: MPI_Op,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iscatter(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scatter_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Iscatterv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Scatterv_init(
        sendbuf: *const ::std::os::raw::c_void,
        sendcounts: *const ::std::os::raw::c_int,
        displs: *const ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        root: ::std::os::raw::c_int,
        comm: MPI_Comm,
        info: MPI_Info,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Send_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Send(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Sendrecv(
        sendbuf: *const ::std::os::raw::c_void,
        sendcount: ::std::os::raw::c_int,
        sendtype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        recvbuf: *mut ::std::os::raw::c_void,
        recvcount: ::std::os::raw::c_int,
        recvtype: MPI_Datatype,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Sendrecv_replace(
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        sendtag: ::std::os::raw::c_int,
        source: ::std::os::raw::c_int,
        recvtag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_c2f(session: MPI_Session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_call_errhandler(
        session: MPI_Session,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_create_errhandler(
        session_errhandler_fn: MPI_Session_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_finalize(
        session: *mut MPI_Session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_get_errhandler(
        session: MPI_Session,
        erhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_get_info(
        session: MPI_Session,
        info_used: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_get_num_psets(
        session: MPI_Session,
        info: MPI_Info,
        npset_names: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_get_nth_pset(
        session: MPI_Session,
        info: MPI_Info,
        n: ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
        pset_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_get_pset_info(
        session: MPI_Session,
        pset_name: *const ::std::os::raw::c_char,
        info_used: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_init(
        info: MPI_Info,
        errhandler: MPI_Errhandler,
        session: *mut MPI_Session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_f2c(session: ::std::os::raw::c_int) -> MPI_Session;
}
extern "C" {
    pub fn PMPI_Session_set_errhandler(
        session: MPI_Session,
        erhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Session_set_info(
        session: MPI_Session,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ssend_init(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
        request: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Ssend(
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        dest: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Start(request: *mut MPI_Request) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Startall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_c2f(
        c_status: *const MPI_Status,
        f_status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_c2f08(
        c_status: *const MPI_Status,
        f08_status: *mut MPI_F08_status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_f082f(
        f08_status: *const MPI_F08_status,
        f_status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_f082c(
        f08_status: *const MPI_F08_status,
        c_status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_f2c(
        f_status: *const ::std::os::raw::c_int,
        c_status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_f2f08(
        f_status: *const ::std::os::raw::c_int,
        f08_status: *mut MPI_F08_status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_set_cancelled(
        status: *mut MPI_Status,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_set_elements(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Status_set_elements_x(
        status: *mut MPI_Status,
        datatype: MPI_Datatype,
        count: MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Testall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Testany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        index: *mut ::std::os::raw::c_int,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Test(
        request: *mut MPI_Request,
        flag: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Test_cancelled(
        status: *const MPI_Status,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Testsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Topo_test(
        comm: MPI_Comm,
        status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_c2f(datatype: MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_commit(type_: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_contiguous(
        count: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_darray(
        size: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        gsize_array: *const ::std::os::raw::c_int,
        distrib_array: *const ::std::os::raw::c_int,
        darg_array: *const ::std::os::raw::c_int,
        psize_array: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_f90_complex(
        p: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_f90_integer(
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_f90_real(
        p: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_hindexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_hvector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_keyval(
        type_copy_attr_fn: MPI_Type_copy_attr_function,
        type_delete_attr_fn: MPI_Type_delete_attr_function,
        type_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_hindexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_indexed_block(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_struct(
        count: ::std::os::raw::c_int,
        array_of_block_lengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const MPI_Aint,
        array_of_types: *const MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_subarray(
        ndims: ::std::os::raw::c_int,
        size_array: *const ::std::os::raw::c_int,
        subsize_array: *const ::std::os::raw::c_int,
        start_array: *const ::std::os::raw::c_int,
        order: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_create_resized(
        oldtype: MPI_Datatype,
        lb: MPI_Aint,
        extent: MPI_Aint,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_delete_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_dup(
        type_: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_free(type_: *mut MPI_Datatype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_free_keyval(
        type_keyval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_f2c(datatype: ::std::os::raw::c_int) -> MPI_Datatype;
}
extern "C" {
    pub fn PMPI_Type_get_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_contents(
        mtype: MPI_Datatype,
        max_integers: ::std::os::raw::c_int,
        max_addresses: ::std::os::raw::c_int,
        max_datatypes: ::std::os::raw::c_int,
        array_of_integers: *mut ::std::os::raw::c_int,
        array_of_addresses: *mut MPI_Aint,
        array_of_datatypes: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_envelope(
        type_: MPI_Datatype,
        num_integers: *mut ::std::os::raw::c_int,
        num_addresses: *mut ::std::os::raw::c_int,
        num_datatypes: *mut ::std::os::raw::c_int,
        combiner: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_extent(
        type_: MPI_Datatype,
        lb: *mut MPI_Aint,
        extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_extent_x(
        type_: MPI_Datatype,
        lb: *mut MPI_Count,
        extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_name(
        type_: MPI_Datatype,
        type_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_true_extent(
        datatype: MPI_Datatype,
        true_lb: *mut MPI_Aint,
        true_extent: *mut MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_get_true_extent_x(
        datatype: MPI_Datatype,
        true_lb: *mut MPI_Count,
        true_extent: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_indexed(
        count: ::std::os::raw::c_int,
        array_of_blocklengths: *const ::std::os::raw::c_int,
        array_of_displacements: *const ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_match_size(
        typeclass: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        type_: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_set_attr(
        type_: MPI_Datatype,
        type_keyval: ::std::os::raw::c_int,
        attr_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_set_name(
        type_: MPI_Datatype,
        type_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_size(
        type_: MPI_Datatype,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_size_x(
        type_: MPI_Datatype,
        size: *mut MPI_Count,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Type_vector(
        count: ::std::os::raw::c_int,
        blocklength: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        oldtype: MPI_Datatype,
        newtype: *mut MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Unpack(
        inbuf: *const ::std::os::raw::c_void,
        insize: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_int,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
        comm: MPI_Comm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Unpublish_name(
        service_name: *const ::std::os::raw::c_char,
        info: MPI_Info,
        port_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Unpack_external(
        datarep: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_void,
        insize: MPI_Aint,
        position: *mut MPI_Aint,
        outbuf: *mut ::std::os::raw::c_void,
        outcount: ::std::os::raw::c_int,
        datatype: MPI_Datatype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Waitall(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Waitany(
        count: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        index: *mut ::std::os::raw::c_int,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Wait(
        request: *mut MPI_Request,
        status: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Waitsome(
        incount: ::std::os::raw::c_int,
        array_of_requests: *mut MPI_Request,
        outcount: *mut ::std::os::raw::c_int,
        array_of_indices: *mut ::std::os::raw::c_int,
        array_of_statuses: *mut MPI_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_allocate(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_allocate_shared(
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        baseptr: *mut ::std::os::raw::c_void,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_attach(
        win: MPI_Win,
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_c2f(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_call_errhandler(
        win: MPI_Win,
        errorcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_complete(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create(
        base: *mut ::std::os::raw::c_void,
        size: MPI_Aint,
        disp_unit: ::std::os::raw::c_int,
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create_dynamic(
        info: MPI_Info,
        comm: MPI_Comm,
        win: *mut MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create_errhandler(
        function: MPI_Win_errhandler_function,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_create_keyval(
        win_copy_attr_fn: MPI_Win_copy_attr_function,
        win_delete_attr_fn: MPI_Win_delete_attr_function,
        win_keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_delete_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_detach(
        win: MPI_Win,
        base: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_f2c(win: ::std::os::raw::c_int) -> MPI_Win;
}
extern "C" {
    pub fn PMPI_Win_fence(
        mpi_assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush(
        rank: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush_local(
        rank: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_flush_local_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_free(win: *mut MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_free_keyval(
        win_keyval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_errhandler(
        win: MPI_Win,
        errhandler: *mut MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_group(
        win: MPI_Win,
        group: *mut MPI_Group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_info(
        win: MPI_Win,
        info_used: *mut MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_get_name(
        win: MPI_Win,
        win_name: *mut ::std::os::raw::c_char,
        resultlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_lock(
        lock_type: ::std::os::raw::c_int,
        rank: ::std::os::raw::c_int,
        mpi_assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_lock_all(
        mpi_assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_post(
        group: MPI_Group,
        mpi_assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_attr(
        win: MPI_Win,
        win_keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_errhandler(
        win: MPI_Win,
        errhandler: MPI_Errhandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_info(
        win: MPI_Win,
        info: MPI_Info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_set_name(
        win: MPI_Win,
        win_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_shared_query(
        win: MPI_Win,
        rank: ::std::os::raw::c_int,
        size: *mut MPI_Aint,
        disp_unit: *mut ::std::os::raw::c_int,
        baseptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_start(
        group: MPI_Group,
        mpi_assert: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_sync(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_test(
        win: MPI_Win,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_unlock(
        rank: ::std::os::raw::c_int,
        win: MPI_Win,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_unlock_all(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Win_wait(win: MPI_Win) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Wtick() -> f64;
}
extern "C" {
    pub fn PMPI_Wtime() -> f64;
}
extern "C" {
    pub fn PMPI_T_init_thread(
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_get_num(
        num_cvar: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_get_info(
        cvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        bind: *mut ::std::os::raw::c_int,
        scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_get_index(
        name: *const ::std::os::raw::c_char,
        cvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_handle_alloc(
        cvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_cvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_handle_free(
        handle: *mut MPI_T_cvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_read(
        handle: MPI_T_cvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_cvar_write(
        handle: MPI_T_cvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_num(
        num_cat: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_info(
        cat_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        num_cvars: *mut ::std::os::raw::c_int,
        num_pvars: *mut ::std::os::raw::c_int,
        num_categories: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_index(
        name: *const ::std::os::raw::c_char,
        category_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_cvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_pvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_get_categories(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_category_changed(
        stamp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_get_num(
        num_pvar: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_get_info(
        pvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        var_class: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        bind: *mut ::std::os::raw::c_int,
        readonly: *mut ::std::os::raw::c_int,
        continuous: *mut ::std::os::raw::c_int,
        atomic: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_get_index(
        name: *const ::std::os::raw::c_char,
        var_class: ::std::os::raw::c_int,
        pvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_session_create(
        session: *mut MPI_T_pvar_session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_session_free(
        session: *mut MPI_T_pvar_session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_handle_alloc(
        session: MPI_T_pvar_session,
        pvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_pvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_handle_free(
        session: MPI_T_pvar_session,
        handle: *mut MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_start(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_stop(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_read(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_write(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_reset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_pvar_readreset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_enum_get_info(
        enumtype: MPI_T_enum,
        num: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_T_enum_get_item(
        enumtype: MPI_T_enum,
        index: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_init_thread(
        required: ::std::os::raw::c_int,
        provided: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_get_num(
        num_cvar: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_get_info(
        cvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        bind: *mut ::std::os::raw::c_int,
        scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_get_index(
        name: *const ::std::os::raw::c_char,
        cvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_handle_alloc(
        cvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_cvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_handle_free(
        handle: *mut MPI_T_cvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_read(
        handle: MPI_T_cvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_cvar_write(
        handle: MPI_T_cvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_num(
        num_cat: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_info(
        cat_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        num_cvars: *mut ::std::os::raw::c_int,
        num_pvars: *mut ::std::os::raw::c_int,
        num_categories: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_index(
        name: *const ::std::os::raw::c_char,
        category_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_cvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_pvars(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_get_categories(
        cat_index: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        indices: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_category_changed(
        stamp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_get_num(
        num_pvar: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_get_info(
        pvar_index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
        verbosity: *mut ::std::os::raw::c_int,
        var_class: *mut ::std::os::raw::c_int,
        datatype: *mut MPI_Datatype,
        enumtype: *mut MPI_T_enum,
        desc: *mut ::std::os::raw::c_char,
        desc_len: *mut ::std::os::raw::c_int,
        bind: *mut ::std::os::raw::c_int,
        readonly: *mut ::std::os::raw::c_int,
        continuous: *mut ::std::os::raw::c_int,
        atomic: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_get_index(
        name: *const ::std::os::raw::c_char,
        var_class: ::std::os::raw::c_int,
        pvar_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_session_create(
        session: *mut MPI_T_pvar_session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_session_free(
        session: *mut MPI_T_pvar_session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_handle_alloc(
        session: MPI_T_pvar_session,
        pvar_index: ::std::os::raw::c_int,
        obj_handle: *mut ::std::os::raw::c_void,
        handle: *mut MPI_T_pvar_handle,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_handle_free(
        session: MPI_T_pvar_session,
        handle: *mut MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_start(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_stop(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_read(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_write(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_reset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_pvar_readreset(
        session: MPI_T_pvar_session,
        handle: MPI_T_pvar_handle,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_enum_get_info(
        enumtype: MPI_T_enum,
        num: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_T_enum_get_item(
        enumtype: MPI_T_enum,
        index: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        name_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Attr_delete(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Attr_delete(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Attr_get(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Attr_get(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Attr_put(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Attr_put(
        comm: MPI_Comm,
        keyval: ::std::os::raw::c_int,
        attribute_val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type MPI_Copy_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MPI_Delete_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: MPI_Comm,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn MPI_Keyval_create(
        copy_fn: MPI_Copy_function,
        delete_fn: MPI_Delete_function,
        keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Keyval_create(
        copy_fn: MPI_Copy_function,
        delete_fn: MPI_Delete_function,
        keyval: *mut ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MPI_Keyval_free(
        keyval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PMPI_Keyval_free(
        keyval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_DUP_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_NULL_COPY_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        extra_state: *mut ::std::os::raw::c_void,
        attribute_val_in: *mut ::std::os::raw::c_void,
        attribute_val_out: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OMPI_C_MPI_NULL_DELETE_FN(
        comm: MPI_Comm,
        comm_keyval: ::std::os::raw::c_int,
        attribute_val_out: *mut ::std::os::raw::c_void,
        extra_state: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type herr_t = ::std::os::raw::c_int;
pub type hbool_t = bool;
pub type htri_t = ::std::os::raw::c_int;
pub type hsize_t = u64;
pub type hssize_t = i64;
pub type haddr_t = u64;
pub const H5_iter_order_t_H5_ITER_UNKNOWN: H5_iter_order_t = -1;
pub const H5_iter_order_t_H5_ITER_INC: H5_iter_order_t = 0;
pub const H5_iter_order_t_H5_ITER_DEC: H5_iter_order_t = 1;
pub const H5_iter_order_t_H5_ITER_NATIVE: H5_iter_order_t = 2;
pub const H5_iter_order_t_H5_ITER_N: H5_iter_order_t = 3;
pub type H5_iter_order_t = ::std::os::raw::c_int;
pub const H5_index_t_H5_INDEX_UNKNOWN: H5_index_t = -1;
pub const H5_index_t_H5_INDEX_NAME: H5_index_t = 0;
pub const H5_index_t_H5_INDEX_CRT_ORDER: H5_index_t = 1;
pub const H5_index_t_H5_INDEX_N: H5_index_t = 2;
pub type H5_index_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5_ih_info_t {
    pub index_size: hsize_t,
    pub heap_size: hsize_t,
}
#[test]
fn bindgen_test_layout_H5_ih_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5_ih_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5_ih_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5_ih_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5_ih_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5_ih_info_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).index_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5_ih_info_t),
            "::",
            stringify!(index_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).heap_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5_ih_info_t),
            "::",
            stringify!(heap_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_token_t {
    pub __data: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_H5O_token_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5O_token_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5O_token_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5O_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5O_token_t>(),
        1usize,
        concat!("Alignment of ", stringify!(H5O_token_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_token_t),
            "::",
            stringify!(__data)
        )
    );
}
pub type H5_atclose_func_t = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn H5open() -> herr_t;
}
extern "C" {
    pub fn H5atclose(
        func: H5_atclose_func_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5close() -> herr_t;
}
extern "C" {
    pub fn H5dont_atexit() -> herr_t;
}
extern "C" {
    pub fn H5garbage_collect() -> herr_t;
}
extern "C" {
    pub fn H5set_free_list_limits(
        reg_global_lim: ::std::os::raw::c_int,
        reg_list_lim: ::std::os::raw::c_int,
        arr_global_lim: ::std::os::raw::c_int,
        arr_list_lim: ::std::os::raw::c_int,
        blk_global_lim: ::std::os::raw::c_int,
        blk_list_lim: ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn H5get_free_list_sizes(
        reg_size: *mut usize,
        arr_size: *mut usize,
        blk_size: *mut usize,
        fac_size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5get_libversion(
        majnum: *mut ::std::os::raw::c_uint,
        minnum: *mut ::std::os::raw::c_uint,
        relnum: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5check_version(
        majnum: ::std::os::raw::c_uint,
        minnum: ::std::os::raw::c_uint,
        relnum: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5is_library_terminating(is_terminating: *mut hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5is_library_threadsafe(is_ts: *mut hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5free_memory(mem: *mut ::std::os::raw::c_void) -> herr_t;
}
extern "C" {
    pub fn H5allocate_memory(
        size: usize,
        clear: hbool_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5resize_memory(
        mem: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub const H5I_type_t_H5I_UNINIT: H5I_type_t = -2;
pub const H5I_type_t_H5I_BADID: H5I_type_t = -1;
pub const H5I_type_t_H5I_FILE: H5I_type_t = 1;
pub const H5I_type_t_H5I_GROUP: H5I_type_t = 2;
pub const H5I_type_t_H5I_DATATYPE: H5I_type_t = 3;
pub const H5I_type_t_H5I_DATASPACE: H5I_type_t = 4;
pub const H5I_type_t_H5I_DATASET: H5I_type_t = 5;
pub const H5I_type_t_H5I_MAP: H5I_type_t = 6;
pub const H5I_type_t_H5I_ATTR: H5I_type_t = 7;
pub const H5I_type_t_H5I_VFL: H5I_type_t = 8;
pub const H5I_type_t_H5I_VOL: H5I_type_t = 9;
pub const H5I_type_t_H5I_GENPROP_CLS: H5I_type_t = 10;
pub const H5I_type_t_H5I_GENPROP_LST: H5I_type_t = 11;
pub const H5I_type_t_H5I_ERROR_CLASS: H5I_type_t = 12;
pub const H5I_type_t_H5I_ERROR_MSG: H5I_type_t = 13;
pub const H5I_type_t_H5I_ERROR_STACK: H5I_type_t = 14;
pub const H5I_type_t_H5I_SPACE_SEL_ITER: H5I_type_t = 15;
pub const H5I_type_t_H5I_EVENTSET: H5I_type_t = 16;
pub const H5I_type_t_H5I_NTYPES: H5I_type_t = 17;
pub type H5I_type_t = ::std::os::raw::c_int;
pub type hid_t = i64;
pub type H5I_free_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: *mut ::std::os::raw::c_void,
        request: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5I_search_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: *mut ::std::os::raw::c_void,
        id: hid_t,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type H5I_iterate_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        id: hid_t,
        udata: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Iregister(
        type_: H5I_type_t,
        object: *const ::std::os::raw::c_void,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Iobject_verify(
        id: hid_t,
        type_: H5I_type_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5Iremove_verify(
        id: hid_t,
        type_: H5I_type_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5Iget_type(id: hid_t) -> H5I_type_t;
}
extern "C" {
    pub fn H5Iget_file_id(id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Iget_name(
        id: hid_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Iinc_ref(id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Idec_ref(id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Iget_ref(id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Iregister_type(
        hash_size: usize,
        reserved: ::std::os::raw::c_uint,
        free_func: H5I_free_t,
    ) -> H5I_type_t;
}
extern "C" {
    pub fn H5Iclear_type(type_: H5I_type_t, force: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Idestroy_type(type_: H5I_type_t) -> herr_t;
}
extern "C" {
    pub fn H5Iinc_type_ref(type_: H5I_type_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Idec_type_ref(type_: H5I_type_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Iget_type_ref(type_: H5I_type_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Isearch(
        type_: H5I_type_t,
        func: H5I_search_func_t,
        key: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5Iiterate(
        type_: H5I_type_t,
        op: H5I_iterate_func_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Inmembers(type_: H5I_type_t, num_members: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Itype_exists(type_: H5I_type_t) -> htri_t;
}
extern "C" {
    pub fn H5Iis_valid(id: hid_t) -> htri_t;
}
pub const H5O_type_t_H5O_TYPE_UNKNOWN: H5O_type_t = -1;
pub const H5O_type_t_H5O_TYPE_GROUP: H5O_type_t = 0;
pub const H5O_type_t_H5O_TYPE_DATASET: H5O_type_t = 1;
pub const H5O_type_t_H5O_TYPE_NAMED_DATATYPE: H5O_type_t = 2;
pub const H5O_type_t_H5O_TYPE_MAP: H5O_type_t = 3;
pub const H5O_type_t_H5O_TYPE_NTYPES: H5O_type_t = 4;
pub type H5O_type_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_hdr_info_t {
    pub version: ::std::os::raw::c_uint,
    pub nmesgs: ::std::os::raw::c_uint,
    pub nchunks: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub space: H5O_hdr_info_t__bindgen_ty_1,
    pub mesg: H5O_hdr_info_t__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_hdr_info_t__bindgen_ty_1 {
    pub total: hsize_t,
    pub meta: hsize_t,
    pub mesg: hsize_t,
    pub free: hsize_t,
}
#[test]
fn bindgen_test_layout_H5O_hdr_info_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5O_hdr_info_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5O_hdr_info_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(H5O_hdr_info_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5O_hdr_info_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(H5O_hdr_info_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t__bindgen_ty_1),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meta) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t__bindgen_ty_1),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mesg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t__bindgen_ty_1),
            "::",
            stringify!(mesg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t__bindgen_ty_1),
            "::",
            stringify!(free)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_hdr_info_t__bindgen_ty_2 {
    pub present: u64,
    pub shared: u64,
}
#[test]
fn bindgen_test_layout_H5O_hdr_info_t__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<H5O_hdr_info_t__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5O_hdr_info_t__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(H5O_hdr_info_t__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<H5O_hdr_info_t__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(H5O_hdr_info_t__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).present) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t__bindgen_ty_2),
            "::",
            stringify!(present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t__bindgen_ty_2),
            "::",
            stringify!(shared)
        )
    );
}
#[test]
fn bindgen_test_layout_H5O_hdr_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5O_hdr_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5O_hdr_info_t>(),
        64usize,
        concat!("Size of: ", stringify!(H5O_hdr_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5O_hdr_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5O_hdr_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nmesgs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t),
            "::",
            stringify!(nmesgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nchunks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t),
            "::",
            stringify!(nchunks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mesg) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_hdr_info_t),
            "::",
            stringify!(mesg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_info2_t {
    pub fileno: ::std::os::raw::c_ulong,
    pub token: H5O_token_t,
    pub type_: H5O_type_t,
    pub rc: ::std::os::raw::c_uint,
    pub atime: time_t,
    pub mtime: time_t,
    pub ctime: time_t,
    pub btime: time_t,
    pub num_attrs: hsize_t,
}
#[test]
fn bindgen_test_layout_H5O_info2_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5O_info2_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5O_info2_t>(),
        72usize,
        concat!("Size of: ", stringify!(H5O_info2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5O_info2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5O_info2_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info2_t),
            "::",
            stringify!(fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info2_t),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info2_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rc) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info2_t),
            "::",
            stringify!(rc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info2_t),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info2_t),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctime) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info2_t),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).btime) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info2_t),
            "::",
            stringify!(btime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_attrs) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info2_t),
            "::",
            stringify!(num_attrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_native_info_t {
    pub hdr: H5O_hdr_info_t,
    pub meta_size: H5O_native_info_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_native_info_t__bindgen_ty_1 {
    pub obj: H5_ih_info_t,
    pub attr: H5_ih_info_t,
}
#[test]
fn bindgen_test_layout_H5O_native_info_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5O_native_info_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5O_native_info_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(H5O_native_info_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5O_native_info_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(H5O_native_info_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_native_info_t__bindgen_ty_1),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_native_info_t__bindgen_ty_1),
            "::",
            stringify!(attr)
        )
    );
}
#[test]
fn bindgen_test_layout_H5O_native_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5O_native_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5O_native_info_t>(),
        96usize,
        concat!("Size of: ", stringify!(H5O_native_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5O_native_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5O_native_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_native_info_t),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).meta_size) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_native_info_t),
            "::",
            stringify!(meta_size)
        )
    );
}
pub type H5O_msg_crt_idx_t = u32;
pub type H5O_iterate2_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: hid_t,
        name: *const ::std::os::raw::c_char,
        info: *const H5O_info2_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub const H5O_mcdt_search_ret_t_H5O_MCDT_SEARCH_ERROR: H5O_mcdt_search_ret_t =
    -1;
pub const H5O_mcdt_search_ret_t_H5O_MCDT_SEARCH_CONT: H5O_mcdt_search_ret_t = 0;
pub const H5O_mcdt_search_ret_t_H5O_MCDT_SEARCH_STOP: H5O_mcdt_search_ret_t = 1;
pub type H5O_mcdt_search_ret_t = ::std::os::raw::c_int;
pub type H5O_mcdt_search_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        op_data: *mut ::std::os::raw::c_void,
    ) -> H5O_mcdt_search_ret_t,
>;
extern "C" {
    pub fn H5Oopen(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Oopen_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Oopen_by_token(loc_id: hid_t, token: H5O_token_t) -> hid_t;
}
extern "C" {
    pub fn H5Oopen_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        lapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Oopen_by_idx_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Oexists_by_name(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Oget_info3(
        loc_id: hid_t,
        oinfo: *mut H5O_info2_t,
        fields: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_name3(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        oinfo: *mut H5O_info2_t,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_name_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        oinfo: *mut H5O_info2_t,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_idx3(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        oinfo: *mut H5O_info2_t,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_native_info(
        loc_id: hid_t,
        oinfo: *mut H5O_native_info_t,
        fields: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_native_info_by_name(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        oinfo: *mut H5O_native_info_t,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_native_info_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        oinfo: *mut H5O_native_info_t,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Olink(
        obj_id: hid_t,
        new_loc_id: hid_t,
        new_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oincr_refcount(object_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Odecr_refcount(object_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Ocopy(
        src_loc_id: hid_t,
        src_name: *const ::std::os::raw::c_char,
        dst_loc_id: hid_t,
        dst_name: *const ::std::os::raw::c_char,
        ocpypl_id: hid_t,
        lcpl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ocopy_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        src_loc_id: hid_t,
        src_name: *const ::std::os::raw::c_char,
        dst_loc_id: hid_t,
        dst_name: *const ::std::os::raw::c_char,
        ocpypl_id: hid_t,
        lcpl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oset_comment(
        obj_id: hid_t,
        comment: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oset_comment_by_name(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        comment: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_comment(
        obj_id: hid_t,
        comment: *mut ::std::os::raw::c_char,
        bufsize: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Oget_comment_by_name(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        comment: *mut ::std::os::raw::c_char,
        bufsize: usize,
        lapl_id: hid_t,
    ) -> isize;
}
extern "C" {
    pub fn H5Ovisit3(
        obj_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate2_t,
        op_data: *mut ::std::os::raw::c_void,
        fields: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ovisit_by_name3(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate2_t,
        op_data: *mut ::std::os::raw::c_void,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oclose(object_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Oclose_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        object_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oflush(obj_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Oflush_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        obj_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Orefresh(oid: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Orefresh_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        oid: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Odisable_mdc_flushes(object_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Oenable_mdc_flushes(object_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Oare_mdc_flushes_disabled(
        object_id: hid_t,
        are_disabled: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Otoken_cmp(
        loc_id: hid_t,
        token1: *const H5O_token_t,
        token2: *const H5O_token_t,
        cmp_value: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Otoken_to_str(
        loc_id: hid_t,
        token: *const H5O_token_t,
        token_str: *mut *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Otoken_from_str(
        loc_id: hid_t,
        token_str: *const ::std::os::raw::c_char,
        token: *mut H5O_token_t,
    ) -> herr_t;
}
extern "C" {
    pub static H5O_TOKEN_UNDEF_g: H5O_token_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_stat_t {
    pub size: hsize_t,
    pub free: hsize_t,
    pub nmesgs: ::std::os::raw::c_uint,
    pub nchunks: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_H5O_stat_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5O_stat_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5O_stat_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5O_stat_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5O_stat_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5O_stat_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_stat_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_stat_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nmesgs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_stat_t),
            "::",
            stringify!(nmesgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nchunks) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_stat_t),
            "::",
            stringify!(nchunks)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_info1_t {
    pub fileno: ::std::os::raw::c_ulong,
    pub addr: haddr_t,
    pub type_: H5O_type_t,
    pub rc: ::std::os::raw::c_uint,
    pub atime: time_t,
    pub mtime: time_t,
    pub ctime: time_t,
    pub btime: time_t,
    pub num_attrs: hsize_t,
    pub hdr: H5O_hdr_info_t,
    pub meta_size: H5O_info1_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_info1_t__bindgen_ty_1 {
    pub obj: H5_ih_info_t,
    pub attr: H5_ih_info_t,
}
#[test]
fn bindgen_test_layout_H5O_info1_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5O_info1_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5O_info1_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(H5O_info1_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5O_info1_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(H5O_info1_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t__bindgen_ty_1),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t__bindgen_ty_1),
            "::",
            stringify!(attr)
        )
    );
}
#[test]
fn bindgen_test_layout_H5O_info1_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5O_info1_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5O_info1_t>(),
        160usize,
        concat!("Size of: ", stringify!(H5O_info1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5O_info1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5O_info1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t),
            "::",
            stringify!(fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rc) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t),
            "::",
            stringify!(rc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).btime) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t),
            "::",
            stringify!(btime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_attrs) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t),
            "::",
            stringify!(num_attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).meta_size) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(H5O_info1_t),
            "::",
            stringify!(meta_size)
        )
    );
}
pub type H5O_iterate1_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: hid_t,
        name: *const ::std::os::raw::c_char,
        info: *const H5O_info1_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Oopen_by_addr(loc_id: hid_t, addr: haddr_t) -> hid_t;
}
extern "C" {
    pub fn H5Oget_info1(loc_id: hid_t, oinfo: *mut H5O_info1_t) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_name1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        oinfo: *mut H5O_info1_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_idx1(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        oinfo: *mut H5O_info1_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info2(
        loc_id: hid_t,
        oinfo: *mut H5O_info1_t,
        fields: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_name2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        oinfo: *mut H5O_info1_t,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_idx2(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        oinfo: *mut H5O_info1_t,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ovisit1(
        obj_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate1_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ovisit_by_name1(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate1_t,
        op_data: *mut ::std::os::raw::c_void,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ovisit2(
        obj_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate1_t,
        op_data: *mut ::std::os::raw::c_void,
        fields: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ovisit_by_name2(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate1_t,
        op_data: *mut ::std::os::raw::c_void,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
    ) -> herr_t;
}
pub const H5T_class_t_H5T_NO_CLASS: H5T_class_t = -1;
pub const H5T_class_t_H5T_INTEGER: H5T_class_t = 0;
pub const H5T_class_t_H5T_FLOAT: H5T_class_t = 1;
pub const H5T_class_t_H5T_TIME: H5T_class_t = 2;
pub const H5T_class_t_H5T_STRING: H5T_class_t = 3;
pub const H5T_class_t_H5T_BITFIELD: H5T_class_t = 4;
pub const H5T_class_t_H5T_OPAQUE: H5T_class_t = 5;
pub const H5T_class_t_H5T_COMPOUND: H5T_class_t = 6;
pub const H5T_class_t_H5T_REFERENCE: H5T_class_t = 7;
pub const H5T_class_t_H5T_ENUM: H5T_class_t = 8;
pub const H5T_class_t_H5T_VLEN: H5T_class_t = 9;
pub const H5T_class_t_H5T_ARRAY: H5T_class_t = 10;
pub const H5T_class_t_H5T_NCLASSES: H5T_class_t = 11;
pub type H5T_class_t = ::std::os::raw::c_int;
pub const H5T_order_t_H5T_ORDER_ERROR: H5T_order_t = -1;
pub const H5T_order_t_H5T_ORDER_LE: H5T_order_t = 0;
pub const H5T_order_t_H5T_ORDER_BE: H5T_order_t = 1;
pub const H5T_order_t_H5T_ORDER_VAX: H5T_order_t = 2;
pub const H5T_order_t_H5T_ORDER_MIXED: H5T_order_t = 3;
pub const H5T_order_t_H5T_ORDER_NONE: H5T_order_t = 4;
pub type H5T_order_t = ::std::os::raw::c_int;
pub const H5T_sign_t_H5T_SGN_ERROR: H5T_sign_t = -1;
pub const H5T_sign_t_H5T_SGN_NONE: H5T_sign_t = 0;
pub const H5T_sign_t_H5T_SGN_2: H5T_sign_t = 1;
pub const H5T_sign_t_H5T_NSGN: H5T_sign_t = 2;
pub type H5T_sign_t = ::std::os::raw::c_int;
pub const H5T_norm_t_H5T_NORM_ERROR: H5T_norm_t = -1;
pub const H5T_norm_t_H5T_NORM_IMPLIED: H5T_norm_t = 0;
pub const H5T_norm_t_H5T_NORM_MSBSET: H5T_norm_t = 1;
pub const H5T_norm_t_H5T_NORM_NONE: H5T_norm_t = 2;
pub type H5T_norm_t = ::std::os::raw::c_int;
pub const H5T_cset_t_H5T_CSET_ERROR: H5T_cset_t = -1;
pub const H5T_cset_t_H5T_CSET_ASCII: H5T_cset_t = 0;
pub const H5T_cset_t_H5T_CSET_UTF8: H5T_cset_t = 1;
pub const H5T_cset_t_H5T_CSET_RESERVED_2: H5T_cset_t = 2;
pub const H5T_cset_t_H5T_CSET_RESERVED_3: H5T_cset_t = 3;
pub const H5T_cset_t_H5T_CSET_RESERVED_4: H5T_cset_t = 4;
pub const H5T_cset_t_H5T_CSET_RESERVED_5: H5T_cset_t = 5;
pub const H5T_cset_t_H5T_CSET_RESERVED_6: H5T_cset_t = 6;
pub const H5T_cset_t_H5T_CSET_RESERVED_7: H5T_cset_t = 7;
pub const H5T_cset_t_H5T_CSET_RESERVED_8: H5T_cset_t = 8;
pub const H5T_cset_t_H5T_CSET_RESERVED_9: H5T_cset_t = 9;
pub const H5T_cset_t_H5T_CSET_RESERVED_10: H5T_cset_t = 10;
pub const H5T_cset_t_H5T_CSET_RESERVED_11: H5T_cset_t = 11;
pub const H5T_cset_t_H5T_CSET_RESERVED_12: H5T_cset_t = 12;
pub const H5T_cset_t_H5T_CSET_RESERVED_13: H5T_cset_t = 13;
pub const H5T_cset_t_H5T_CSET_RESERVED_14: H5T_cset_t = 14;
pub const H5T_cset_t_H5T_CSET_RESERVED_15: H5T_cset_t = 15;
pub type H5T_cset_t = ::std::os::raw::c_int;
pub const H5T_str_t_H5T_STR_ERROR: H5T_str_t = -1;
pub const H5T_str_t_H5T_STR_NULLTERM: H5T_str_t = 0;
pub const H5T_str_t_H5T_STR_NULLPAD: H5T_str_t = 1;
pub const H5T_str_t_H5T_STR_SPACEPAD: H5T_str_t = 2;
pub const H5T_str_t_H5T_STR_RESERVED_3: H5T_str_t = 3;
pub const H5T_str_t_H5T_STR_RESERVED_4: H5T_str_t = 4;
pub const H5T_str_t_H5T_STR_RESERVED_5: H5T_str_t = 5;
pub const H5T_str_t_H5T_STR_RESERVED_6: H5T_str_t = 6;
pub const H5T_str_t_H5T_STR_RESERVED_7: H5T_str_t = 7;
pub const H5T_str_t_H5T_STR_RESERVED_8: H5T_str_t = 8;
pub const H5T_str_t_H5T_STR_RESERVED_9: H5T_str_t = 9;
pub const H5T_str_t_H5T_STR_RESERVED_10: H5T_str_t = 10;
pub const H5T_str_t_H5T_STR_RESERVED_11: H5T_str_t = 11;
pub const H5T_str_t_H5T_STR_RESERVED_12: H5T_str_t = 12;
pub const H5T_str_t_H5T_STR_RESERVED_13: H5T_str_t = 13;
pub const H5T_str_t_H5T_STR_RESERVED_14: H5T_str_t = 14;
pub const H5T_str_t_H5T_STR_RESERVED_15: H5T_str_t = 15;
pub type H5T_str_t = ::std::os::raw::c_int;
pub const H5T_pad_t_H5T_PAD_ERROR: H5T_pad_t = -1;
pub const H5T_pad_t_H5T_PAD_ZERO: H5T_pad_t = 0;
pub const H5T_pad_t_H5T_PAD_ONE: H5T_pad_t = 1;
pub const H5T_pad_t_H5T_PAD_BACKGROUND: H5T_pad_t = 2;
pub const H5T_pad_t_H5T_NPAD: H5T_pad_t = 3;
pub type H5T_pad_t = ::std::os::raw::c_int;
pub const H5T_direction_t_H5T_DIR_DEFAULT: H5T_direction_t = 0;
pub const H5T_direction_t_H5T_DIR_ASCEND: H5T_direction_t = 1;
pub const H5T_direction_t_H5T_DIR_DESCEND: H5T_direction_t = 2;
pub type H5T_direction_t = ::std::os::raw::c_uint;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_RANGE_HI: H5T_conv_except_t = 0;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_RANGE_LOW: H5T_conv_except_t = 1;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_PRECISION: H5T_conv_except_t = 2;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_TRUNCATE: H5T_conv_except_t = 3;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_PINF: H5T_conv_except_t = 4;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_NINF: H5T_conv_except_t = 5;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_NAN: H5T_conv_except_t = 6;
pub type H5T_conv_except_t = ::std::os::raw::c_uint;
pub const H5T_conv_ret_t_H5T_CONV_ABORT: H5T_conv_ret_t = -1;
pub const H5T_conv_ret_t_H5T_CONV_UNHANDLED: H5T_conv_ret_t = 0;
pub const H5T_conv_ret_t_H5T_CONV_HANDLED: H5T_conv_ret_t = 1;
pub type H5T_conv_ret_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvl_t {
    pub len: usize,
    pub p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_hvl_t() {
    const UNINIT: ::std::mem::MaybeUninit<hvl_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hvl_t>(),
        16usize,
        concat!("Size of: ", stringify!(hvl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hvl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(hvl_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(hvl_t), "::", stringify!(len))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(hvl_t), "::", stringify!(p))
    );
}
pub type H5T_conv_except_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        except_type: H5T_conv_except_t,
        src_id: hid_t,
        dst_id: hid_t,
        src_buf: *mut ::std::os::raw::c_void,
        dst_buf: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> H5T_conv_ret_t,
>;
extern "C" {
    pub static mut H5T_IEEE_F16BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_IEEE_F16LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_IEEE_F32BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_IEEE_F32LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_IEEE_F64BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_IEEE_F64LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I8BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I8LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I16BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I16LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I32BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I32LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I64BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I64LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U8BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U8LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U16BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U16LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U32BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U32LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U64BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U64LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B8BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B8LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B16BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B16LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B32BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B32LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B64BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B64LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_REF_OBJ_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_REF_DSETREG_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_REF_g: hid_t;
}
extern "C" {
    pub static mut H5T_UNIX_D32BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_UNIX_D32LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_UNIX_D64BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_UNIX_D64LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_C_S1_g: hid_t;
}
extern "C" {
    pub static mut H5T_FORTRAN_S1_g: hid_t;
}
extern "C" {
    pub static mut H5T_VAX_F32_g: hid_t;
}
extern "C" {
    pub static mut H5T_VAX_F64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_SCHAR_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UCHAR_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_SHORT_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_USHORT_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_LONG_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_ULONG_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_LLONG_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_ULLONG_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_FLOAT16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_FLOAT_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_DOUBLE_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_LDOUBLE_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_B8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_B16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_B32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_B64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_OPAQUE_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_HADDR_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_HSIZE_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_HSSIZE_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_HERR_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_HBOOL_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_LEAST8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_LEAST8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_FAST8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_FAST8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_LEAST16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_LEAST16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_FAST16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_FAST16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_LEAST32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_LEAST32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_FAST32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_FAST32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_LEAST64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_LEAST64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_FAST64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_FAST64_g: hid_t;
}
extern "C" {
    pub fn H5Tcreate(type_: H5T_class_t, size: usize) -> hid_t;
}
extern "C" {
    pub fn H5Tcopy(type_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Tclose(type_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Tclose_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        type_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tequal(type1_id: hid_t, type2_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Tlock(type_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Tcommit2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        lcpl_id: hid_t,
        tcpl_id: hid_t,
        tapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tcommit_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        lcpl_id: hid_t,
        tcpl_id: hid_t,
        tapl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Topen2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        tapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Topen_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        tapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Tcommit_anon(
        loc_id: hid_t,
        type_id: hid_t,
        tcpl_id: hid_t,
        tapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tget_create_plist(type_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Tcommitted(type_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Tencode(
        obj_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
        nalloc: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tdecode(buf: *const ::std::os::raw::c_void) -> hid_t;
}
extern "C" {
    pub fn H5Tflush(type_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Trefresh(type_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Tinsert(
        parent_id: hid_t,
        name: *const ::std::os::raw::c_char,
        offset: usize,
        member_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tpack(type_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Tenum_create(base_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Tenum_insert(
        type_: hid_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tenum_nameof(
        type_: hid_t,
        value: *const ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tenum_valueof(
        type_: hid_t,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tvlen_create(base_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Tarray_create2(
        base_id: hid_t,
        ndims: ::std::os::raw::c_uint,
        dim: *const hsize_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Tget_array_ndims(type_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Tget_array_dims2(
        type_id: hid_t,
        dims: *mut hsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Tset_tag(
        type_: hid_t,
        tag: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tget_tag(type_: hid_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn H5Tget_super(type_: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Tget_class(type_id: hid_t) -> H5T_class_t;
}
extern "C" {
    pub fn H5Tdetect_class(type_id: hid_t, cls: H5T_class_t) -> htri_t;
}
extern "C" {
    pub fn H5Tget_size(type_id: hid_t) -> usize;
}
extern "C" {
    pub fn H5Tget_order(type_id: hid_t) -> H5T_order_t;
}
extern "C" {
    pub fn H5Tget_precision(type_id: hid_t) -> usize;
}
extern "C" {
    pub fn H5Tget_offset(type_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Tget_pad(
        type_id: hid_t,
        lsb: *mut H5T_pad_t,
        msb: *mut H5T_pad_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tget_sign(type_id: hid_t) -> H5T_sign_t;
}
extern "C" {
    pub fn H5Tget_fields(
        type_id: hid_t,
        spos: *mut usize,
        epos: *mut usize,
        esize: *mut usize,
        mpos: *mut usize,
        msize: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tget_ebias(type_id: hid_t) -> usize;
}
extern "C" {
    pub fn H5Tget_norm(type_id: hid_t) -> H5T_norm_t;
}
extern "C" {
    pub fn H5Tget_inpad(type_id: hid_t) -> H5T_pad_t;
}
extern "C" {
    pub fn H5Tget_strpad(type_id: hid_t) -> H5T_str_t;
}
extern "C" {
    pub fn H5Tget_nmembers(type_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Tget_member_name(
        type_id: hid_t,
        membno: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn H5Tget_member_index(
        type_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Tget_member_offset(
        type_id: hid_t,
        membno: ::std::os::raw::c_uint,
    ) -> usize;
}
extern "C" {
    pub fn H5Tget_member_class(
        type_id: hid_t,
        membno: ::std::os::raw::c_uint,
    ) -> H5T_class_t;
}
extern "C" {
    pub fn H5Tget_member_type(
        type_id: hid_t,
        membno: ::std::os::raw::c_uint,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Tget_member_value(
        type_id: hid_t,
        membno: ::std::os::raw::c_uint,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tget_cset(type_id: hid_t) -> H5T_cset_t;
}
extern "C" {
    pub fn H5Tis_variable_str(type_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Tget_native_type(
        type_id: hid_t,
        direction: H5T_direction_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Tset_size(type_id: hid_t, size: usize) -> herr_t;
}
extern "C" {
    pub fn H5Tset_order(type_id: hid_t, order: H5T_order_t) -> herr_t;
}
extern "C" {
    pub fn H5Tset_precision(type_id: hid_t, prec: usize) -> herr_t;
}
extern "C" {
    pub fn H5Tset_offset(type_id: hid_t, offset: usize) -> herr_t;
}
extern "C" {
    pub fn H5Tset_pad(type_id: hid_t, lsb: H5T_pad_t, msb: H5T_pad_t)
        -> herr_t;
}
extern "C" {
    pub fn H5Tset_sign(type_id: hid_t, sign: H5T_sign_t) -> herr_t;
}
extern "C" {
    pub fn H5Tset_fields(
        type_id: hid_t,
        spos: usize,
        epos: usize,
        esize: usize,
        mpos: usize,
        msize: usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tset_ebias(type_id: hid_t, ebias: usize) -> herr_t;
}
extern "C" {
    pub fn H5Tset_norm(type_id: hid_t, norm: H5T_norm_t) -> herr_t;
}
extern "C" {
    pub fn H5Tset_inpad(type_id: hid_t, pad: H5T_pad_t) -> herr_t;
}
extern "C" {
    pub fn H5Tset_cset(type_id: hid_t, cset: H5T_cset_t) -> herr_t;
}
extern "C" {
    pub fn H5Tset_strpad(type_id: hid_t, strpad: H5T_str_t) -> herr_t;
}
extern "C" {
    pub fn H5Tconvert(
        src_id: hid_t,
        dst_id: hid_t,
        nelmts: usize,
        buf: *mut ::std::os::raw::c_void,
        background: *mut ::std::os::raw::c_void,
        plist_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Treclaim(
        type_id: hid_t,
        space_id: hid_t,
        plist_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tcommit1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Topen1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Tarray_create1(
        base_id: hid_t,
        ndims: ::std::os::raw::c_int,
        dim: *const hsize_t,
        perm: *const ::std::os::raw::c_int,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Tget_array_dims1(
        type_id: hid_t,
        dims: *mut hsize_t,
        perm: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5A_info_t {
    pub corder_valid: hbool_t,
    pub corder: H5O_msg_crt_idx_t,
    pub cset: H5T_cset_t,
    pub data_size: hsize_t,
}
#[test]
fn bindgen_test_layout_H5A_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5A_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5A_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5A_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5A_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5A_info_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).corder_valid) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5A_info_t),
            "::",
            stringify!(corder_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corder) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5A_info_t),
            "::",
            stringify!(corder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5A_info_t),
            "::",
            stringify!(cset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5A_info_t),
            "::",
            stringify!(data_size)
        )
    );
}
pub type H5A_operator2_t = ::std::option::Option<
    unsafe extern "C" fn(
        location_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        ainfo: *const H5A_info_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Aclose(attr_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Aclose_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        attr_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Acreate2(
        loc_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        acpl_id: hid_t,
        aapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Acreate_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        acpl_id: hid_t,
        aapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Acreate_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        acpl_id: hid_t,
        aapl_id: hid_t,
        lapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Acreate_by_name_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        acpl_id: hid_t,
        aapl_id: hid_t,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Adelete(
        loc_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Adelete_by_idx(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Adelete_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aexists(
        obj_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Aexists_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        obj_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        exists: *mut hbool_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aexists_by_name(
        obj_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Aexists_by_name_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        exists: *mut hbool_t,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aget_create_plist(attr_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Aget_info(attr_id: hid_t, ainfo: *mut H5A_info_t) -> herr_t;
}
extern "C" {
    pub fn H5Aget_info_by_idx(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        ainfo: *mut H5A_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aget_info_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        ainfo: *mut H5A_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aget_name(
        attr_id: hid_t,
        buf_size: usize,
        buf: *mut ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn H5Aget_name_by_idx(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
        lapl_id: hid_t,
    ) -> isize;
}
extern "C" {
    pub fn H5Aget_space(attr_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Aget_storage_size(attr_id: hid_t) -> hsize_t;
}
extern "C" {
    pub fn H5Aget_type(attr_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Aiterate2(
        loc_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        idx: *mut hsize_t,
        op: H5A_operator2_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aiterate_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        idx: *mut hsize_t,
        op: H5A_operator2_t,
        op_data: *mut ::std::os::raw::c_void,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aopen(
        obj_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        aapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Aopen_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        obj_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        aapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Aopen_by_idx(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        aapl_id: hid_t,
        lapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Aopen_by_idx_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        aapl_id: hid_t,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Aopen_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        aapl_id: hid_t,
        lapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Aopen_by_name_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        aapl_id: hid_t,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Aread(
        attr_id: hid_t,
        type_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aread_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        attr_id: hid_t,
        dtype_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Arename(
        loc_id: hid_t,
        old_name: *const ::std::os::raw::c_char,
        new_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Arename_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        old_name: *const ::std::os::raw::c_char,
        new_name: *const ::std::os::raw::c_char,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Arename_by_name_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        old_attr_name: *const ::std::os::raw::c_char,
        new_attr_name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Awrite(
        attr_id: hid_t,
        type_id: hid_t,
        buf: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Awrite_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        attr_id: hid_t,
        type_id: hid_t,
        buf: *const ::std::os::raw::c_void,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Arename_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        old_attr_name: *const ::std::os::raw::c_char,
        new_attr_name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> herr_t;
}
pub type H5A_operator1_t = ::std::option::Option<
    unsafe extern "C" fn(
        location_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        operator_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Acreate1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        acpl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Aget_num_attrs(loc_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Aiterate1(
        loc_id: hid_t,
        idx: *mut ::std::os::raw::c_uint,
        op: H5A_operator1_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aopen_idx(loc_id: hid_t, idx: ::std::os::raw::c_uint) -> hid_t;
}
extern "C" {
    pub fn H5Aopen_name(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
pub const H5C_cache_incr_mode_H5C_incr__off: H5C_cache_incr_mode = 0;
pub const H5C_cache_incr_mode_H5C_incr__threshold: H5C_cache_incr_mode = 1;
pub type H5C_cache_incr_mode = ::std::os::raw::c_uint;
pub const H5C_cache_flash_incr_mode_H5C_flash_incr__off:
    H5C_cache_flash_incr_mode = 0;
pub const H5C_cache_flash_incr_mode_H5C_flash_incr__add_space:
    H5C_cache_flash_incr_mode = 1;
pub type H5C_cache_flash_incr_mode = ::std::os::raw::c_uint;
pub const H5C_cache_decr_mode_H5C_decr__off: H5C_cache_decr_mode = 0;
pub const H5C_cache_decr_mode_H5C_decr__threshold: H5C_cache_decr_mode = 1;
pub const H5C_cache_decr_mode_H5C_decr__age_out: H5C_cache_decr_mode = 2;
pub const H5C_cache_decr_mode_H5C_decr__age_out_with_threshold:
    H5C_cache_decr_mode = 3;
pub type H5C_cache_decr_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5AC_cache_config_t {
    pub version: ::std::os::raw::c_int,
    pub rpt_fcn_enabled: hbool_t,
    pub open_trace_file: hbool_t,
    pub close_trace_file: hbool_t,
    pub trace_file_name: [::std::os::raw::c_char; 1025usize],
    pub evictions_enabled: hbool_t,
    pub set_initial_size: hbool_t,
    pub initial_size: usize,
    pub min_clean_fraction: f64,
    pub max_size: usize,
    pub min_size: usize,
    pub epoch_length: ::std::os::raw::c_long,
    pub incr_mode: H5C_cache_incr_mode,
    pub lower_hr_threshold: f64,
    pub increment: f64,
    pub apply_max_increment: hbool_t,
    pub max_increment: usize,
    pub flash_incr_mode: H5C_cache_flash_incr_mode,
    pub flash_multiple: f64,
    pub flash_threshold: f64,
    pub decr_mode: H5C_cache_decr_mode,
    pub upper_hr_threshold: f64,
    pub decrement: f64,
    pub apply_max_decrement: hbool_t,
    pub max_decrement: usize,
    pub epochs_before_eviction: ::std::os::raw::c_int,
    pub apply_empty_reserve: hbool_t,
    pub empty_reserve: f64,
    pub dirty_bytes_threshold: usize,
    pub metadata_write_strategy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_H5AC_cache_config_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5AC_cache_config_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5AC_cache_config_t>(),
        1216usize,
        concat!("Size of: ", stringify!(H5AC_cache_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5AC_cache_config_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5AC_cache_config_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rpt_fcn_enabled) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(rpt_fcn_enabled)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).open_trace_file) as usize - ptr as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(open_trace_file)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).close_trace_file) as usize
                - ptr as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(close_trace_file)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).trace_file_name) as usize - ptr as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(trace_file_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).evictions_enabled) as usize
                - ptr as usize
        },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(evictions_enabled)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).set_initial_size) as usize
                - ptr as usize
        },
        1033usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(set_initial_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).initial_size) as usize - ptr as usize
        },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(initial_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).min_clean_fraction) as usize
                - ptr as usize
        },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(min_clean_fraction)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_size) as usize - ptr as usize
        },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(max_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).min_size) as usize - ptr as usize
        },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(min_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).epoch_length) as usize - ptr as usize
        },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(epoch_length)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).incr_mode) as usize - ptr as usize
        },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(incr_mode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).lower_hr_threshold) as usize
                - ptr as usize
        },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(lower_hr_threshold)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).increment) as usize - ptr as usize
        },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(increment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).apply_max_increment) as usize
                - ptr as usize
        },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(apply_max_increment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_increment) as usize - ptr as usize
        },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(max_increment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).flash_incr_mode) as usize - ptr as usize
        },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(flash_incr_mode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).flash_multiple) as usize - ptr as usize
        },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(flash_multiple)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).flash_threshold) as usize - ptr as usize
        },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(flash_threshold)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).decr_mode) as usize - ptr as usize
        },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(decr_mode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).upper_hr_threshold) as usize
                - ptr as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(upper_hr_threshold)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).decrement) as usize - ptr as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(decrement)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).apply_max_decrement) as usize
                - ptr as usize
        },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(apply_max_decrement)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_decrement) as usize - ptr as usize
        },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(max_decrement)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).epochs_before_eviction) as usize
                - ptr as usize
        },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(epochs_before_eviction)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).apply_empty_reserve) as usize
                - ptr as usize
        },
        1188usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(apply_empty_reserve)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).empty_reserve) as usize - ptr as usize
        },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(empty_reserve)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dirty_bytes_threshold) as usize
                - ptr as usize
        },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(dirty_bytes_threshold)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).metadata_write_strategy) as usize
                - ptr as usize
        },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_config_t),
            "::",
            stringify!(metadata_write_strategy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5AC_cache_image_config_t {
    pub version: ::std::os::raw::c_int,
    pub generate_image: hbool_t,
    pub save_resize_status: hbool_t,
    pub entry_ageout: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_H5AC_cache_image_config_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5AC_cache_image_config_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5AC_cache_image_config_t>(),
        12usize,
        concat!("Size of: ", stringify!(H5AC_cache_image_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5AC_cache_image_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(H5AC_cache_image_config_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_image_config_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).generate_image) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_image_config_t),
            "::",
            stringify!(generate_image)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).save_resize_status) as usize
                - ptr as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_image_config_t),
            "::",
            stringify!(save_resize_status)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).entry_ageout) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5AC_cache_image_config_t),
            "::",
            stringify!(entry_ageout)
        )
    );
}
pub const H5D_layout_t_H5D_LAYOUT_ERROR: H5D_layout_t = -1;
pub const H5D_layout_t_H5D_COMPACT: H5D_layout_t = 0;
pub const H5D_layout_t_H5D_CONTIGUOUS: H5D_layout_t = 1;
pub const H5D_layout_t_H5D_CHUNKED: H5D_layout_t = 2;
pub const H5D_layout_t_H5D_VIRTUAL: H5D_layout_t = 3;
pub const H5D_layout_t_H5D_NLAYOUTS: H5D_layout_t = 4;
pub type H5D_layout_t = ::std::os::raw::c_int;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_BTREE: H5D_chunk_index_t = 0;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_SINGLE: H5D_chunk_index_t = 1;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_NONE: H5D_chunk_index_t = 2;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_FARRAY: H5D_chunk_index_t = 3;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_EARRAY: H5D_chunk_index_t = 4;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_BT2: H5D_chunk_index_t = 5;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_NTYPES: H5D_chunk_index_t = 6;
pub type H5D_chunk_index_t = ::std::os::raw::c_uint;
pub const H5D_alloc_time_t_H5D_ALLOC_TIME_ERROR: H5D_alloc_time_t = -1;
pub const H5D_alloc_time_t_H5D_ALLOC_TIME_DEFAULT: H5D_alloc_time_t = 0;
pub const H5D_alloc_time_t_H5D_ALLOC_TIME_EARLY: H5D_alloc_time_t = 1;
pub const H5D_alloc_time_t_H5D_ALLOC_TIME_LATE: H5D_alloc_time_t = 2;
pub const H5D_alloc_time_t_H5D_ALLOC_TIME_INCR: H5D_alloc_time_t = 3;
pub type H5D_alloc_time_t = ::std::os::raw::c_int;
pub const H5D_space_status_t_H5D_SPACE_STATUS_ERROR: H5D_space_status_t = -1;
pub const H5D_space_status_t_H5D_SPACE_STATUS_NOT_ALLOCATED:
    H5D_space_status_t = 0;
pub const H5D_space_status_t_H5D_SPACE_STATUS_PART_ALLOCATED:
    H5D_space_status_t = 1;
pub const H5D_space_status_t_H5D_SPACE_STATUS_ALLOCATED: H5D_space_status_t = 2;
pub type H5D_space_status_t = ::std::os::raw::c_int;
pub const H5D_fill_time_t_H5D_FILL_TIME_ERROR: H5D_fill_time_t = -1;
pub const H5D_fill_time_t_H5D_FILL_TIME_ALLOC: H5D_fill_time_t = 0;
pub const H5D_fill_time_t_H5D_FILL_TIME_NEVER: H5D_fill_time_t = 1;
pub const H5D_fill_time_t_H5D_FILL_TIME_IFSET: H5D_fill_time_t = 2;
pub type H5D_fill_time_t = ::std::os::raw::c_int;
pub const H5D_fill_value_t_H5D_FILL_VALUE_ERROR: H5D_fill_value_t = -1;
pub const H5D_fill_value_t_H5D_FILL_VALUE_UNDEFINED: H5D_fill_value_t = 0;
pub const H5D_fill_value_t_H5D_FILL_VALUE_DEFAULT: H5D_fill_value_t = 1;
pub const H5D_fill_value_t_H5D_FILL_VALUE_USER_DEFINED: H5D_fill_value_t = 2;
pub type H5D_fill_value_t = ::std::os::raw::c_int;
pub const H5D_vds_view_t_H5D_VDS_ERROR: H5D_vds_view_t = -1;
pub const H5D_vds_view_t_H5D_VDS_FIRST_MISSING: H5D_vds_view_t = 0;
pub const H5D_vds_view_t_H5D_VDS_LAST_AVAILABLE: H5D_vds_view_t = 1;
pub type H5D_vds_view_t = ::std::os::raw::c_int;
pub type H5D_append_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        dataset_id: hid_t,
        cur_dims: *mut hsize_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5D_operator_t = ::std::option::Option<
    unsafe extern "C" fn(
        elem: *mut ::std::os::raw::c_void,
        type_id: hid_t,
        ndim: ::std::os::raw::c_uint,
        point: *const hsize_t,
        operator_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5D_scatter_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        src_buf: *mut *const ::std::os::raw::c_void,
        src_buf_bytes_used: *mut usize,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5D_gather_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst_buf: *const ::std::os::raw::c_void,
        dst_buf_bytes_used: usize,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5D_chunk_iter_op_t = ::std::option::Option<
    unsafe extern "C" fn(
        offset: *const hsize_t,
        filter_mask: ::std::os::raw::c_uint,
        addr: haddr_t,
        size: hsize_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn H5Dcreate2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        lcpl_id: hid_t,
        dcpl_id: hid_t,
        dapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Dcreate_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        lcpl_id: hid_t,
        dcpl_id: hid_t,
        dapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Dcreate_anon(
        loc_id: hid_t,
        type_id: hid_t,
        space_id: hid_t,
        dcpl_id: hid_t,
        dapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Dopen2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        dapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Dopen_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        dapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Dget_space(dset_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Dget_space_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        dset_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Dget_space_status(
        dset_id: hid_t,
        allocation: *mut H5D_space_status_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dget_type(dset_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Dget_create_plist(dset_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Dget_access_plist(dset_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Dget_storage_size(dset_id: hid_t) -> hsize_t;
}
extern "C" {
    pub fn H5Dget_chunk_storage_size(
        dset_id: hid_t,
        offset: *const hsize_t,
        chunk_bytes: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dget_num_chunks(
        dset_id: hid_t,
        fspace_id: hid_t,
        nchunks: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dget_chunk_info_by_coord(
        dset_id: hid_t,
        offset: *const hsize_t,
        filter_mask: *mut ::std::os::raw::c_uint,
        addr: *mut haddr_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dchunk_iter(
        dset_id: hid_t,
        dxpl_id: hid_t,
        cb: H5D_chunk_iter_op_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dget_chunk_info(
        dset_id: hid_t,
        fspace_id: hid_t,
        chk_idx: hsize_t,
        offset: *mut hsize_t,
        filter_mask: *mut ::std::os::raw::c_uint,
        addr: *mut haddr_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dget_offset(dset_id: hid_t) -> haddr_t;
}
extern "C" {
    pub fn H5Dread(
        dset_id: hid_t,
        mem_type_id: hid_t,
        mem_space_id: hid_t,
        file_space_id: hid_t,
        dxpl_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dread_multi(
        count: usize,
        dset_id: *mut hid_t,
        mem_type_id: *mut hid_t,
        mem_space_id: *mut hid_t,
        file_space_id: *mut hid_t,
        dxpl_id: hid_t,
        buf: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dread_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        dset_id: hid_t,
        mem_type_id: hid_t,
        mem_space_id: hid_t,
        file_space_id: hid_t,
        dxpl_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dread_multi_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        count: usize,
        dset_id: *mut hid_t,
        mem_type_id: *mut hid_t,
        mem_space_id: *mut hid_t,
        file_space_id: *mut hid_t,
        dxpl_id: hid_t,
        buf: *mut *mut ::std::os::raw::c_void,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dwrite(
        dset_id: hid_t,
        mem_type_id: hid_t,
        mem_space_id: hid_t,
        file_space_id: hid_t,
        dxpl_id: hid_t,
        buf: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dwrite_multi(
        count: usize,
        dset_id: *mut hid_t,
        mem_type_id: *mut hid_t,
        mem_space_id: *mut hid_t,
        file_space_id: *mut hid_t,
        dxpl_id: hid_t,
        buf: *mut *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dwrite_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        dset_id: hid_t,
        mem_type_id: hid_t,
        mem_space_id: hid_t,
        file_space_id: hid_t,
        dxpl_id: hid_t,
        buf: *const ::std::os::raw::c_void,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dwrite_multi_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        count: usize,
        dset_id: *mut hid_t,
        mem_type_id: *mut hid_t,
        mem_space_id: *mut hid_t,
        file_space_id: *mut hid_t,
        dxpl_id: hid_t,
        buf: *mut *const ::std::os::raw::c_void,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dwrite_chunk(
        dset_id: hid_t,
        dxpl_id: hid_t,
        filters: u32,
        offset: *const hsize_t,
        data_size: usize,
        buf: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dread_chunk(
        dset_id: hid_t,
        dxpl_id: hid_t,
        offset: *const hsize_t,
        filters: *mut u32,
        buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Diterate(
        buf: *mut ::std::os::raw::c_void,
        type_id: hid_t,
        space_id: hid_t,
        op: H5D_operator_t,
        operator_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dvlen_get_buf_size(
        dset_id: hid_t,
        type_id: hid_t,
        space_id: hid_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dfill(
        fill: *const ::std::os::raw::c_void,
        fill_type_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
        buf_type_id: hid_t,
        space_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dset_extent(dset_id: hid_t, size: *const hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Dset_extent_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        dset_id: hid_t,
        size: *const hsize_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dflush(dset_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Drefresh(dset_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Dscatter(
        op: H5D_scatter_func_t,
        op_data: *mut ::std::os::raw::c_void,
        type_id: hid_t,
        dst_space_id: hid_t,
        dst_buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dgather(
        src_space_id: hid_t,
        src_buf: *const ::std::os::raw::c_void,
        type_id: hid_t,
        dst_buf_size: usize,
        dst_buf: *mut ::std::os::raw::c_void,
        op: H5D_gather_func_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dclose(dset_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Dclose_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        dset_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ddebug(dset_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Dformat_convert(dset_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Dget_chunk_index_type(
        did: hid_t,
        idx_type: *mut H5D_chunk_index_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dcreate1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        dcpl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Dopen1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Dextend(dset_id: hid_t, size: *const hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Dvlen_reclaim(
        type_id: hid_t,
        space_id: hid_t,
        dxpl_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize
        },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._prevchain) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_prevchain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_cookie_io_functions_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(
        __filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(
        arg1: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(
        __s: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(
        __fd: ::std::os::raw::c_int,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: usize,
    );
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(
        __c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(
        __w: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(
        __stream: *mut FILE,
        __pos: *mut fpos_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(
        __stream: *mut FILE,
        __pos: *const fpos_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(
        __s: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const H5E_type_t_H5E_MAJOR: H5E_type_t = 0;
pub const H5E_type_t_H5E_MINOR: H5E_type_t = 1;
pub type H5E_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5E_error2_t {
    pub cls_id: hid_t,
    pub maj_num: hid_t,
    pub min_num: hid_t,
    pub line: ::std::os::raw::c_uint,
    pub func_name: *const ::std::os::raw::c_char,
    pub file_name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_H5E_error2_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5E_error2_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5E_error2_t>(),
        56usize,
        concat!("Size of: ", stringify!(H5E_error2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5E_error2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5E_error2_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cls_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error2_t),
            "::",
            stringify!(cls_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maj_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error2_t),
            "::",
            stringify!(maj_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_num) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error2_t),
            "::",
            stringify!(min_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error2_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).func_name) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error2_t),
            "::",
            stringify!(func_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error2_t),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error2_t),
            "::",
            stringify!(desc)
        )
    );
}
extern "C" {
    pub static mut H5E_ERR_CLS_g: hid_t;
}
extern "C" {
    pub static mut H5E_FUNC_g: hid_t;
}
extern "C" {
    pub static mut H5E_FILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_VOL_g: hid_t;
}
extern "C" {
    pub static mut H5E_SOHM_g: hid_t;
}
extern "C" {
    pub static mut H5E_SYM_g: hid_t;
}
extern "C" {
    pub static mut H5E_PLUGIN_g: hid_t;
}
extern "C" {
    pub static mut H5E_VFL_g: hid_t;
}
extern "C" {
    pub static mut H5E_INTERNAL_g: hid_t;
}
extern "C" {
    pub static mut H5E_BTREE_g: hid_t;
}
extern "C" {
    pub static mut H5E_REFERENCE_g: hid_t;
}
extern "C" {
    pub static mut H5E_DATASPACE_g: hid_t;
}
extern "C" {
    pub static mut H5E_RESOURCE_g: hid_t;
}
extern "C" {
    pub static mut H5E_EVENTSET_g: hid_t;
}
extern "C" {
    pub static mut H5E_ID_g: hid_t;
}
extern "C" {
    pub static mut H5E_RS_g: hid_t;
}
extern "C" {
    pub static mut H5E_FARRAY_g: hid_t;
}
extern "C" {
    pub static mut H5E_HEAP_g: hid_t;
}
extern "C" {
    pub static mut H5E_MAP_g: hid_t;
}
extern "C" {
    pub static mut H5E_ATTR_g: hid_t;
}
extern "C" {
    pub static mut H5E_IO_g: hid_t;
}
extern "C" {
    pub static mut H5E_EFL_g: hid_t;
}
extern "C" {
    pub static mut H5E_TST_g: hid_t;
}
extern "C" {
    pub static mut H5E_LIB_g: hid_t;
}
extern "C" {
    pub static mut H5E_PAGEBUF_g: hid_t;
}
extern "C" {
    pub static mut H5E_FSPACE_g: hid_t;
}
extern "C" {
    pub static mut H5E_DATASET_g: hid_t;
}
extern "C" {
    pub static mut H5E_STORAGE_g: hid_t;
}
extern "C" {
    pub static mut H5E_LINK_g: hid_t;
}
extern "C" {
    pub static mut H5E_PLIST_g: hid_t;
}
extern "C" {
    pub static mut H5E_DATATYPE_g: hid_t;
}
extern "C" {
    pub static mut H5E_OHDR_g: hid_t;
}
extern "C" {
    pub static mut H5E_NONE_MAJOR_g: hid_t;
}
extern "C" {
    pub static mut H5E_SLIST_g: hid_t;
}
extern "C" {
    pub static mut H5E_ARGS_g: hid_t;
}
extern "C" {
    pub static mut H5E_CONTEXT_g: hid_t;
}
extern "C" {
    pub static mut H5E_EARRAY_g: hid_t;
}
extern "C" {
    pub static mut H5E_PLINE_g: hid_t;
}
extern "C" {
    pub static mut H5E_ERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_CACHE_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADID_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADGROUP_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTREGISTER_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTINC_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTDEC_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOIDS_g: hid_t;
}
extern "C" {
    pub static mut H5E_SEEKERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_READERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_WRITEERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_CLOSEERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_OVERFLOW_g: hid_t;
}
extern "C" {
    pub static mut H5E_FCNTL_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOSPACE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTALLOC_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCOPY_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTFREE_g: hid_t;
}
extern "C" {
    pub static mut H5E_ALREADYEXISTS_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTLOCK_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNLOCK_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTGC_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTGETSIZE_g: hid_t;
}
extern "C" {
    pub static mut H5E_OBJOPEN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRESTORE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCOMPUTE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTEXTEND_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTATTACH_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUPDATE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTOPERATE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTPUT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTINIT_g: hid_t;
}
extern "C" {
    pub static mut H5E_ALREADYINIT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRELEASE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTGET_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSET_g: hid_t;
}
extern "C" {
    pub static mut H5E_DUPCLASS_g: hid_t;
}
extern "C" {
    pub static mut H5E_SETDISALLOWED_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTWAIT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCANCEL_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMERGE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTREVIVE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSHRINK_g: hid_t;
}
extern "C" {
    pub static mut H5E_LINKCOUNT_g: hid_t;
}
extern "C" {
    pub static mut H5E_VERSION_g: hid_t;
}
extern "C" {
    pub static mut H5E_ALIGNMENT_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADMESG_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTDELETE_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADITER_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTPACK_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRESET_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRENAME_g: hid_t;
}
extern "C" {
    pub static mut H5E_SYSERRSTR_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOFILTER_g: hid_t;
}
extern "C" {
    pub static mut H5E_CALLBACK_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANAPPLY_g: hid_t;
}
extern "C" {
    pub static mut H5E_SETLOCAL_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOENCODER_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTFILTER_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTOPENOBJ_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCLOSEOBJ_g: hid_t;
}
extern "C" {
    pub static mut H5E_COMPLEN_g: hid_t;
}
extern "C" {
    pub static mut H5E_PATH_g: hid_t;
}
extern "C" {
    pub static mut H5E_NONE_MINOR_g: hid_t;
}
extern "C" {
    pub static mut H5E_OPENERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_FILEEXISTS_g: hid_t;
}
extern "C" {
    pub static mut H5E_FILEOPEN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCREATE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTOPENFILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCLOSEFILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOTHDF5_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADFILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_TRUNCATED_g: hid_t;
}
extern "C" {
    pub static mut H5E_MOUNT_g: hid_t;
}
extern "C" {
    pub static mut H5E_UNMOUNT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTDELETEFILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTLOCKFILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNLOCKFILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTFLUSH_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNSERIALIZE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSERIALIZE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTTAG_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTLOAD_g: hid_t;
}
extern "C" {
    pub static mut H5E_PROTECT_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOTCACHED_g: hid_t;
}
extern "C" {
    pub static mut H5E_SYSTEM_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTINS_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTPROTECT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNPROTECT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTPIN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNPIN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMARKDIRTY_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMARKCLEAN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMARKUNSERIALIZED_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMARKSERIALIZED_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTDIRTY_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCLEAN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTEXPUNGE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRESIZE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTDEPEND_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNDEPEND_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTNOTIFY_g: hid_t;
}
extern "C" {
    pub static mut H5E_LOGGING_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCORK_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNCORK_g: hid_t;
}
extern "C" {
    pub static mut H5E_TRAVERSE_g: hid_t;
}
extern "C" {
    pub static mut H5E_NLINKS_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOTREGISTERED_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMOVE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSORT_g: hid_t;
}
extern "C" {
    pub static mut H5E_MPI_g: hid_t;
}
extern "C" {
    pub static mut H5E_MPIERRSTR_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRECV_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTGATHER_g: hid_t;
}
extern "C" {
    pub static mut H5E_NO_INDEPENDENT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCLIP_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCOUNT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSELECT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTNEXT_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADSELECT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCOMPARE_g: hid_t;
}
extern "C" {
    pub static mut H5E_INCONSISTENTSTATE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTAPPEND_g: hid_t;
}
extern "C" {
    pub static mut H5E_UNINITIALIZED_g: hid_t;
}
extern "C" {
    pub static mut H5E_UNSUPPORTED_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADTYPE_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADRANGE_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADVALUE_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOTFOUND_g: hid_t;
}
extern "C" {
    pub static mut H5E_EXISTS_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTENCODE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTDECODE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSPLIT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTREDISTRIBUTE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSWAP_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTINSERT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTLIST_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMODIFY_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTREMOVE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTFIND_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCONVERT_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADSIZE_g: hid_t;
}
pub const H5E_direction_t_H5E_WALK_UPWARD: H5E_direction_t = 0;
pub const H5E_direction_t_H5E_WALK_DOWNWARD: H5E_direction_t = 1;
pub type H5E_direction_t = ::std::os::raw::c_uint;
pub type H5E_walk2_t = ::std::option::Option<
    unsafe extern "C" fn(
        n: ::std::os::raw::c_uint,
        err_desc: *const H5E_error2_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5E_auto2_t = ::std::option::Option<
    unsafe extern "C" fn(
        estack: hid_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Eregister_class(
        cls_name: *const ::std::os::raw::c_char,
        lib_name: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Eunregister_class(class_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Eclose_msg(err_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Ecreate_msg(
        cls: hid_t,
        msg_type: H5E_type_t,
        msg: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Ecreate_stack() -> hid_t;
}
extern "C" {
    pub fn H5Eget_current_stack() -> hid_t;
}
extern "C" {
    pub fn H5Eappend_stack(
        dst_stack_id: hid_t,
        src_stack_id: hid_t,
        close_source_stack: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eclose_stack(stack_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Eget_class_name(
        class_id: hid_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Eset_current_stack(err_stack_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Epush2(
        err_stack: hid_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_uint,
        cls_id: hid_t,
        maj_id: hid_t,
        min_id: hid_t,
        msg: *const ::std::os::raw::c_char,
        ...
    ) -> herr_t;
}
extern "C" {
    pub fn H5Epop(err_stack: hid_t, count: usize) -> herr_t;
}
extern "C" {
    pub fn H5Eprint2(err_stack: hid_t, stream: *mut FILE) -> herr_t;
}
extern "C" {
    pub fn H5Ewalk2(
        err_stack: hid_t,
        direction: H5E_direction_t,
        func: H5E_walk2_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eget_auto2(
        estack_id: hid_t,
        func: *mut H5E_auto2_t,
        client_data: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eset_auto2(
        estack_id: hid_t,
        func: H5E_auto2_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eclear2(err_stack: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Eauto_is_v2(
        err_stack: hid_t,
        is_stack: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eget_msg(
        msg_id: hid_t,
        type_: *mut H5E_type_t,
        msg: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Eget_num(error_stack_id: hid_t) -> isize;
}
pub type H5E_major_t = hid_t;
pub type H5E_minor_t = hid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5E_error1_t {
    pub maj_num: H5E_major_t,
    pub min_num: H5E_minor_t,
    pub func_name: *const ::std::os::raw::c_char,
    pub file_name: *const ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_uint,
    pub desc: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_H5E_error1_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5E_error1_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5E_error1_t>(),
        48usize,
        concat!("Size of: ", stringify!(H5E_error1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5E_error1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5E_error1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maj_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error1_t),
            "::",
            stringify!(maj_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error1_t),
            "::",
            stringify!(min_num)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).func_name) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error1_t),
            "::",
            stringify!(func_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error1_t),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error1_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5E_error1_t),
            "::",
            stringify!(desc)
        )
    );
}
pub type H5E_walk1_t = ::std::option::Option<
    unsafe extern "C" fn(
        n: ::std::os::raw::c_int,
        err_desc: *mut H5E_error1_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5E_auto1_t = ::std::option::Option<
    unsafe extern "C" fn(client_data: *mut ::std::os::raw::c_void) -> herr_t,
>;
extern "C" {
    pub fn H5Eclear1() -> herr_t;
}
extern "C" {
    pub fn H5Eget_auto1(
        func: *mut H5E_auto1_t,
        client_data: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Epush1(
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_uint,
        maj: H5E_major_t,
        min: H5E_minor_t,
        str_: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eprint1(stream: *mut FILE) -> herr_t;
}
extern "C" {
    pub fn H5Eset_auto1(
        func: H5E_auto1_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ewalk1(
        direction: H5E_direction_t,
        func: H5E_walk1_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eget_major(maj: H5E_major_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn H5Eget_minor(min: H5E_minor_t) -> *mut ::std::os::raw::c_char;
}
pub const H5ES_status_t_H5ES_STATUS_IN_PROGRESS: H5ES_status_t = 0;
pub const H5ES_status_t_H5ES_STATUS_SUCCEED: H5ES_status_t = 1;
pub const H5ES_status_t_H5ES_STATUS_CANCELED: H5ES_status_t = 2;
pub const H5ES_status_t_H5ES_STATUS_FAIL: H5ES_status_t = 3;
pub type H5ES_status_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5ES_op_info_t {
    pub api_name: *const ::std::os::raw::c_char,
    pub api_args: *mut ::std::os::raw::c_char,
    pub app_file_name: *const ::std::os::raw::c_char,
    pub app_func_name: *const ::std::os::raw::c_char,
    pub app_line_num: ::std::os::raw::c_uint,
    pub op_ins_count: u64,
    pub op_ins_ts: u64,
    pub op_exec_ts: u64,
    pub op_exec_time: u64,
}
#[test]
fn bindgen_test_layout_H5ES_op_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5ES_op_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5ES_op_info_t>(),
        72usize,
        concat!("Size of: ", stringify!(H5ES_op_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5ES_op_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5ES_op_info_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).api_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_op_info_t),
            "::",
            stringify!(api_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).api_args) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_op_info_t),
            "::",
            stringify!(api_args)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).app_file_name) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_op_info_t),
            "::",
            stringify!(app_file_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).app_func_name) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_op_info_t),
            "::",
            stringify!(app_func_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).app_line_num) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_op_info_t),
            "::",
            stringify!(app_line_num)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).op_ins_count) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_op_info_t),
            "::",
            stringify!(op_ins_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).op_ins_ts) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_op_info_t),
            "::",
            stringify!(op_ins_ts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).op_exec_ts) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_op_info_t),
            "::",
            stringify!(op_exec_ts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).op_exec_time) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_op_info_t),
            "::",
            stringify!(op_exec_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5ES_err_info_t {
    pub api_name: *mut ::std::os::raw::c_char,
    pub api_args: *mut ::std::os::raw::c_char,
    pub app_file_name: *mut ::std::os::raw::c_char,
    pub app_func_name: *mut ::std::os::raw::c_char,
    pub app_line_num: ::std::os::raw::c_uint,
    pub op_ins_count: u64,
    pub op_ins_ts: u64,
    pub op_exec_ts: u64,
    pub op_exec_time: u64,
    pub err_stack_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5ES_err_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5ES_err_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5ES_err_info_t>(),
        80usize,
        concat!("Size of: ", stringify!(H5ES_err_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5ES_err_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5ES_err_info_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).api_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_err_info_t),
            "::",
            stringify!(api_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).api_args) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_err_info_t),
            "::",
            stringify!(api_args)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).app_file_name) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_err_info_t),
            "::",
            stringify!(app_file_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).app_func_name) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_err_info_t),
            "::",
            stringify!(app_func_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).app_line_num) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_err_info_t),
            "::",
            stringify!(app_line_num)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).op_ins_count) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_err_info_t),
            "::",
            stringify!(op_ins_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).op_ins_ts) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_err_info_t),
            "::",
            stringify!(op_ins_ts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).op_exec_ts) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_err_info_t),
            "::",
            stringify!(op_exec_ts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).op_exec_time) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_err_info_t),
            "::",
            stringify!(op_exec_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).err_stack_id) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(H5ES_err_info_t),
            "::",
            stringify!(err_stack_id)
        )
    );
}
pub type H5ES_event_insert_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        op_info: *const H5ES_op_info_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type H5ES_event_complete_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        op_info: *const H5ES_op_info_t,
        status: H5ES_status_t,
        err_stack: hid_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn H5EScreate() -> hid_t;
}
extern "C" {
    pub fn H5ESwait(
        es_id: hid_t,
        timeout: u64,
        num_in_progress: *mut usize,
        err_occurred: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5EScancel(
        es_id: hid_t,
        num_not_canceled: *mut usize,
        err_occurred: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5ESget_count(es_id: hid_t, count: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5ESget_op_counter(es_id: hid_t, counter: *mut u64) -> herr_t;
}
extern "C" {
    pub fn H5ESget_err_status(
        es_id: hid_t,
        err_occurred: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5ESget_err_count(es_id: hid_t, num_errs: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5ESget_err_info(
        es_id: hid_t,
        num_err_info: usize,
        err_info: *mut H5ES_err_info_t,
        err_cleared: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5ESfree_err_info(
        num_err_info: usize,
        err_info: *mut H5ES_err_info_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5ESregister_insert_func(
        es_id: hid_t,
        func: H5ES_event_insert_func_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5ESregister_complete_func(
        es_id: hid_t,
        func: H5ES_event_complete_func_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5ESclose(es_id: hid_t) -> herr_t;
}
pub const H5F_scope_t_H5F_SCOPE_LOCAL: H5F_scope_t = 0;
pub const H5F_scope_t_H5F_SCOPE_GLOBAL: H5F_scope_t = 1;
pub type H5F_scope_t = ::std::os::raw::c_uint;
pub const H5F_close_degree_t_H5F_CLOSE_DEFAULT: H5F_close_degree_t = 0;
pub const H5F_close_degree_t_H5F_CLOSE_WEAK: H5F_close_degree_t = 1;
pub const H5F_close_degree_t_H5F_CLOSE_SEMI: H5F_close_degree_t = 2;
pub const H5F_close_degree_t_H5F_CLOSE_STRONG: H5F_close_degree_t = 3;
pub type H5F_close_degree_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info2_t {
    pub super_: H5F_info2_t__bindgen_ty_1,
    pub free: H5F_info2_t__bindgen_ty_2,
    pub sohm: H5F_info2_t__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info2_t__bindgen_ty_1 {
    pub version: ::std::os::raw::c_uint,
    pub super_size: hsize_t,
    pub super_ext_size: hsize_t,
}
#[test]
fn bindgen_test_layout_H5F_info2_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5F_info2_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5F_info2_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(H5F_info2_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5F_info2_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(H5F_info2_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t__bindgen_ty_1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).super_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t__bindgen_ty_1),
            "::",
            stringify!(super_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).super_ext_size) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t__bindgen_ty_1),
            "::",
            stringify!(super_ext_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info2_t__bindgen_ty_2 {
    pub version: ::std::os::raw::c_uint,
    pub meta_size: hsize_t,
    pub tot_space: hsize_t,
}
#[test]
fn bindgen_test_layout_H5F_info2_t__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<H5F_info2_t__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5F_info2_t__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(H5F_info2_t__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<H5F_info2_t__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(H5F_info2_t__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t__bindgen_ty_2),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).meta_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t__bindgen_ty_2),
            "::",
            stringify!(meta_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).tot_space) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t__bindgen_ty_2),
            "::",
            stringify!(tot_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info2_t__bindgen_ty_3 {
    pub version: ::std::os::raw::c_uint,
    pub hdr_size: hsize_t,
    pub msgs_info: H5_ih_info_t,
}
#[test]
fn bindgen_test_layout_H5F_info2_t__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<H5F_info2_t__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5F_info2_t__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(H5F_info2_t__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<H5F_info2_t__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(H5F_info2_t__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t__bindgen_ty_3),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hdr_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t__bindgen_ty_3),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgs_info) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t__bindgen_ty_3),
            "::",
            stringify!(msgs_info)
        )
    );
}
#[test]
fn bindgen_test_layout_H5F_info2_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5F_info2_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5F_info2_t>(),
        80usize,
        concat!("Size of: ", stringify!(H5F_info2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5F_info2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5F_info2_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).super_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t),
            "::",
            stringify!(super_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sohm) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info2_t),
            "::",
            stringify!(sohm)
        )
    );
}
pub const H5F_mem_t_H5FD_MEM_NOLIST: H5F_mem_t = -1;
pub const H5F_mem_t_H5FD_MEM_DEFAULT: H5F_mem_t = 0;
pub const H5F_mem_t_H5FD_MEM_SUPER: H5F_mem_t = 1;
pub const H5F_mem_t_H5FD_MEM_BTREE: H5F_mem_t = 2;
pub const H5F_mem_t_H5FD_MEM_DRAW: H5F_mem_t = 3;
pub const H5F_mem_t_H5FD_MEM_GHEAP: H5F_mem_t = 4;
pub const H5F_mem_t_H5FD_MEM_LHEAP: H5F_mem_t = 5;
pub const H5F_mem_t_H5FD_MEM_OHDR: H5F_mem_t = 6;
pub const H5F_mem_t_H5FD_MEM_NTYPES: H5F_mem_t = 7;
pub type H5F_mem_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_sect_info_t {
    pub addr: haddr_t,
    pub size: hsize_t,
}
#[test]
fn bindgen_test_layout_H5F_sect_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5F_sect_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5F_sect_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5F_sect_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5F_sect_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5F_sect_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_sect_info_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_sect_info_t),
            "::",
            stringify!(size)
        )
    );
}
pub const H5F_libver_t_H5F_LIBVER_ERROR: H5F_libver_t = -1;
pub const H5F_libver_t_H5F_LIBVER_EARLIEST: H5F_libver_t = 0;
pub const H5F_libver_t_H5F_LIBVER_V18: H5F_libver_t = 1;
pub const H5F_libver_t_H5F_LIBVER_V110: H5F_libver_t = 2;
pub const H5F_libver_t_H5F_LIBVER_V112: H5F_libver_t = 3;
pub const H5F_libver_t_H5F_LIBVER_V114: H5F_libver_t = 4;
pub const H5F_libver_t_H5F_LIBVER_NBOUNDS: H5F_libver_t = 5;
pub type H5F_libver_t = ::std::os::raw::c_int;
pub const H5F_fspace_strategy_t_H5F_FSPACE_STRATEGY_FSM_AGGR:
    H5F_fspace_strategy_t = 0;
pub const H5F_fspace_strategy_t_H5F_FSPACE_STRATEGY_PAGE:
    H5F_fspace_strategy_t = 1;
pub const H5F_fspace_strategy_t_H5F_FSPACE_STRATEGY_AGGR:
    H5F_fspace_strategy_t = 2;
pub const H5F_fspace_strategy_t_H5F_FSPACE_STRATEGY_NONE:
    H5F_fspace_strategy_t = 3;
pub const H5F_fspace_strategy_t_H5F_FSPACE_STRATEGY_NTYPES:
    H5F_fspace_strategy_t = 4;
pub type H5F_fspace_strategy_t = ::std::os::raw::c_uint;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_DEFAULT: H5F_file_space_type_t =
    0;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_ALL_PERSIST:
    H5F_file_space_type_t = 1;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_ALL: H5F_file_space_type_t = 2;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_AGGR_VFD: H5F_file_space_type_t =
    3;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_VFD: H5F_file_space_type_t = 4;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_NTYPES: H5F_file_space_type_t =
    5;
pub type H5F_file_space_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_retry_info_t {
    pub nbins: ::std::os::raw::c_uint,
    pub retries: [*mut u32; 21usize],
}
#[test]
fn bindgen_test_layout_H5F_retry_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5F_retry_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5F_retry_info_t>(),
        176usize,
        concat!("Size of: ", stringify!(H5F_retry_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5F_retry_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5F_retry_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbins) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_retry_info_t),
            "::",
            stringify!(nbins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_retry_info_t),
            "::",
            stringify!(retries)
        )
    );
}
pub type H5F_flush_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        object_id: hid_t,
        udata: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Fis_accessible(
        container_name: *const ::std::os::raw::c_char,
        fapl_id: hid_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Fcreate(
        filename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        fcpl_id: hid_t,
        fapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Fcreate_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        filename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        fcpl_id: hid_t,
        fapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Fopen(
        filename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        fapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Fopen_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        filename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        access_plist: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Freopen(file_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Freopen_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        file_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Fflush(object_id: hid_t, scope: H5F_scope_t) -> herr_t;
}
extern "C" {
    pub fn H5Fflush_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        object_id: hid_t,
        scope: H5F_scope_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fclose(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fclose_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        file_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fdelete(
        filename: *const ::std::os::raw::c_char,
        fapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fget_create_plist(file_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Fget_access_plist(file_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Fget_intent(
        file_id: hid_t,
        intent: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fget_fileno(
        file_id: hid_t,
        fileno: *mut ::std::os::raw::c_ulong,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fget_obj_count(
        file_id: hid_t,
        types: ::std::os::raw::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn H5Fget_obj_ids(
        file_id: hid_t,
        types: ::std::os::raw::c_uint,
        max_objs: usize,
        obj_id_list: *mut hid_t,
    ) -> isize;
}
extern "C" {
    pub fn H5Fget_vfd_handle(
        file_id: hid_t,
        fapl: hid_t,
        file_handle: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fmount(
        loc: hid_t,
        name: *const ::std::os::raw::c_char,
        child: hid_t,
        plist: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Funmount(
        loc: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fget_freespace(file_id: hid_t) -> hssize_t;
}
extern "C" {
    pub fn H5Fget_filesize(file_id: hid_t, size: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_eoa(file_id: hid_t, eoa: *mut haddr_t) -> herr_t;
}
extern "C" {
    pub fn H5Fincrement_filesize(file_id: hid_t, increment: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_file_image(
        file_id: hid_t,
        buf_ptr: *mut ::std::os::raw::c_void,
        buf_len: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Fget_mdc_config(
        file_id: hid_t,
        config_ptr: *mut H5AC_cache_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fset_mdc_config(
        file_id: hid_t,
        config_ptr: *const H5AC_cache_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fget_mdc_hit_rate(
        file_id: hid_t,
        hit_rate_ptr: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fget_mdc_size(
        file_id: hid_t,
        max_size_ptr: *mut usize,
        min_clean_size_ptr: *mut usize,
        cur_size_ptr: *mut usize,
        cur_num_entries_ptr: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Freset_mdc_hit_rate_stats(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_name(
        obj_id: hid_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Fget_info2(obj_id: hid_t, file_info: *mut H5F_info2_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_metadata_read_retry_info(
        file_id: hid_t,
        info: *mut H5F_retry_info_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fstart_swmr_write(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_free_sections(
        file_id: hid_t,
        type_: H5F_mem_t,
        nsects: usize,
        sect_info: *mut H5F_sect_info_t,
    ) -> isize;
}
extern "C" {
    pub fn H5Fclear_elink_file_cache(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fset_libver_bounds(
        file_id: hid_t,
        low: H5F_libver_t,
        high: H5F_libver_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fstart_mdc_logging(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fstop_mdc_logging(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_mdc_logging_status(
        file_id: hid_t,
        is_enabled: *mut hbool_t,
        is_currently_logging: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Freset_page_buffering_stats(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_page_buffering_stats(
        file_id: hid_t,
        accesses: *mut ::std::os::raw::c_uint,
        hits: *mut ::std::os::raw::c_uint,
        misses: *mut ::std::os::raw::c_uint,
        evictions: *mut ::std::os::raw::c_uint,
        bypasses: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fget_mdc_image_info(
        file_id: hid_t,
        image_addr: *mut haddr_t,
        image_size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fget_dset_no_attrs_hint(
        file_id: hid_t,
        minimize: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fset_dset_no_attrs_hint(
        file_id: hid_t,
        minimize: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fset_mpi_atomicity(file_id: hid_t, flag: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_mpi_atomicity(file_id: hid_t, flag: *mut hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Fformat_convert(fid: hid_t) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info1_t {
    pub super_ext_size: hsize_t,
    pub sohm: H5F_info1_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info1_t__bindgen_ty_1 {
    pub hdr_size: hsize_t,
    pub msgs_info: H5_ih_info_t,
}
#[test]
fn bindgen_test_layout_H5F_info1_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5F_info1_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5F_info1_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(H5F_info1_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5F_info1_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(H5F_info1_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hdr_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info1_t__bindgen_ty_1),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgs_info) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info1_t__bindgen_ty_1),
            "::",
            stringify!(msgs_info)
        )
    );
}
#[test]
fn bindgen_test_layout_H5F_info1_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5F_info1_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5F_info1_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5F_info1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5F_info1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5F_info1_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).super_ext_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info1_t),
            "::",
            stringify!(super_ext_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sohm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5F_info1_t),
            "::",
            stringify!(sohm)
        )
    );
}
extern "C" {
    pub fn H5Fget_info1(obj_id: hid_t, file_info: *mut H5F_info1_t) -> herr_t;
}
extern "C" {
    pub fn H5Fset_latest_format(
        file_id: hid_t,
        latest_format: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fis_hdf5(file_name: *const ::std::os::raw::c_char) -> htri_t;
}
pub type H5FD_class_value_t = ::std::os::raw::c_int;
pub use self::H5F_mem_t as H5FD_mem_t;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_NO_OP: H5FD_file_image_op_t =
    0;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET:
    H5FD_file_image_op_t = 1;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY:
    H5FD_file_image_op_t = 2;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET:
    H5FD_file_image_op_t = 3;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE:
    H5FD_file_image_op_t = 4;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_FILE_OPEN:
    H5FD_file_image_op_t = 5;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_FILE_RESIZE:
    H5FD_file_image_op_t = 6;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_FILE_CLOSE:
    H5FD_file_image_op_t = 7;
pub type H5FD_file_image_op_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_file_image_callbacks_t {
    pub image_malloc: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            file_image_op: H5FD_file_image_op_t,
            udata: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub image_memcpy: ::std::option::Option<
        unsafe extern "C" fn(
            dest: *mut ::std::os::raw::c_void,
            src: *const ::std::os::raw::c_void,
            size: usize,
            file_image_op: H5FD_file_image_op_t,
            udata: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub image_realloc: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            file_image_op: H5FD_file_image_op_t,
            udata: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub image_free: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            file_image_op: H5FD_file_image_op_t,
            udata: *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub udata_copy: ::std::option::Option<
        unsafe extern "C" fn(
            udata: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub udata_free: ::std::option::Option<
        unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void) -> herr_t,
    >,
    pub udata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5FD_file_image_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5FD_file_image_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5FD_file_image_callbacks_t>(),
        56usize,
        concat!("Size of: ", stringify!(H5FD_file_image_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5FD_file_image_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5FD_file_image_callbacks_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).image_malloc) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_file_image_callbacks_t),
            "::",
            stringify!(image_malloc)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).image_memcpy) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_file_image_callbacks_t),
            "::",
            stringify!(image_memcpy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).image_realloc) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_file_image_callbacks_t),
            "::",
            stringify!(image_realloc)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).image_free) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_file_image_callbacks_t),
            "::",
            stringify!(image_free)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).udata_copy) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_file_image_callbacks_t),
            "::",
            stringify!(udata_copy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).udata_free) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_file_image_callbacks_t),
            "::",
            stringify!(udata_free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).udata) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_file_image_callbacks_t),
            "::",
            stringify!(udata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_ctl_memcpy_args_t {
    pub dstbuf: *mut ::std::os::raw::c_void,
    pub dst_off: hsize_t,
    pub srcbuf: *const ::std::os::raw::c_void,
    pub src_off: hsize_t,
    pub len: usize,
}
#[test]
fn bindgen_test_layout_H5FD_ctl_memcpy_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5FD_ctl_memcpy_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5FD_ctl_memcpy_args_t>(),
        40usize,
        concat!("Size of: ", stringify!(H5FD_ctl_memcpy_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5FD_ctl_memcpy_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5FD_ctl_memcpy_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_ctl_memcpy_args_t),
            "::",
            stringify!(dstbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_ctl_memcpy_args_t),
            "::",
            stringify!(dst_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcbuf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_ctl_memcpy_args_t),
            "::",
            stringify!(srcbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_off) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_ctl_memcpy_args_t),
            "::",
            stringify!(src_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_ctl_memcpy_args_t),
            "::",
            stringify!(len)
        )
    );
}
extern "C" {
    pub fn H5FDdriver_query(
        driver_id: hid_t,
        flags: *mut ::std::os::raw::c_ulong,
    ) -> herr_t;
}
pub const H5L_type_t_H5L_TYPE_ERROR: H5L_type_t = -1;
pub const H5L_type_t_H5L_TYPE_HARD: H5L_type_t = 0;
pub const H5L_type_t_H5L_TYPE_SOFT: H5L_type_t = 1;
pub const H5L_type_t_H5L_TYPE_EXTERNAL: H5L_type_t = 64;
pub const H5L_type_t_H5L_TYPE_MAX: H5L_type_t = 255;
pub type H5L_type_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5L_info2_t {
    pub type_: H5L_type_t,
    pub corder_valid: hbool_t,
    pub corder: i64,
    pub cset: H5T_cset_t,
    pub u: H5L_info2_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5L_info2_t__bindgen_ty_1 {
    pub token: H5O_token_t,
    pub val_size: usize,
}
#[test]
fn bindgen_test_layout_H5L_info2_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5L_info2_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5L_info2_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(H5L_info2_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5L_info2_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(H5L_info2_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info2_t__bindgen_ty_1),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).val_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info2_t__bindgen_ty_1),
            "::",
            stringify!(val_size)
        )
    );
}
#[test]
fn bindgen_test_layout_H5L_info2_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5L_info2_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5L_info2_t>(),
        40usize,
        concat!("Size of: ", stringify!(H5L_info2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5L_info2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5L_info2_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info2_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).corder_valid) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info2_t),
            "::",
            stringify!(corder_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corder) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info2_t),
            "::",
            stringify!(corder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info2_t),
            "::",
            stringify!(cset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info2_t),
            "::",
            stringify!(u)
        )
    );
}
pub type H5L_iterate2_t = ::std::option::Option<
    unsafe extern "C" fn(
        group: hid_t,
        name: *const ::std::os::raw::c_char,
        info: *const H5L_info2_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5L_elink_traverse_t = ::std::option::Option<
    unsafe extern "C" fn(
        parent_file_name: *const ::std::os::raw::c_char,
        parent_group_name: *const ::std::os::raw::c_char,
        child_file_name: *const ::std::os::raw::c_char,
        child_object_name: *const ::std::os::raw::c_char,
        acc_flags: *mut ::std::os::raw::c_uint,
        fapl_id: hid_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Lmove(
        src_loc: hid_t,
        src_name: *const ::std::os::raw::c_char,
        dst_loc: hid_t,
        dst_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcopy(
        src_loc: hid_t,
        src_name: *const ::std::os::raw::c_char,
        dst_loc: hid_t,
        dst_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcreate_hard(
        cur_loc: hid_t,
        cur_name: *const ::std::os::raw::c_char,
        dst_loc: hid_t,
        dst_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcreate_hard_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        cur_loc_id: hid_t,
        cur_name: *const ::std::os::raw::c_char,
        new_loc_id: hid_t,
        new_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcreate_soft(
        link_target: *const ::std::os::raw::c_char,
        link_loc_id: hid_t,
        link_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcreate_soft_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        link_target: *const ::std::os::raw::c_char,
        link_loc_id: hid_t,
        link_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ldelete(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ldelete_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ldelete_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ldelete_by_idx_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lget_val(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_void,
        size: usize,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lget_val_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        buf: *mut ::std::os::raw::c_void,
        size: usize,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lexists(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Lexists_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        exists: *mut hbool_t,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lget_info2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        linfo: *mut H5L_info2_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lget_info_by_idx2(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        linfo: *mut H5L_info2_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lget_name_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
        lapl_id: hid_t,
    ) -> isize;
}
extern "C" {
    pub fn H5Literate2(
        grp_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        idx: *mut hsize_t,
        op: H5L_iterate2_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Literate_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        group_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        idx_p: *mut hsize_t,
        op: H5L_iterate2_t,
        op_data: *mut ::std::os::raw::c_void,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Literate_by_name2(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        idx: *mut hsize_t,
        op: H5L_iterate2_t,
        op_data: *mut ::std::os::raw::c_void,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lvisit2(
        grp_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5L_iterate2_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lvisit_by_name2(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5L_iterate2_t,
        op_data: *mut ::std::os::raw::c_void,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcreate_ud(
        link_loc_id: hid_t,
        link_name: *const ::std::os::raw::c_char,
        link_type: H5L_type_t,
        udata: *const ::std::os::raw::c_void,
        udata_size: usize,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lis_registered(id: H5L_type_t) -> htri_t;
}
extern "C" {
    pub fn H5Lunpack_elink_val(
        ext_linkval: *const ::std::os::raw::c_void,
        link_size: usize,
        flags: *mut ::std::os::raw::c_uint,
        filename: *mut *const ::std::os::raw::c_char,
        obj_path: *mut *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcreate_external(
        file_name: *const ::std::os::raw::c_char,
        obj_name: *const ::std::os::raw::c_char,
        link_loc_id: hid_t,
        link_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5L_info1_t {
    pub type_: H5L_type_t,
    pub corder_valid: hbool_t,
    pub corder: i64,
    pub cset: H5T_cset_t,
    pub u: H5L_info1_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5L_info1_t__bindgen_ty_1 {
    pub address: haddr_t,
    pub val_size: usize,
}
#[test]
fn bindgen_test_layout_H5L_info1_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5L_info1_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5L_info1_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(H5L_info1_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5L_info1_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(H5L_info1_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info1_t__bindgen_ty_1),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).val_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info1_t__bindgen_ty_1),
            "::",
            stringify!(val_size)
        )
    );
}
#[test]
fn bindgen_test_layout_H5L_info1_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5L_info1_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5L_info1_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5L_info1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5L_info1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5L_info1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info1_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).corder_valid) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info1_t),
            "::",
            stringify!(corder_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corder) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info1_t),
            "::",
            stringify!(corder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info1_t),
            "::",
            stringify!(cset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_info1_t),
            "::",
            stringify!(u)
        )
    );
}
pub type H5L_iterate1_t = ::std::option::Option<
    unsafe extern "C" fn(
        group: hid_t,
        name: *const ::std::os::raw::c_char,
        info: *const H5L_info1_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Lget_info1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        linfo: *mut H5L_info1_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lget_info_by_idx1(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        linfo: *mut H5L_info1_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Literate1(
        grp_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        idx: *mut hsize_t,
        op: H5L_iterate1_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Literate_by_name1(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        idx: *mut hsize_t,
        op: H5L_iterate1_t,
        op_data: *mut ::std::os::raw::c_void,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lvisit1(
        grp_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5L_iterate1_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lvisit_by_name1(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5L_iterate1_t,
        op_data: *mut ::std::os::raw::c_void,
        lapl_id: hid_t,
    ) -> herr_t;
}
pub const H5G_storage_type_t_H5G_STORAGE_TYPE_UNKNOWN: H5G_storage_type_t = -1;
pub const H5G_storage_type_t_H5G_STORAGE_TYPE_SYMBOL_TABLE: H5G_storage_type_t =
    0;
pub const H5G_storage_type_t_H5G_STORAGE_TYPE_COMPACT: H5G_storage_type_t = 1;
pub const H5G_storage_type_t_H5G_STORAGE_TYPE_DENSE: H5G_storage_type_t = 2;
pub type H5G_storage_type_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5G_info_t {
    pub storage_type: H5G_storage_type_t,
    pub nlinks: hsize_t,
    pub max_corder: i64,
    pub mounted: hbool_t,
}
#[test]
fn bindgen_test_layout_H5G_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5G_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5G_info_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5G_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5G_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5G_info_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).storage_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5G_info_t),
            "::",
            stringify!(storage_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nlinks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5G_info_t),
            "::",
            stringify!(nlinks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_corder) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5G_info_t),
            "::",
            stringify!(max_corder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mounted) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5G_info_t),
            "::",
            stringify!(mounted)
        )
    );
}
extern "C" {
    pub fn H5Gcreate2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        gcpl_id: hid_t,
        gapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Gcreate_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        gcpl_id: hid_t,
        gapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Gcreate_anon(
        loc_id: hid_t,
        gcpl_id: hid_t,
        gapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Gopen2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        gapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Gopen_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        gapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Gget_create_plist(group_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Gget_info(loc_id: hid_t, ginfo: *mut H5G_info_t) -> herr_t;
}
extern "C" {
    pub fn H5Gget_info_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        ginfo: *mut H5G_info_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_info_by_name(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        ginfo: *mut H5G_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_info_by_name_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        ginfo: *mut H5G_info_t,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_info_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        ginfo: *mut H5G_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_info_by_idx_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        ginfo: *mut H5G_info_t,
        lapl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gflush(group_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Grefresh(group_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Gclose(group_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Gclose_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        group_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
pub const H5G_obj_t_H5G_UNKNOWN: H5G_obj_t = -1;
pub const H5G_obj_t_H5G_GROUP: H5G_obj_t = 0;
pub const H5G_obj_t_H5G_DATASET: H5G_obj_t = 1;
pub const H5G_obj_t_H5G_TYPE: H5G_obj_t = 2;
pub const H5G_obj_t_H5G_LINK: H5G_obj_t = 3;
pub const H5G_obj_t_H5G_UDLINK: H5G_obj_t = 4;
pub const H5G_obj_t_H5G_RESERVED_5: H5G_obj_t = 5;
pub const H5G_obj_t_H5G_RESERVED_6: H5G_obj_t = 6;
pub const H5G_obj_t_H5G_RESERVED_7: H5G_obj_t = 7;
pub type H5G_obj_t = ::std::os::raw::c_int;
pub type H5G_iterate_t = ::std::option::Option<
    unsafe extern "C" fn(
        group: hid_t,
        name: *const ::std::os::raw::c_char,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5G_stat_t {
    pub fileno: [::std::os::raw::c_ulong; 2usize],
    pub objno: [::std::os::raw::c_ulong; 2usize],
    pub nlink: ::std::os::raw::c_uint,
    pub type_: H5G_obj_t,
    pub mtime: time_t,
    pub linklen: usize,
    pub ohdr: H5O_stat_t,
}
#[test]
fn bindgen_test_layout_H5G_stat_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5G_stat_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5G_stat_t>(),
        80usize,
        concat!("Size of: ", stringify!(H5G_stat_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5G_stat_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5G_stat_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5G_stat_t),
            "::",
            stringify!(fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objno) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5G_stat_t),
            "::",
            stringify!(objno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nlink) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5G_stat_t),
            "::",
            stringify!(nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(H5G_stat_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5G_stat_t),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linklen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5G_stat_t),
            "::",
            stringify!(linklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ohdr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5G_stat_t),
            "::",
            stringify!(ohdr)
        )
    );
}
extern "C" {
    pub fn H5Gcreate1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size_hint: usize,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Gopen1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Glink(
        cur_loc_id: hid_t,
        type_: H5L_type_t,
        cur_name: *const ::std::os::raw::c_char,
        new_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Glink2(
        cur_loc_id: hid_t,
        cur_name: *const ::std::os::raw::c_char,
        type_: H5L_type_t,
        new_loc_id: hid_t,
        new_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gmove(
        src_loc_id: hid_t,
        src_name: *const ::std::os::raw::c_char,
        dst_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gmove2(
        src_loc_id: hid_t,
        src_name: *const ::std::os::raw::c_char,
        dst_loc_id: hid_t,
        dst_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gunlink(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_linkval(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        buf: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gset_comment(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        comment: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_comment(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        bufsize: usize,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Giterate(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        idx: *mut ::std::os::raw::c_int,
        op: H5G_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_num_objs(loc_id: hid_t, num_objs: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Gget_objinfo(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        follow_link: hbool_t,
        statbuf: *mut H5G_stat_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_objname_by_idx(
        loc_id: hid_t,
        idx: hsize_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Gget_objtype_by_idx(loc_id: hid_t, idx: hsize_t) -> H5G_obj_t;
}
pub type H5VL_class_value_t = ::std::os::raw::c_int;
pub const H5VL_subclass_t_H5VL_SUBCLS_NONE: H5VL_subclass_t = 0;
pub const H5VL_subclass_t_H5VL_SUBCLS_INFO: H5VL_subclass_t = 1;
pub const H5VL_subclass_t_H5VL_SUBCLS_WRAP: H5VL_subclass_t = 2;
pub const H5VL_subclass_t_H5VL_SUBCLS_ATTR: H5VL_subclass_t = 3;
pub const H5VL_subclass_t_H5VL_SUBCLS_DATASET: H5VL_subclass_t = 4;
pub const H5VL_subclass_t_H5VL_SUBCLS_DATATYPE: H5VL_subclass_t = 5;
pub const H5VL_subclass_t_H5VL_SUBCLS_FILE: H5VL_subclass_t = 6;
pub const H5VL_subclass_t_H5VL_SUBCLS_GROUP: H5VL_subclass_t = 7;
pub const H5VL_subclass_t_H5VL_SUBCLS_LINK: H5VL_subclass_t = 8;
pub const H5VL_subclass_t_H5VL_SUBCLS_OBJECT: H5VL_subclass_t = 9;
pub const H5VL_subclass_t_H5VL_SUBCLS_REQUEST: H5VL_subclass_t = 10;
pub const H5VL_subclass_t_H5VL_SUBCLS_BLOB: H5VL_subclass_t = 11;
pub const H5VL_subclass_t_H5VL_SUBCLS_TOKEN: H5VL_subclass_t = 12;
pub type H5VL_subclass_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn H5VLregister_connector_by_name(
        connector_name: *const ::std::os::raw::c_char,
        vipl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5VLregister_connector_by_value(
        connector_value: H5VL_class_value_t,
        vipl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5VLis_connector_registered_by_name(
        name: *const ::std::os::raw::c_char,
    ) -> htri_t;
}
extern "C" {
    pub fn H5VLis_connector_registered_by_value(
        connector_value: H5VL_class_value_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5VLget_connector_id(obj_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5VLget_connector_id_by_name(
        name: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
extern "C" {
    pub fn H5VLget_connector_id_by_value(
        connector_value: H5VL_class_value_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5VLget_connector_name(
        id: hid_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5VLclose(connector_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5VLunregister_connector(connector_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5VLquery_optional(
        obj_id: hid_t,
        subcls: H5VL_subclass_t,
        opt_type: ::std::os::raw::c_int,
        flags: *mut u64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLobject_is_native(
        obj_id: hid_t,
        is_native: *mut hbool_t,
    ) -> herr_t;
}
pub const H5R_type_t_H5R_BADTYPE: H5R_type_t = -1;
pub const H5R_type_t_H5R_OBJECT1: H5R_type_t = 0;
pub const H5R_type_t_H5R_DATASET_REGION1: H5R_type_t = 1;
pub const H5R_type_t_H5R_OBJECT2: H5R_type_t = 2;
pub const H5R_type_t_H5R_DATASET_REGION2: H5R_type_t = 3;
pub const H5R_type_t_H5R_ATTR: H5R_type_t = 4;
pub const H5R_type_t_H5R_MAXTYPE: H5R_type_t = 5;
pub type H5R_type_t = ::std::os::raw::c_int;
pub type hobj_ref_t = haddr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdset_reg_ref_t {
    pub __data: [u8; 12usize],
}
#[test]
fn bindgen_test_layout_hdset_reg_ref_t() {
    const UNINIT: ::std::mem::MaybeUninit<hdset_reg_ref_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hdset_reg_ref_t>(),
        12usize,
        concat!("Size of: ", stringify!(hdset_reg_ref_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hdset_reg_ref_t>(),
        1usize,
        concat!("Alignment of ", stringify!(hdset_reg_ref_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hdset_reg_ref_t),
            "::",
            stringify!(__data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5R_ref_t {
    pub u: H5R_ref_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5R_ref_t__bindgen_ty_1 {
    pub __data: [u8; 64usize],
    pub align: i64,
}
#[test]
fn bindgen_test_layout_H5R_ref_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5R_ref_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5R_ref_t__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(H5R_ref_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5R_ref_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(H5R_ref_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5R_ref_t__bindgen_ty_1),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5R_ref_t__bindgen_ty_1),
            "::",
            stringify!(align)
        )
    );
}
#[test]
fn bindgen_test_layout_H5R_ref_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5R_ref_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5R_ref_t>(),
        64usize,
        concat!("Size of: ", stringify!(H5R_ref_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5R_ref_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5R_ref_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5R_ref_t),
            "::",
            stringify!(u)
        )
    );
}
extern "C" {
    pub fn H5Rcreate_object(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        oapl_id: hid_t,
        ref_ptr: *mut H5R_ref_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Rcreate_region(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        space_id: hid_t,
        oapl_id: hid_t,
        ref_ptr: *mut H5R_ref_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Rcreate_attr(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        oapl_id: hid_t,
        ref_ptr: *mut H5R_ref_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Rdestroy(ref_ptr: *mut H5R_ref_t) -> herr_t;
}
extern "C" {
    pub fn H5Rget_type(ref_ptr: *const H5R_ref_t) -> H5R_type_t;
}
extern "C" {
    pub fn H5Requal(
        ref1_ptr: *const H5R_ref_t,
        ref2_ptr: *const H5R_ref_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Rcopy(
        src_ref_ptr: *const H5R_ref_t,
        dst_ref_ptr: *mut H5R_ref_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ropen_object(
        ref_ptr: *mut H5R_ref_t,
        rapl_id: hid_t,
        oapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Ropen_object_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        ref_ptr: *mut H5R_ref_t,
        rapl_id: hid_t,
        oapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Ropen_region(
        ref_ptr: *mut H5R_ref_t,
        rapl_id: hid_t,
        oapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Ropen_region_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        ref_ptr: *mut H5R_ref_t,
        rapl_id: hid_t,
        oapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Ropen_attr(
        ref_ptr: *mut H5R_ref_t,
        rapl_id: hid_t,
        aapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Ropen_attr_async(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        ref_ptr: *mut H5R_ref_t,
        rapl_id: hid_t,
        aapl_id: hid_t,
        es_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Rget_obj_type3(
        ref_ptr: *mut H5R_ref_t,
        rapl_id: hid_t,
        obj_type: *mut H5O_type_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Rget_file_name(
        ref_ptr: *const H5R_ref_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Rget_obj_name(
        ref_ptr: *mut H5R_ref_t,
        rapl_id: hid_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Rget_attr_name(
        ref_ptr: *const H5R_ref_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Rget_obj_type1(
        id: hid_t,
        ref_type: H5R_type_t,
        ref_: *const ::std::os::raw::c_void,
    ) -> H5G_obj_t;
}
extern "C" {
    pub fn H5Rdereference1(
        obj_id: hid_t,
        ref_type: H5R_type_t,
        ref_: *const ::std::os::raw::c_void,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Rcreate(
        ref_: *mut ::std::os::raw::c_void,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        ref_type: H5R_type_t,
        space_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Rget_obj_type2(
        id: hid_t,
        ref_type: H5R_type_t,
        ref_: *const ::std::os::raw::c_void,
        obj_type: *mut H5O_type_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Rdereference2(
        obj_id: hid_t,
        oapl_id: hid_t,
        ref_type: H5R_type_t,
        ref_: *const ::std::os::raw::c_void,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Rget_region(
        dataset: hid_t,
        ref_type: H5R_type_t,
        ref_: *const ::std::os::raw::c_void,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Rget_name(
        loc_id: hid_t,
        ref_type: H5R_type_t,
        ref_: *const ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
pub const H5VL_loc_type_t_H5VL_OBJECT_BY_SELF: H5VL_loc_type_t = 0;
pub const H5VL_loc_type_t_H5VL_OBJECT_BY_NAME: H5VL_loc_type_t = 1;
pub const H5VL_loc_type_t_H5VL_OBJECT_BY_IDX: H5VL_loc_type_t = 2;
pub const H5VL_loc_type_t_H5VL_OBJECT_BY_TOKEN: H5VL_loc_type_t = 3;
pub type H5VL_loc_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_loc_by_name {
    pub name: *const ::std::os::raw::c_char,
    pub lapl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_loc_by_name() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_loc_by_name> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_loc_by_name>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_loc_by_name))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_loc_by_name>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_loc_by_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_by_name),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lapl_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_by_name),
            "::",
            stringify!(lapl_id)
        )
    );
}
pub type H5VL_loc_by_name_t = H5VL_loc_by_name;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_loc_by_idx {
    pub name: *const ::std::os::raw::c_char,
    pub idx_type: H5_index_t,
    pub order: H5_iter_order_t,
    pub n: hsize_t,
    pub lapl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_loc_by_idx() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_loc_by_idx> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_loc_by_idx>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_loc_by_idx))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_loc_by_idx>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_loc_by_idx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_by_idx),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).idx_type) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_by_idx),
            "::",
            stringify!(idx_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_by_idx),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_by_idx),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lapl_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_by_idx),
            "::",
            stringify!(lapl_id)
        )
    );
}
pub type H5VL_loc_by_idx_t = H5VL_loc_by_idx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_loc_by_token {
    pub token: *mut H5O_token_t,
}
#[test]
fn bindgen_test_layout_H5VL_loc_by_token() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_loc_by_token> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_loc_by_token>(),
        8usize,
        concat!("Size of: ", stringify!(H5VL_loc_by_token))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_loc_by_token>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_loc_by_token))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_by_token),
            "::",
            stringify!(token)
        )
    );
}
pub type H5VL_loc_by_token_t = H5VL_loc_by_token;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_loc_params_t {
    pub obj_type: H5I_type_t,
    pub type_: H5VL_loc_type_t,
    pub loc_data: H5VL_loc_params_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_loc_params_t__bindgen_ty_1 {
    pub loc_by_token: H5VL_loc_by_token_t,
    pub loc_by_name: H5VL_loc_by_name_t,
    pub loc_by_idx: H5VL_loc_by_idx_t,
}
#[test]
fn bindgen_test_layout_H5VL_loc_params_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_loc_params_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_loc_params_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_loc_params_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_loc_params_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_loc_params_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_by_token) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_params_t__bindgen_ty_1),
            "::",
            stringify!(loc_by_token)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_by_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_params_t__bindgen_ty_1),
            "::",
            stringify!(loc_by_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_by_idx) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_params_t__bindgen_ty_1),
            "::",
            stringify!(loc_by_idx)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_loc_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_loc_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_loc_params_t>(),
        40usize,
        concat!("Size of: ", stringify!(H5VL_loc_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_loc_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_loc_params_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).obj_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_params_t),
            "::",
            stringify!(obj_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_params_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_data) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_loc_params_t),
            "::",
            stringify!(loc_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_optional_args_t {
    pub op_type: ::std::os::raw::c_int,
    pub args: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_optional_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_optional_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_optional_args_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_optional_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_optional_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_optional_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_optional_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_optional_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub const H5VL_attr_get_t_H5VL_ATTR_GET_ACPL: H5VL_attr_get_t = 0;
pub const H5VL_attr_get_t_H5VL_ATTR_GET_INFO: H5VL_attr_get_t = 1;
pub const H5VL_attr_get_t_H5VL_ATTR_GET_NAME: H5VL_attr_get_t = 2;
pub const H5VL_attr_get_t_H5VL_ATTR_GET_SPACE: H5VL_attr_get_t = 3;
pub const H5VL_attr_get_t_H5VL_ATTR_GET_STORAGE_SIZE: H5VL_attr_get_t = 4;
pub const H5VL_attr_get_t_H5VL_ATTR_GET_TYPE: H5VL_attr_get_t = 5;
pub type H5VL_attr_get_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_attr_get_name_args_t {
    pub loc_params: H5VL_loc_params_t,
    pub buf_size: usize,
    pub buf: *mut ::std::os::raw::c_char,
    pub attr_name_len: *mut usize,
}
#[test]
fn bindgen_test_layout_H5VL_attr_get_name_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_attr_get_name_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_get_name_args_t>(),
        64usize,
        concat!("Size of: ", stringify!(H5VL_attr_get_name_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_get_name_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_attr_get_name_args_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_params) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_name_args_t),
            "::",
            stringify!(loc_params)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_name_args_t),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_name_args_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attr_name_len) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_name_args_t),
            "::",
            stringify!(attr_name_len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_attr_get_info_args_t {
    pub loc_params: H5VL_loc_params_t,
    pub attr_name: *const ::std::os::raw::c_char,
    pub ainfo: *mut H5A_info_t,
}
#[test]
fn bindgen_test_layout_H5VL_attr_get_info_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_attr_get_info_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_get_info_args_t>(),
        56usize,
        concat!("Size of: ", stringify!(H5VL_attr_get_info_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_get_info_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_attr_get_info_args_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_params) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_info_args_t),
            "::",
            stringify!(loc_params)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attr_name) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_info_args_t),
            "::",
            stringify!(attr_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ainfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_info_args_t),
            "::",
            stringify!(ainfo)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_attr_get_args_t {
    pub op_type: H5VL_attr_get_t,
    pub args: H5VL_attr_get_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_attr_get_args_t__bindgen_ty_1 {
    pub get_acpl: H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_1,
    pub get_info: H5VL_attr_get_info_args_t,
    pub get_name: H5VL_attr_get_name_args_t,
    pub get_space: H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_2,
    pub get_storage_size: H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_3,
    pub get_type: H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub acpl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acpl_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(acpl_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub space_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_2>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_2>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).space_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(space_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub data_size: *mut hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_3>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_3>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(data_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_4 {
    pub type_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_4,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_4>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_4>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(type_id)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_attr_get_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_attr_get_args_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_get_args_t__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(H5VL_attr_get_args_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_get_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_acpl) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_acpl)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_space) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_space)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_storage_size) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_storage_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_type)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_attr_get_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_attr_get_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_get_args_t>(),
        72usize,
        concat!("Size of: ", stringify!(H5VL_attr_get_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_get_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_attr_get_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_get_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub const H5VL_attr_specific_t_H5VL_ATTR_DELETE: H5VL_attr_specific_t = 0;
pub const H5VL_attr_specific_t_H5VL_ATTR_DELETE_BY_IDX: H5VL_attr_specific_t =
    1;
pub const H5VL_attr_specific_t_H5VL_ATTR_EXISTS: H5VL_attr_specific_t = 2;
pub const H5VL_attr_specific_t_H5VL_ATTR_ITER: H5VL_attr_specific_t = 3;
pub const H5VL_attr_specific_t_H5VL_ATTR_RENAME: H5VL_attr_specific_t = 4;
pub type H5VL_attr_specific_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_attr_iterate_args_t {
    pub idx_type: H5_index_t,
    pub order: H5_iter_order_t,
    pub idx: *mut hsize_t,
    pub op: H5A_operator2_t,
    pub op_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_attr_iterate_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_attr_iterate_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_iterate_args_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_attr_iterate_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_iterate_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_attr_iterate_args_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).idx_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_iterate_args_t),
            "::",
            stringify!(idx_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_iterate_args_t),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_iterate_args_t),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_iterate_args_t),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_iterate_args_t),
            "::",
            stringify!(op_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_attr_delete_by_idx_args_t {
    pub idx_type: H5_index_t,
    pub order: H5_iter_order_t,
    pub n: hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_attr_delete_by_idx_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_attr_delete_by_idx_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_delete_by_idx_args_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_attr_delete_by_idx_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_delete_by_idx_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_attr_delete_by_idx_args_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).idx_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_delete_by_idx_args_t),
            "::",
            stringify!(idx_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_delete_by_idx_args_t),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_delete_by_idx_args_t),
            "::",
            stringify!(n)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_attr_specific_args_t {
    pub op_type: H5VL_attr_specific_t,
    pub args: H5VL_attr_specific_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_attr_specific_args_t__bindgen_ty_1 {
    pub del: H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    pub delete_by_idx: H5VL_attr_delete_by_idx_args_t,
    pub exists: H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    pub iterate: H5VL_attr_iterate_args_t,
    pub rename: H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub name: *const ::std::os::raw::c_char,
    pub exists: *mut hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exists) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(exists)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub old_name: *const ::std::os::raw::c_char,
    pub new_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).old_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(old_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).new_name) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(new_name)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_attr_specific_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_attr_specific_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_specific_args_t__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).del) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(del)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).delete_by_idx) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(delete_by_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exists) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(exists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iterate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(iterate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(rename)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_attr_specific_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_attr_specific_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_specific_args_t>(),
        40usize,
        concat!("Size of: ", stringify!(H5VL_attr_specific_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_specific_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_attr_specific_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_specific_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub type H5VL_attr_optional_t = ::std::os::raw::c_int;
pub const H5VL_dataset_get_t_H5VL_DATASET_GET_DAPL: H5VL_dataset_get_t = 0;
pub const H5VL_dataset_get_t_H5VL_DATASET_GET_DCPL: H5VL_dataset_get_t = 1;
pub const H5VL_dataset_get_t_H5VL_DATASET_GET_SPACE: H5VL_dataset_get_t = 2;
pub const H5VL_dataset_get_t_H5VL_DATASET_GET_SPACE_STATUS: H5VL_dataset_get_t =
    3;
pub const H5VL_dataset_get_t_H5VL_DATASET_GET_STORAGE_SIZE: H5VL_dataset_get_t =
    4;
pub const H5VL_dataset_get_t_H5VL_DATASET_GET_TYPE: H5VL_dataset_get_t = 5;
pub type H5VL_dataset_get_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_dataset_get_args_t {
    pub op_type: H5VL_dataset_get_t,
    pub args: H5VL_dataset_get_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_dataset_get_args_t__bindgen_ty_1 {
    pub get_dapl: H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_1,
    pub get_dcpl: H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_2,
    pub get_space: H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_3,
    pub get_space_status: H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_4,
    pub get_storage_size: H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_5,
    pub get_type: H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub dapl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dapl_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dapl_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub dcpl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcpl_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dcpl_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub space_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).space_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(space_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_4 {
    pub status: *mut H5D_space_status_t,
}
#[test]
fn bindgen_test_layout_H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_4,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_4,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_4,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_5 {
    pub storage_size: *mut hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_5,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_5,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_5,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).storage_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(storage_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_6 {
    pub type_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_6,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_6,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_6,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(type_id)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_dataset_get_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_dataset_get_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_dataset_get_args_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(H5VL_dataset_get_args_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_dataset_get_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_dapl) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_dapl)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_dcpl) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_dcpl)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_space) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_space)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_space_status) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_space_status)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_storage_size) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_storage_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_type)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_dataset_get_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_dataset_get_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_dataset_get_args_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_dataset_get_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_dataset_get_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_dataset_get_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_get_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub const H5VL_dataset_specific_t_H5VL_DATASET_SET_EXTENT:
    H5VL_dataset_specific_t = 0;
pub const H5VL_dataset_specific_t_H5VL_DATASET_FLUSH: H5VL_dataset_specific_t =
    1;
pub const H5VL_dataset_specific_t_H5VL_DATASET_REFRESH:
    H5VL_dataset_specific_t = 2;
pub type H5VL_dataset_specific_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_dataset_specific_args_t {
    pub op_type: H5VL_dataset_specific_t,
    pub args: H5VL_dataset_specific_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_dataset_specific_args_t__bindgen_ty_1 {
    pub set_extent: H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    pub flush: H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    pub refresh: H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub size: *const hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_1(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub dset_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_2(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_2
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_2
            )
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dset_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_2
            ),
            "::",
            stringify!(dset_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub dset_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_3(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_3
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_3
            )
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dset_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_dataset_specific_args_t__bindgen_ty_1__bindgen_ty_3
            ),
            "::",
            stringify!(dset_id)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_dataset_specific_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_dataset_specific_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_dataset_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_dataset_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_dataset_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_dataset_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).set_extent) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(set_extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refresh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(refresh)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_dataset_specific_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_dataset_specific_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_dataset_specific_args_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_dataset_specific_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_dataset_specific_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_dataset_specific_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_specific_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_specific_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub type H5VL_dataset_optional_t = ::std::os::raw::c_int;
pub const H5VL_datatype_get_t_H5VL_DATATYPE_GET_BINARY_SIZE:
    H5VL_datatype_get_t = 0;
pub const H5VL_datatype_get_t_H5VL_DATATYPE_GET_BINARY: H5VL_datatype_get_t = 1;
pub const H5VL_datatype_get_t_H5VL_DATATYPE_GET_TCPL: H5VL_datatype_get_t = 2;
pub type H5VL_datatype_get_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_datatype_get_args_t {
    pub op_type: H5VL_datatype_get_t,
    pub args: H5VL_datatype_get_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_datatype_get_args_t__bindgen_ty_1 {
    pub get_binary_size: H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_1,
    pub get_binary: H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_2,
    pub get_tcpl: H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub size: *mut usize,
}
#[test]
fn bindgen_test_layout_H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub buf: *mut ::std::os::raw::c_void,
    pub buf_size: usize,
}
#[test]
fn bindgen_test_layout_H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(buf_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub tcpl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpl_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(tcpl_id)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_datatype_get_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_datatype_get_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_datatype_get_args_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_datatype_get_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_binary_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_binary_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_binary) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_binary)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_tcpl) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_tcpl)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_datatype_get_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_datatype_get_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_datatype_get_args_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_datatype_get_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_datatype_get_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_datatype_get_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_get_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_get_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub const H5VL_datatype_specific_t_H5VL_DATATYPE_FLUSH:
    H5VL_datatype_specific_t = 0;
pub const H5VL_datatype_specific_t_H5VL_DATATYPE_REFRESH:
    H5VL_datatype_specific_t = 1;
pub type H5VL_datatype_specific_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_datatype_specific_args_t {
    pub op_type: H5VL_datatype_specific_t,
    pub args: H5VL_datatype_specific_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_datatype_specific_args_t__bindgen_ty_1 {
    pub flush: H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    pub refresh: H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub type_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_1(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(type_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub type_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_2(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_2
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_2
            )
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_datatype_specific_args_t__bindgen_ty_1__bindgen_ty_2
            ),
            "::",
            stringify!(type_id)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_datatype_specific_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_datatype_specific_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_datatype_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_datatype_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_datatype_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_datatype_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refresh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(refresh)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_datatype_specific_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_datatype_specific_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_datatype_specific_args_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_datatype_specific_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_datatype_specific_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_datatype_specific_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_specific_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_specific_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub type H5VL_datatype_optional_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_cont_info_t {
    pub version: ::std::os::raw::c_uint,
    pub feature_flags: u64,
    pub token_size: usize,
    pub blob_id_size: usize,
}
#[test]
fn bindgen_test_layout_H5VL_file_cont_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_file_cont_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_cont_info_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_file_cont_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_cont_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_file_cont_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_cont_info_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).feature_flags) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_cont_info_t),
            "::",
            stringify!(feature_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).token_size) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_cont_info_t),
            "::",
            stringify!(token_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).blob_id_size) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_cont_info_t),
            "::",
            stringify!(blob_id_size)
        )
    );
}
pub const H5VL_file_get_t_H5VL_FILE_GET_CONT_INFO: H5VL_file_get_t = 0;
pub const H5VL_file_get_t_H5VL_FILE_GET_FAPL: H5VL_file_get_t = 1;
pub const H5VL_file_get_t_H5VL_FILE_GET_FCPL: H5VL_file_get_t = 2;
pub const H5VL_file_get_t_H5VL_FILE_GET_FILENO: H5VL_file_get_t = 3;
pub const H5VL_file_get_t_H5VL_FILE_GET_INTENT: H5VL_file_get_t = 4;
pub const H5VL_file_get_t_H5VL_FILE_GET_NAME: H5VL_file_get_t = 5;
pub const H5VL_file_get_t_H5VL_FILE_GET_OBJ_COUNT: H5VL_file_get_t = 6;
pub const H5VL_file_get_t_H5VL_FILE_GET_OBJ_IDS: H5VL_file_get_t = 7;
pub type H5VL_file_get_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_get_name_args_t {
    pub type_: H5I_type_t,
    pub buf_size: usize,
    pub buf: *mut ::std::os::raw::c_char,
    pub file_name_len: *mut usize,
}
#[test]
fn bindgen_test_layout_H5VL_file_get_name_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_file_get_name_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_get_name_args_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_file_get_name_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_get_name_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_file_get_name_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_name_args_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_name_args_t),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_name_args_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_name_len) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_name_args_t),
            "::",
            stringify!(file_name_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_get_obj_ids_args_t {
    pub types: ::std::os::raw::c_uint,
    pub max_objs: usize,
    pub oid_list: *mut hid_t,
    pub count: *mut usize,
}
#[test]
fn bindgen_test_layout_H5VL_file_get_obj_ids_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_file_get_obj_ids_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_get_obj_ids_args_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_file_get_obj_ids_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_get_obj_ids_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_file_get_obj_ids_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_obj_ids_args_t),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_objs) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_obj_ids_args_t),
            "::",
            stringify!(max_objs)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).oid_list) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_obj_ids_args_t),
            "::",
            stringify!(oid_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_obj_ids_args_t),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_file_get_args_t {
    pub op_type: H5VL_file_get_t,
    pub args: H5VL_file_get_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_file_get_args_t__bindgen_ty_1 {
    pub get_cont_info: H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_1,
    pub get_fapl: H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_2,
    pub get_fcpl: H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_3,
    pub get_fileno: H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_4,
    pub get_intent: H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_5,
    pub get_name: H5VL_file_get_name_args_t,
    pub get_obj_count: H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_6,
    pub get_obj_ids: H5VL_file_get_obj_ids_args_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub info: *mut H5VL_file_cont_info_t,
}
#[test]
fn bindgen_test_layout_H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub fapl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_2>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_2>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fapl_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fapl_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub fcpl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_3>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_3>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcpl_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(fcpl_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_4 {
    pub fileno: *mut ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_4,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_4>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_4>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(fileno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_5 {
    pub flags: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_5,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_5>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_5>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_6 {
    pub types: ::std::os::raw::c_uint,
    pub count: *mut usize,
}
#[test]
fn bindgen_test_layout_H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_6,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_6>(
        ),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_6>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(count)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_file_get_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_file_get_args_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_get_args_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_file_get_args_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_get_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_cont_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_cont_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_fapl) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_fapl)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_fcpl) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_fcpl)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_fileno) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_fileno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_intent) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_intent)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_obj_count) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_obj_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_obj_ids) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_obj_ids)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_file_get_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_file_get_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_get_args_t>(),
        40usize,
        concat!("Size of: ", stringify!(H5VL_file_get_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_get_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_file_get_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_get_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub const H5VL_file_specific_t_H5VL_FILE_FLUSH: H5VL_file_specific_t = 0;
pub const H5VL_file_specific_t_H5VL_FILE_REOPEN: H5VL_file_specific_t = 1;
pub const H5VL_file_specific_t_H5VL_FILE_IS_ACCESSIBLE: H5VL_file_specific_t =
    2;
pub const H5VL_file_specific_t_H5VL_FILE_DELETE: H5VL_file_specific_t = 3;
pub const H5VL_file_specific_t_H5VL_FILE_IS_EQUAL: H5VL_file_specific_t = 4;
pub type H5VL_file_specific_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_file_specific_args_t {
    pub op_type: H5VL_file_specific_t,
    pub args: H5VL_file_specific_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_file_specific_args_t__bindgen_ty_1 {
    pub flush: H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    pub reopen: H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    pub is_accessible: H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_3,
    pub del: H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_4,
    pub is_equal: H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub obj_type: H5I_type_t,
    pub scope: H5F_scope_t,
}
#[test]
fn bindgen_test_layout_H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).obj_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(obj_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(scope)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub file: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(file)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub filename: *const ::std::os::raw::c_char,
    pub fapl_id: hid_t,
    pub accessible: *mut hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fapl_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(fapl_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).accessible) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(accessible)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_4 {
    pub filename: *const ::std::os::raw::c_char,
    pub fapl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_4,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_4,
        >(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_4,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fapl_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(fapl_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_5 {
    pub obj2: *mut ::std::os::raw::c_void,
    pub same_file: *mut hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_5,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_5,
        >(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_5,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(obj2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).same_file) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(same_file)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_file_specific_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_file_specific_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_specific_args_t__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reopen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(reopen)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).is_accessible) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(is_accessible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).del) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(del)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).is_equal) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(is_equal)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_file_specific_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_file_specific_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_specific_args_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_file_specific_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_specific_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_file_specific_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_specific_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub type H5VL_file_optional_t = ::std::os::raw::c_int;
pub const H5VL_group_get_t_H5VL_GROUP_GET_GCPL: H5VL_group_get_t = 0;
pub const H5VL_group_get_t_H5VL_GROUP_GET_INFO: H5VL_group_get_t = 1;
pub type H5VL_group_get_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_group_get_info_args_t {
    pub loc_params: H5VL_loc_params_t,
    pub ginfo: *mut H5G_info_t,
}
#[test]
fn bindgen_test_layout_H5VL_group_get_info_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_group_get_info_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_group_get_info_args_t>(),
        48usize,
        concat!("Size of: ", stringify!(H5VL_group_get_info_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_group_get_info_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_group_get_info_args_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_params) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_get_info_args_t),
            "::",
            stringify!(loc_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ginfo) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_get_info_args_t),
            "::",
            stringify!(ginfo)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_group_get_args_t {
    pub op_type: H5VL_group_get_t,
    pub args: H5VL_group_get_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_group_get_args_t__bindgen_ty_1 {
    pub get_gcpl: H5VL_group_get_args_t__bindgen_ty_1__bindgen_ty_1,
    pub get_info: H5VL_group_get_info_args_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_group_get_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub gcpl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_group_get_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_group_get_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_group_get_args_t__bindgen_ty_1__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_group_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_group_get_args_t__bindgen_ty_1__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_group_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gcpl_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_get_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gcpl_id)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_group_get_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_group_get_args_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_group_get_args_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(H5VL_group_get_args_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_group_get_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_group_get_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_gcpl) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_gcpl)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_info)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_group_get_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_group_get_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_group_get_args_t>(),
        56usize,
        concat!("Size of: ", stringify!(H5VL_group_get_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_group_get_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_group_get_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_get_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_get_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub const H5VL_group_specific_t_H5VL_GROUP_MOUNT: H5VL_group_specific_t = 0;
pub const H5VL_group_specific_t_H5VL_GROUP_UNMOUNT: H5VL_group_specific_t = 1;
pub const H5VL_group_specific_t_H5VL_GROUP_FLUSH: H5VL_group_specific_t = 2;
pub const H5VL_group_specific_t_H5VL_GROUP_REFRESH: H5VL_group_specific_t = 3;
pub type H5VL_group_specific_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_group_spec_mount_args_t {
    pub name: *const ::std::os::raw::c_char,
    pub child_file: *mut ::std::os::raw::c_void,
    pub fmpl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_group_spec_mount_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_group_spec_mount_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_group_spec_mount_args_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_group_spec_mount_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_group_spec_mount_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_group_spec_mount_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_spec_mount_args_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).child_file) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_spec_mount_args_t),
            "::",
            stringify!(child_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmpl_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_spec_mount_args_t),
            "::",
            stringify!(fmpl_id)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_group_specific_args_t {
    pub op_type: H5VL_group_specific_t,
    pub args: H5VL_group_specific_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_group_specific_args_t__bindgen_ty_1 {
    pub mount: H5VL_group_spec_mount_args_t,
    pub unmount: H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    pub flush: H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    pub refresh: H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_1()
{
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub grp_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_2()
{
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(grp_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub grp_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_3()
{
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(grp_id)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_group_specific_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_group_specific_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_group_specific_args_t__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_group_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(mount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unmount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(unmount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refresh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(refresh)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_group_specific_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_group_specific_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_group_specific_args_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_group_specific_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_group_specific_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_group_specific_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_specific_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_specific_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub type H5VL_group_optional_t = ::std::os::raw::c_int;
pub const H5VL_link_create_t_H5VL_LINK_CREATE_HARD: H5VL_link_create_t = 0;
pub const H5VL_link_create_t_H5VL_LINK_CREATE_SOFT: H5VL_link_create_t = 1;
pub const H5VL_link_create_t_H5VL_LINK_CREATE_UD: H5VL_link_create_t = 2;
pub type H5VL_link_create_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_link_create_args_t {
    pub op_type: H5VL_link_create_t,
    pub args: H5VL_link_create_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_link_create_args_t__bindgen_ty_1 {
    pub hard: H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_1,
    pub soft: H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_2,
    pub ud: H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub curr_obj: *mut ::std::os::raw::c_void,
    pub curr_loc_params: H5VL_loc_params_t,
}
#[test]
fn bindgen_test_layout_H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).curr_obj) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(curr_obj)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).curr_loc_params) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(curr_loc_params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub target: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(target)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub type_: H5L_type_t,
    pub buf: *const ::std::os::raw::c_void,
    pub buf_size: usize,
}
#[test]
fn bindgen_test_layout_H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(buf_size)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_link_create_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_link_create_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_link_create_args_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(H5VL_link_create_args_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_link_create_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1),
            "::",
            stringify!(hard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1),
            "::",
            stringify!(soft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ud) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_create_args_t__bindgen_ty_1),
            "::",
            stringify!(ud)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_link_create_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_link_create_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_link_create_args_t>(),
        56usize,
        concat!("Size of: ", stringify!(H5VL_link_create_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_link_create_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_link_create_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_create_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_create_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub const H5VL_link_get_t_H5VL_LINK_GET_INFO: H5VL_link_get_t = 0;
pub const H5VL_link_get_t_H5VL_LINK_GET_NAME: H5VL_link_get_t = 1;
pub const H5VL_link_get_t_H5VL_LINK_GET_VAL: H5VL_link_get_t = 2;
pub type H5VL_link_get_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_link_get_args_t {
    pub op_type: H5VL_link_get_t,
    pub args: H5VL_link_get_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_link_get_args_t__bindgen_ty_1 {
    pub get_info: H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_1,
    pub get_name: H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_2,
    pub get_val: H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub linfo: *mut H5L_info2_t,
}
#[test]
fn bindgen_test_layout_H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(linfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub name_size: usize,
    pub name: *mut ::std::os::raw::c_char,
    pub name_len: *mut usize,
}
#[test]
fn bindgen_test_layout_H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_2>(
        ),
        24usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_2>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).name_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(name_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).name_len) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(name_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub buf_size: usize,
    pub buf: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_3>(
        ),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_3>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(buf)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_link_get_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_link_get_args_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_link_get_args_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_link_get_args_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_link_get_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_val)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_link_get_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_link_get_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_link_get_args_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_link_get_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_link_get_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_link_get_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_get_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_get_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub const H5VL_link_specific_t_H5VL_LINK_DELETE: H5VL_link_specific_t = 0;
pub const H5VL_link_specific_t_H5VL_LINK_EXISTS: H5VL_link_specific_t = 1;
pub const H5VL_link_specific_t_H5VL_LINK_ITER: H5VL_link_specific_t = 2;
pub type H5VL_link_specific_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_link_iterate_args_t {
    pub recursive: hbool_t,
    pub idx_type: H5_index_t,
    pub order: H5_iter_order_t,
    pub idx_p: *mut hsize_t,
    pub op: H5L_iterate2_t,
    pub op_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_link_iterate_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_link_iterate_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_link_iterate_args_t>(),
        40usize,
        concat!("Size of: ", stringify!(H5VL_link_iterate_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_link_iterate_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_link_iterate_args_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).recursive) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_iterate_args_t),
            "::",
            stringify!(recursive)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).idx_type) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_iterate_args_t),
            "::",
            stringify!(idx_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_iterate_args_t),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idx_p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_iterate_args_t),
            "::",
            stringify!(idx_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_iterate_args_t),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_iterate_args_t),
            "::",
            stringify!(op_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_link_specific_args_t {
    pub op_type: H5VL_link_specific_t,
    pub args: H5VL_link_specific_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_link_specific_args_t__bindgen_ty_1 {
    pub exists: H5VL_link_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    pub iterate: H5VL_link_iterate_args_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_link_specific_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub exists: *mut hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_link_specific_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_link_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_link_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_link_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_link_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_link_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exists) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_specific_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(exists)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_link_specific_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_link_specific_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_link_specific_args_t__bindgen_ty_1>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_link_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_link_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_link_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exists) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(exists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iterate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(iterate)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_link_specific_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_link_specific_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_link_specific_args_t>(),
        48usize,
        concat!("Size of: ", stringify!(H5VL_link_specific_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_link_specific_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_link_specific_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_specific_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_specific_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub type H5VL_link_optional_t = ::std::os::raw::c_int;
pub const H5VL_object_get_t_H5VL_OBJECT_GET_FILE: H5VL_object_get_t = 0;
pub const H5VL_object_get_t_H5VL_OBJECT_GET_NAME: H5VL_object_get_t = 1;
pub const H5VL_object_get_t_H5VL_OBJECT_GET_TYPE: H5VL_object_get_t = 2;
pub const H5VL_object_get_t_H5VL_OBJECT_GET_INFO: H5VL_object_get_t = 3;
pub type H5VL_object_get_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_object_get_args_t {
    pub op_type: H5VL_object_get_t,
    pub args: H5VL_object_get_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_object_get_args_t__bindgen_ty_1 {
    pub get_file: H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_1,
    pub get_name: H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_2,
    pub get_type: H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_3,
    pub get_info: H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub file: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(file)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub buf_size: usize,
    pub buf: *mut ::std::os::raw::c_char,
    pub name_len: *mut usize,
}
#[test]
fn bindgen_test_layout_H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_2>(
        ),
        24usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).name_len) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(name_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub obj_type: *mut H5O_type_t,
}
#[test]
fn bindgen_test_layout_H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_3>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).obj_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(obj_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_4 {
    pub fields: ::std::os::raw::c_uint,
    pub oinfo: *mut H5O_info2_t,
}
#[test]
fn bindgen_test_layout_H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_4,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_4>(
        ),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_4,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(oinfo)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_object_get_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_object_get_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_object_get_args_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_object_get_args_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_object_get_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_file) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_file)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t__bindgen_ty_1),
            "::",
            stringify!(get_info)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_object_get_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_object_get_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_object_get_args_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_object_get_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_object_get_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_object_get_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_get_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub const H5VL_object_specific_t_H5VL_OBJECT_CHANGE_REF_COUNT:
    H5VL_object_specific_t = 0;
pub const H5VL_object_specific_t_H5VL_OBJECT_EXISTS: H5VL_object_specific_t = 1;
pub const H5VL_object_specific_t_H5VL_OBJECT_LOOKUP: H5VL_object_specific_t = 2;
pub const H5VL_object_specific_t_H5VL_OBJECT_VISIT: H5VL_object_specific_t = 3;
pub const H5VL_object_specific_t_H5VL_OBJECT_FLUSH: H5VL_object_specific_t = 4;
pub const H5VL_object_specific_t_H5VL_OBJECT_REFRESH: H5VL_object_specific_t =
    5;
pub type H5VL_object_specific_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_object_visit_args_t {
    pub idx_type: H5_index_t,
    pub order: H5_iter_order_t,
    pub fields: ::std::os::raw::c_uint,
    pub op: H5O_iterate2_t,
    pub op_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_object_visit_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_object_visit_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_object_visit_args_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_object_visit_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_object_visit_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_object_visit_args_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).idx_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_visit_args_t),
            "::",
            stringify!(idx_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_visit_args_t),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_visit_args_t),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_visit_args_t),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_visit_args_t),
            "::",
            stringify!(op_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_object_specific_args_t {
    pub op_type: H5VL_object_specific_t,
    pub args: H5VL_object_specific_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_object_specific_args_t__bindgen_ty_1 {
    pub change_rc: H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    pub exists: H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    pub lookup: H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_3,
    pub visit: H5VL_object_visit_args_t,
    pub flush: H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_4,
    pub refresh: H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub delta: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_1()
{
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(delta)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub exists: *mut hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_2()
{
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exists) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(exists)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_3 {
    pub token_ptr: *mut H5O_token_t,
}
#[test]
fn bindgen_test_layout_H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_3()
{
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).token_ptr) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(token_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_4 {
    pub obj_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_4()
{
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_4,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_4,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_4,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(obj_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_5 {
    pub obj_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_5()
{
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_5,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_5,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_5,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(obj_id)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_object_specific_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_object_specific_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_object_specific_args_t__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_object_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).change_rc) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(change_rc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exists) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(exists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookup) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(lookup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(visit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refresh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(refresh)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_object_specific_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_object_specific_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_object_specific_args_t>(),
        40usize,
        concat!("Size of: ", stringify!(H5VL_object_specific_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_object_specific_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_object_specific_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_specific_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub type H5VL_object_optional_t = ::std::os::raw::c_int;
pub const H5VL_request_status_t_H5VL_REQUEST_STATUS_IN_PROGRESS:
    H5VL_request_status_t = 0;
pub const H5VL_request_status_t_H5VL_REQUEST_STATUS_SUCCEED:
    H5VL_request_status_t = 1;
pub const H5VL_request_status_t_H5VL_REQUEST_STATUS_FAIL:
    H5VL_request_status_t = 2;
pub const H5VL_request_status_t_H5VL_REQUEST_STATUS_CANT_CANCEL:
    H5VL_request_status_t = 3;
pub const H5VL_request_status_t_H5VL_REQUEST_STATUS_CANCELED:
    H5VL_request_status_t = 4;
pub type H5VL_request_status_t = ::std::os::raw::c_uint;
pub const H5VL_request_specific_t_H5VL_REQUEST_GET_ERR_STACK:
    H5VL_request_specific_t = 0;
pub const H5VL_request_specific_t_H5VL_REQUEST_GET_EXEC_TIME:
    H5VL_request_specific_t = 1;
pub type H5VL_request_specific_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_request_specific_args_t {
    pub op_type: H5VL_request_specific_t,
    pub args: H5VL_request_specific_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_request_specific_args_t__bindgen_ty_1 {
    pub get_err_stack: H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    pub get_exec_time: H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub err_stack_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_1(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).err_stack_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(err_stack_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_2 {
    pub exec_ts: *mut u64,
    pub exec_time: *mut u64,
}
#[test]
fn bindgen_test_layout_H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_2(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_2
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_2
            )
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exec_ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_2
            ),
            "::",
            stringify!(exec_ts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exec_time) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_request_specific_args_t__bindgen_ty_1__bindgen_ty_2
            ),
            "::",
            stringify!(exec_time)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_request_specific_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_request_specific_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_request_specific_args_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_request_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_request_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_request_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_err_stack) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_request_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(get_err_stack)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_exec_time) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_request_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(get_exec_time)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_request_specific_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_request_specific_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_request_specific_args_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_request_specific_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_request_specific_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_request_specific_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_request_specific_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_request_specific_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub type H5VL_request_optional_t = ::std::os::raw::c_int;
pub const H5VL_blob_specific_t_H5VL_BLOB_DELETE: H5VL_blob_specific_t = 0;
pub const H5VL_blob_specific_t_H5VL_BLOB_ISNULL: H5VL_blob_specific_t = 1;
pub const H5VL_blob_specific_t_H5VL_BLOB_SETNULL: H5VL_blob_specific_t = 2;
pub type H5VL_blob_specific_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_blob_specific_args_t {
    pub op_type: H5VL_blob_specific_t,
    pub args: H5VL_blob_specific_args_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_blob_specific_args_t__bindgen_ty_1 {
    pub is_null: H5VL_blob_specific_args_t__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_blob_specific_args_t__bindgen_ty_1__bindgen_ty_1 {
    pub isnull: *mut hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_blob_specific_args_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_blob_specific_args_t__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_blob_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_blob_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_blob_specific_args_t__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_blob_specific_args_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isnull) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_blob_specific_args_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(isnull)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_blob_specific_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_blob_specific_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_blob_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_blob_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_blob_specific_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_blob_specific_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_null) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_blob_specific_args_t__bindgen_ty_1),
            "::",
            stringify!(is_null)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_blob_specific_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_blob_specific_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_blob_specific_args_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_blob_specific_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_blob_specific_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_blob_specific_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_blob_specific_args_t),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_blob_specific_args_t),
            "::",
            stringify!(args)
        )
    );
}
pub type H5VL_blob_optional_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_info_class_t {
    pub size: usize,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub cmp: ::std::option::Option<
        unsafe extern "C" fn(
            cmp_value: *mut ::std::os::raw::c_int,
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> herr_t,
    >,
    pub to_str: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
            str_: *mut *mut ::std::os::raw::c_char,
        ) -> herr_t,
    >,
    pub from_str: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            info: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_info_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_info_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_info_class_t>(),
        48usize,
        concat!("Size of: ", stringify!(H5VL_info_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_info_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_info_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_info_class_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_info_class_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_info_class_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_info_class_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_str) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_info_class_t),
            "::",
            stringify!(to_str)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).from_str) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_info_class_t),
            "::",
            stringify!(from_str)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_wrap_class_t {
    pub get_object: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub get_wrap_ctx: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *const ::std::os::raw::c_void,
            wrap_ctx: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub wrap_object: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            obj_type: H5I_type_t,
            wrap_ctx: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub unwrap_object: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_wrap_ctx: ::std::option::Option<
        unsafe extern "C" fn(wrap_ctx: *mut ::std::os::raw::c_void) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_wrap_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_wrap_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_wrap_class_t>(),
        40usize,
        concat!("Size of: ", stringify!(H5VL_wrap_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_wrap_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_wrap_class_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_object) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_wrap_class_t),
            "::",
            stringify!(get_object)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_wrap_ctx) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_wrap_class_t),
            "::",
            stringify!(get_wrap_ctx)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wrap_object) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_wrap_class_t),
            "::",
            stringify!(wrap_object)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unwrap_object) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_wrap_class_t),
            "::",
            stringify!(unwrap_object)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).free_wrap_ctx) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_wrap_class_t),
            "::",
            stringify!(free_wrap_ctx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_attr_class_t {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            attr_name: *const ::std::os::raw::c_char,
            type_id: hid_t,
            space_id: hid_t,
            acpl_id: hid_t,
            aapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            attr_name: *const ::std::os::raw::c_char,
            aapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            attr: *mut ::std::os::raw::c_void,
            mem_type_id: hid_t,
            buf: *mut ::std::os::raw::c_void,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            attr: *mut ::std::os::raw::c_void,
            mem_type_id: hid_t,
            buf: *const ::std::os::raw::c_void,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_attr_get_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub specific: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            args: *mut H5VL_attr_specific_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub optional: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_optional_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            attr: *mut ::std::os::raw::c_void,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_attr_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_attr_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_attr_class_t>(),
        64usize,
        concat!("Size of: ", stringify!(H5VL_attr_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_attr_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_attr_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_class_t),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_class_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_class_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_class_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_class_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specific) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_class_t),
            "::",
            stringify!(specific)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optional) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_class_t),
            "::",
            stringify!(optional)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_attr_class_t),
            "::",
            stringify!(close)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_dataset_class_t {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            name: *const ::std::os::raw::c_char,
            lcpl_id: hid_t,
            type_id: hid_t,
            space_id: hid_t,
            dcpl_id: hid_t,
            dapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            name: *const ::std::os::raw::c_char,
            dapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            count: usize,
            dset: *mut *mut ::std::os::raw::c_void,
            mem_type_id: *mut hid_t,
            mem_space_id: *mut hid_t,
            file_space_id: *mut hid_t,
            dxpl_id: hid_t,
            buf: *mut *mut ::std::os::raw::c_void,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            count: usize,
            dset: *mut *mut ::std::os::raw::c_void,
            mem_type_id: *mut hid_t,
            mem_space_id: *mut hid_t,
            file_space_id: *mut hid_t,
            dxpl_id: hid_t,
            buf: *mut *const ::std::os::raw::c_void,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_dataset_get_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub specific: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_dataset_specific_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub optional: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_optional_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            dset: *mut ::std::os::raw::c_void,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_dataset_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_dataset_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_dataset_class_t>(),
        64usize,
        concat!("Size of: ", stringify!(H5VL_dataset_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_dataset_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_dataset_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_class_t),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_class_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_class_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_class_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_class_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specific) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_class_t),
            "::",
            stringify!(specific)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optional) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_class_t),
            "::",
            stringify!(optional)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_dataset_class_t),
            "::",
            stringify!(close)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_datatype_class_t {
    pub commit: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            name: *const ::std::os::raw::c_char,
            type_id: hid_t,
            lcpl_id: hid_t,
            tcpl_id: hid_t,
            tapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            name: *const ::std::os::raw::c_char,
            tapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_datatype_get_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub specific: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_datatype_specific_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub optional: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_optional_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            dt: *mut ::std::os::raw::c_void,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_datatype_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_datatype_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_datatype_class_t>(),
        48usize,
        concat!("Size of: ", stringify!(H5VL_datatype_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_datatype_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_datatype_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_class_t),
            "::",
            stringify!(commit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_class_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_class_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specific) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_class_t),
            "::",
            stringify!(specific)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optional) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_class_t),
            "::",
            stringify!(optional)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_datatype_class_t),
            "::",
            stringify!(close)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_file_class_t {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_uint,
            fcpl_id: hid_t,
            fapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_uint,
            fapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_file_get_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub specific: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_file_specific_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub optional: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_optional_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut ::std::os::raw::c_void,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_file_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_file_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_file_class_t>(),
        48usize,
        concat!("Size of: ", stringify!(H5VL_file_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_file_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_file_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_class_t),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_class_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_class_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specific) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_class_t),
            "::",
            stringify!(specific)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optional) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_class_t),
            "::",
            stringify!(optional)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_file_class_t),
            "::",
            stringify!(close)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_group_class_t {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            name: *const ::std::os::raw::c_char,
            lcpl_id: hid_t,
            gcpl_id: hid_t,
            gapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            name: *const ::std::os::raw::c_char,
            gapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_group_get_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub specific: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_group_specific_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub optional: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_optional_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            grp: *mut ::std::os::raw::c_void,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_group_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_group_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_group_class_t>(),
        48usize,
        concat!("Size of: ", stringify!(H5VL_group_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_group_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_group_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_class_t),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_class_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_class_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specific) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_class_t),
            "::",
            stringify!(specific)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optional) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_class_t),
            "::",
            stringify!(optional)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_group_class_t),
            "::",
            stringify!(close)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_link_class_t {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            args: *mut H5VL_link_create_args_t,
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            lcpl_id: hid_t,
            lapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            src_obj: *mut ::std::os::raw::c_void,
            loc_params1: *const H5VL_loc_params_t,
            dst_obj: *mut ::std::os::raw::c_void,
            loc_params2: *const H5VL_loc_params_t,
            lcpl_id: hid_t,
            lapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub move_: ::std::option::Option<
        unsafe extern "C" fn(
            src_obj: *mut ::std::os::raw::c_void,
            loc_params1: *const H5VL_loc_params_t,
            dst_obj: *mut ::std::os::raw::c_void,
            loc_params2: *const H5VL_loc_params_t,
            lcpl_id: hid_t,
            lapl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            args: *mut H5VL_link_get_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub specific: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            args: *mut H5VL_link_specific_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub optional: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            args: *mut H5VL_optional_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_link_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_link_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_link_class_t>(),
        48usize,
        concat!("Size of: ", stringify!(H5VL_link_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_link_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_link_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_class_t),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_class_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).move_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_class_t),
            "::",
            stringify!(move_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_class_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specific) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_class_t),
            "::",
            stringify!(specific)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optional) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_link_class_t),
            "::",
            stringify!(optional)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_object_class_t {
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            opened_type: *mut H5I_type_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            src_obj: *mut ::std::os::raw::c_void,
            loc_params1: *const H5VL_loc_params_t,
            src_name: *const ::std::os::raw::c_char,
            dst_obj: *mut ::std::os::raw::c_void,
            loc_params2: *const H5VL_loc_params_t,
            dst_name: *const ::std::os::raw::c_char,
            ocpypl_id: hid_t,
            lcpl_id: hid_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            args: *mut H5VL_object_get_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub specific: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            args: *mut H5VL_object_specific_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub optional: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            loc_params: *const H5VL_loc_params_t,
            args: *mut H5VL_optional_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_object_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_object_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_object_class_t>(),
        40usize,
        concat!("Size of: ", stringify!(H5VL_object_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_object_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_object_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_class_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_class_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_class_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specific) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_class_t),
            "::",
            stringify!(specific)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optional) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_object_class_t),
            "::",
            stringify!(optional)
        )
    );
}
pub type H5VL_request_notify_t = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        status: H5VL_request_status_t,
    ) -> herr_t,
>;
pub const H5VL_get_conn_lvl_t_H5VL_GET_CONN_LVL_CURR: H5VL_get_conn_lvl_t = 0;
pub const H5VL_get_conn_lvl_t_H5VL_GET_CONN_LVL_TERM: H5VL_get_conn_lvl_t = 1;
pub type H5VL_get_conn_lvl_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_introspect_class_t {
    pub get_conn_cls: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            lvl: H5VL_get_conn_lvl_t,
            conn_cls: *mut *const H5VL_class_t,
        ) -> herr_t,
    >,
    pub get_cap_flags: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
            cap_flags: *mut u64,
        ) -> herr_t,
    >,
    pub opt_query: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            cls: H5VL_subclass_t,
            opt_type: ::std::os::raw::c_int,
            flags: *mut u64,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_introspect_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_introspect_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_introspect_class_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_introspect_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_introspect_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_introspect_class_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_conn_cls) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_introspect_class_t),
            "::",
            stringify!(get_conn_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_cap_flags) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_introspect_class_t),
            "::",
            stringify!(get_cap_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).opt_query) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_introspect_class_t),
            "::",
            stringify!(opt_query)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_request_class_t {
    pub wait: ::std::option::Option<
        unsafe extern "C" fn(
            req: *mut ::std::os::raw::c_void,
            timeout: u64,
            status: *mut H5VL_request_status_t,
        ) -> herr_t,
    >,
    pub notify: ::std::option::Option<
        unsafe extern "C" fn(
            req: *mut ::std::os::raw::c_void,
            cb: H5VL_request_notify_t,
            ctx: *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(
            req: *mut ::std::os::raw::c_void,
            status: *mut H5VL_request_status_t,
        ) -> herr_t,
    >,
    pub specific: ::std::option::Option<
        unsafe extern "C" fn(
            req: *mut ::std::os::raw::c_void,
            args: *mut H5VL_request_specific_args_t,
        ) -> herr_t,
    >,
    pub optional: ::std::option::Option<
        unsafe extern "C" fn(
            req: *mut ::std::os::raw::c_void,
            args: *mut H5VL_optional_args_t,
        ) -> herr_t,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(req: *mut ::std::os::raw::c_void) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_request_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_request_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_request_class_t>(),
        48usize,
        concat!("Size of: ", stringify!(H5VL_request_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_request_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_request_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_request_class_t),
            "::",
            stringify!(wait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notify) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_request_class_t),
            "::",
            stringify!(notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_request_class_t),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specific) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_request_class_t),
            "::",
            stringify!(specific)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optional) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_request_class_t),
            "::",
            stringify!(optional)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_request_class_t),
            "::",
            stringify!(free)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_blob_class_t {
    pub put: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            buf: *const ::std::os::raw::c_void,
            size: usize,
            blob_id: *mut ::std::os::raw::c_void,
            ctx: *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            blob_id: *const ::std::os::raw::c_void,
            buf: *mut ::std::os::raw::c_void,
            size: usize,
            ctx: *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub specific: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            blob_id: *mut ::std::os::raw::c_void,
            args: *mut H5VL_blob_specific_args_t,
        ) -> herr_t,
    >,
    pub optional: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            blob_id: *mut ::std::os::raw::c_void,
            args: *mut H5VL_optional_args_t,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_blob_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_blob_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_blob_class_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_blob_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_blob_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_blob_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_blob_class_t),
            "::",
            stringify!(put)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_blob_class_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specific) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_blob_class_t),
            "::",
            stringify!(specific)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optional) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_blob_class_t),
            "::",
            stringify!(optional)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_token_class_t {
    pub cmp: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            token1: *const H5O_token_t,
            token2: *const H5O_token_t,
            cmp_value: *mut ::std::os::raw::c_int,
        ) -> herr_t,
    >,
    pub to_str: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            obj_type: H5I_type_t,
            token: *const H5O_token_t,
            token_str: *mut *mut ::std::os::raw::c_char,
        ) -> herr_t,
    >,
    pub from_str: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            obj_type: H5I_type_t,
            token_str: *const ::std::os::raw::c_char,
            token: *mut H5O_token_t,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_token_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_token_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_token_class_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_token_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_token_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_token_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_token_class_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_str) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_token_class_t),
            "::",
            stringify!(to_str)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).from_str) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_token_class_t),
            "::",
            stringify!(from_str)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_class_t {
    pub version: ::std::os::raw::c_uint,
    pub value: H5VL_class_value_t,
    pub name: *const ::std::os::raw::c_char,
    pub conn_version: ::std::os::raw::c_uint,
    pub cap_flags: u64,
    pub initialize:
        ::std::option::Option<unsafe extern "C" fn(vipl_id: hid_t) -> herr_t>,
    pub terminate: ::std::option::Option<unsafe extern "C" fn() -> herr_t>,
    pub info_cls: H5VL_info_class_t,
    pub wrap_cls: H5VL_wrap_class_t,
    pub attr_cls: H5VL_attr_class_t,
    pub dataset_cls: H5VL_dataset_class_t,
    pub datatype_cls: H5VL_datatype_class_t,
    pub file_cls: H5VL_file_class_t,
    pub group_cls: H5VL_group_class_t,
    pub link_cls: H5VL_link_class_t,
    pub object_cls: H5VL_object_class_t,
    pub introspect_cls: H5VL_introspect_class_t,
    pub request_cls: H5VL_request_class_t,
    pub blob_cls: H5VL_blob_class_t,
    pub token_cls: H5VL_token_class_t,
    pub optional: ::std::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::std::os::raw::c_void,
            args: *mut H5VL_optional_args_t,
            dxpl_id: hid_t,
            req: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
}
#[test]
fn bindgen_test_layout_H5VL_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_class_t>(),
        632usize,
        concat!("Size of: ", stringify!(H5VL_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).conn_version) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(conn_version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cap_flags) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(cap_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).initialize) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).terminate) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(terminate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).info_cls) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(info_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wrap_cls) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(wrap_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attr_cls) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(attr_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dataset_cls) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(dataset_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).datatype_cls) as usize - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(datatype_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_cls) as usize - ptr as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(file_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).group_cls) as usize - ptr as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(group_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).link_cls) as usize - ptr as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(link_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).object_cls) as usize - ptr as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(object_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).introspect_cls) as usize - ptr as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(introspect_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).request_cls) as usize - ptr as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(request_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).blob_cls) as usize - ptr as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(blob_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).token_cls) as usize - ptr as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(token_cls)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optional) as usize - ptr as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_class_t),
            "::",
            stringify!(optional)
        )
    );
}
extern "C" {
    pub fn H5VLregister_connector(
        cls: *const H5VL_class_t,
        vipl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5VLobject(obj_id: hid_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLget_file_type(
        file_obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        dtype_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5VLpeek_connector_id_by_name(
        name: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
extern "C" {
    pub fn H5VLpeek_connector_id_by_value(value: H5VL_class_value_t) -> hid_t;
}
extern "C" {
    pub fn H5VLregister_opt_operation(
        subcls: H5VL_subclass_t,
        op_name: *const ::std::os::raw::c_char,
        op_val: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLfind_opt_operation(
        subcls: H5VL_subclass_t,
        op_name: *const ::std::os::raw::c_char,
        op_val: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLunregister_opt_operation(
        subcls: H5VL_subclass_t,
        op_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLattr_optional_op(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        attr_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdataset_optional_op(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        dset_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdatatype_optional_op(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        type_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLfile_optional_op(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        file_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLgroup_optional_op(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        group_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLlink_optional_op(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLobject_optional_op(
        app_file: *const ::std::os::raw::c_char,
        app_func: *const ::std::os::raw::c_char,
        app_line: ::std::os::raw::c_uint,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        es_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLrequest_optional_op(
        req: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_optional_args_t,
    ) -> herr_t;
}
pub const H5VL_map_get_t_H5VL_MAP_GET_MAPL: H5VL_map_get_t = 0;
pub const H5VL_map_get_t_H5VL_MAP_GET_MCPL: H5VL_map_get_t = 1;
pub const H5VL_map_get_t_H5VL_MAP_GET_KEY_TYPE: H5VL_map_get_t = 2;
pub const H5VL_map_get_t_H5VL_MAP_GET_VAL_TYPE: H5VL_map_get_t = 3;
pub const H5VL_map_get_t_H5VL_MAP_GET_COUNT: H5VL_map_get_t = 4;
pub type H5VL_map_get_t = ::std::os::raw::c_uint;
pub const H5VL_map_specific_t_H5VL_MAP_ITER: H5VL_map_specific_t = 0;
pub const H5VL_map_specific_t_H5VL_MAP_DELETE: H5VL_map_specific_t = 1;
pub type H5VL_map_specific_t = ::std::os::raw::c_uint;
pub type H5M_iterate_t = ::std::option::Option<
    unsafe extern "C" fn(
        map_id: hid_t,
        key: *const ::std::os::raw::c_void,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_map_args_t {
    pub create: H5VL_map_args_t__bindgen_ty_1,
    pub open: H5VL_map_args_t__bindgen_ty_2,
    pub get_val: H5VL_map_args_t__bindgen_ty_3,
    pub exists: H5VL_map_args_t__bindgen_ty_4,
    pub put: H5VL_map_args_t__bindgen_ty_5,
    pub get: H5VL_map_args_t__bindgen_ty_6,
    pub specific: H5VL_map_args_t__bindgen_ty_7,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_1 {
    pub loc_params: H5VL_loc_params_t,
    pub name: *const ::std::os::raw::c_char,
    pub lcpl_id: hid_t,
    pub key_type_id: hid_t,
    pub val_type_id: hid_t,
    pub mcpl_id: hid_t,
    pub mapl_id: hid_t,
    pub map: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_map_args_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_map_args_t__bindgen_ty_1>(),
        96usize,
        concat!("Size of: ", stringify!(H5VL_map_args_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_map_args_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_map_args_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_params) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_1),
            "::",
            stringify!(loc_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lcpl_id) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_1),
            "::",
            stringify!(lcpl_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).key_type_id) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_1),
            "::",
            stringify!(key_type_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).val_type_id) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_1),
            "::",
            stringify!(val_type_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcpl_id) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_1),
            "::",
            stringify!(mcpl_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapl_id) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_1),
            "::",
            stringify!(mapl_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_1),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_2 {
    pub loc_params: H5VL_loc_params_t,
    pub name: *const ::std::os::raw::c_char,
    pub mapl_id: hid_t,
    pub map: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_map_args_t__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_map_args_t__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(H5VL_map_args_t__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_map_args_t__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_map_args_t__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_params) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_2),
            "::",
            stringify!(loc_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_2),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapl_id) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_2),
            "::",
            stringify!(mapl_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_2),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_3 {
    pub key_mem_type_id: hid_t,
    pub key: *const ::std::os::raw::c_void,
    pub value_mem_type_id: hid_t,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_map_args_t__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_map_args_t__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_map_args_t__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_map_args_t__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_map_args_t__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).key_mem_type_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_3),
            "::",
            stringify!(key_mem_type_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_3),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).value_mem_type_id) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_3),
            "::",
            stringify!(value_mem_type_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_3),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_4 {
    pub key_mem_type_id: hid_t,
    pub key: *const ::std::os::raw::c_void,
    pub exists: hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_map_args_t__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_map_args_t__bindgen_ty_4>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_map_args_t__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_map_args_t__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_map_args_t__bindgen_ty_4))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).key_mem_type_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_4),
            "::",
            stringify!(key_mem_type_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_4),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exists) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_4),
            "::",
            stringify!(exists)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_5 {
    pub key_mem_type_id: hid_t,
    pub key: *const ::std::os::raw::c_void,
    pub value_mem_type_id: hid_t,
    pub value: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_map_args_t__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_map_args_t__bindgen_ty_5>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_map_args_t__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_map_args_t__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_map_args_t__bindgen_ty_5))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).key_mem_type_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_5),
            "::",
            stringify!(key_mem_type_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_5),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).value_mem_type_id) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_5),
            "::",
            stringify!(value_mem_type_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_5),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_6 {
    pub get_type: H5VL_map_get_t,
    pub args: H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1 {
    pub get_mapl: H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1,
    pub get_mcpl: H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2,
    pub get_key_type: H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_3,
    pub get_val_type: H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_4,
    pub get_count: H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1 {
    pub mapl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapl_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(mapl_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2 {
    pub mcpl_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2
            )
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcpl_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2
            ),
            "::",
            stringify!(mcpl_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_3 {
    pub type_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_3(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_3
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_3,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_3
            )
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_3
            ),
            "::",
            stringify!(type_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_4 {
    pub type_id: hid_t,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_4(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_4,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_4,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_4
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_4,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_4
            )
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_4
            ),
            "::",
            stringify!(type_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_5 {
    pub count: hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_5(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_5,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_5,
        >(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_5
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_5,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_5
            )
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1__bindgen_ty_5
            ),
            "::",
            stringify!(count)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_mapl) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1),
            "::",
            stringify!(get_mapl)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_mcpl) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1),
            "::",
            stringify!(get_mcpl)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_key_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1),
            "::",
            stringify!(get_key_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_val_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1),
            "::",
            stringify!(get_val_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_count) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_6__bindgen_ty_1),
            "::",
            stringify!(get_count)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_map_args_t__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_map_args_t__bindgen_ty_6>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_map_args_t__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_map_args_t__bindgen_ty_6>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_map_args_t__bindgen_ty_6))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_6),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_6),
            "::",
            stringify!(args)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_7 {
    pub specific_type: H5VL_map_specific_t,
    pub args: H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1 {
    pub iterate: H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1,
    pub del: H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1 {
    pub loc_params: H5VL_loc_params_t,
    pub idx: hsize_t,
    pub key_mem_type_id: hid_t,
    pub op: H5M_iterate_t,
    pub op_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1,
        >(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1
            )
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_params) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(loc_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).key_mem_type_id) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(key_mem_type_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_data) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(op_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_2 {
    pub loc_params: H5VL_loc_params_t,
    pub key_mem_type_id: hid_t,
    pub key: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_2(
) {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_2,
        >(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_2
            )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_2,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_2
            )
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_params) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_2
            ),
            "::",
            stringify!(loc_params)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).key_mem_type_id) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_2
            ),
            "::",
            stringify!(key_mem_type_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(
                H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1__bindgen_ty_2
            ),
            "::",
            stringify!(key)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iterate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1),
            "::",
            stringify!(iterate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).del) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_7__bindgen_ty_1),
            "::",
            stringify!(del)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_map_args_t__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_map_args_t__bindgen_ty_7>(),
        80usize,
        concat!("Size of: ", stringify!(H5VL_map_args_t__bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_map_args_t__bindgen_ty_7>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_map_args_t__bindgen_ty_7))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specific_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_7),
            "::",
            stringify!(specific_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t__bindgen_ty_7),
            "::",
            stringify!(args)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_map_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_map_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_map_args_t>(),
        96usize,
        concat!("Size of: ", stringify!(H5VL_map_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_map_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_map_args_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t),
            "::",
            stringify!(get_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exists) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t),
            "::",
            stringify!(exists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t),
            "::",
            stringify!(put)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specific) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_map_args_t),
            "::",
            stringify!(specific)
        )
    );
}
pub type H5MM_allocate_t = ::std::option::Option<
    unsafe extern "C" fn(
        size: usize,
        alloc_info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type H5MM_free_t = ::std::option::Option<
    unsafe extern "C" fn(
        mem: *mut ::std::os::raw::c_void,
        free_info: *mut ::std::os::raw::c_void,
    ),
>;
pub const H5S_class_t_H5S_NO_CLASS: H5S_class_t = -1;
pub const H5S_class_t_H5S_SCALAR: H5S_class_t = 0;
pub const H5S_class_t_H5S_SIMPLE: H5S_class_t = 1;
pub const H5S_class_t_H5S_NULL: H5S_class_t = 2;
pub type H5S_class_t = ::std::os::raw::c_int;
pub const H5S_seloper_t_H5S_SELECT_NOOP: H5S_seloper_t = -1;
pub const H5S_seloper_t_H5S_SELECT_SET: H5S_seloper_t = 0;
pub const H5S_seloper_t_H5S_SELECT_OR: H5S_seloper_t = 1;
pub const H5S_seloper_t_H5S_SELECT_AND: H5S_seloper_t = 2;
pub const H5S_seloper_t_H5S_SELECT_XOR: H5S_seloper_t = 3;
pub const H5S_seloper_t_H5S_SELECT_NOTB: H5S_seloper_t = 4;
pub const H5S_seloper_t_H5S_SELECT_NOTA: H5S_seloper_t = 5;
pub const H5S_seloper_t_H5S_SELECT_APPEND: H5S_seloper_t = 6;
pub const H5S_seloper_t_H5S_SELECT_PREPEND: H5S_seloper_t = 7;
pub const H5S_seloper_t_H5S_SELECT_INVALID: H5S_seloper_t = 8;
pub type H5S_seloper_t = ::std::os::raw::c_int;
pub const H5S_sel_type_H5S_SEL_ERROR: H5S_sel_type = -1;
pub const H5S_sel_type_H5S_SEL_NONE: H5S_sel_type = 0;
pub const H5S_sel_type_H5S_SEL_POINTS: H5S_sel_type = 1;
pub const H5S_sel_type_H5S_SEL_HYPERSLABS: H5S_sel_type = 2;
pub const H5S_sel_type_H5S_SEL_ALL: H5S_sel_type = 3;
pub const H5S_sel_type_H5S_SEL_N: H5S_sel_type = 4;
pub type H5S_sel_type = ::std::os::raw::c_int;
extern "C" {
    pub fn H5Sclose(space_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Scombine_hyperslab(
        space_id: hid_t,
        op: H5S_seloper_t,
        start: *const hsize_t,
        stride: *const hsize_t,
        count: *const hsize_t,
        block: *const hsize_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Scombine_select(
        space1_id: hid_t,
        op: H5S_seloper_t,
        space2_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Scopy(space_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Screate(type_: H5S_class_t) -> hid_t;
}
extern "C" {
    pub fn H5Screate_simple(
        rank: ::std::os::raw::c_int,
        dims: *const hsize_t,
        maxdims: *const hsize_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Sdecode(buf: *const ::std::os::raw::c_void) -> hid_t;
}
extern "C" {
    pub fn H5Sencode2(
        obj_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
        nalloc: *mut usize,
        fapl: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Sextent_copy(dst_id: hid_t, src_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sextent_equal(space1_id: hid_t, space2_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Sget_regular_hyperslab(
        spaceid: hid_t,
        start: *mut hsize_t,
        stride: *mut hsize_t,
        count: *mut hsize_t,
        block: *mut hsize_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Sget_select_bounds(
        spaceid: hid_t,
        start: *mut hsize_t,
        end: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Sget_select_elem_npoints(spaceid: hid_t) -> hssize_t;
}
extern "C" {
    pub fn H5Sget_select_elem_pointlist(
        spaceid: hid_t,
        startpoint: hsize_t,
        numpoints: hsize_t,
        buf: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Sget_select_hyper_blocklist(
        spaceid: hid_t,
        startblock: hsize_t,
        numblocks: hsize_t,
        buf: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Sget_select_hyper_nblocks(spaceid: hid_t) -> hssize_t;
}
extern "C" {
    pub fn H5Sget_select_npoints(spaceid: hid_t) -> hssize_t;
}
extern "C" {
    pub fn H5Sget_select_type(spaceid: hid_t) -> H5S_sel_type;
}
extern "C" {
    pub fn H5Sget_simple_extent_dims(
        space_id: hid_t,
        dims: *mut hsize_t,
        maxdims: *mut hsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Sget_simple_extent_ndims(space_id: hid_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Sget_simple_extent_npoints(space_id: hid_t) -> hssize_t;
}
extern "C" {
    pub fn H5Sget_simple_extent_type(space_id: hid_t) -> H5S_class_t;
}
extern "C" {
    pub fn H5Sis_regular_hyperslab(spaceid: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Sis_simple(space_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Smodify_select(
        space1_id: hid_t,
        op: H5S_seloper_t,
        space2_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Soffset_simple(space_id: hid_t, offset: *const hssize_t)
        -> herr_t;
}
extern "C" {
    pub fn H5Ssel_iter_close(sel_iter_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Ssel_iter_create(
        spaceid: hid_t,
        elmt_size: usize,
        flags: ::std::os::raw::c_uint,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Ssel_iter_get_seq_list(
        sel_iter_id: hid_t,
        maxseq: usize,
        maxelmts: usize,
        nseq: *mut usize,
        nelmts: *mut usize,
        off: *mut hsize_t,
        len: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ssel_iter_reset(sel_iter_id: hid_t, space_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_adjust(spaceid: hid_t, offset: *const hssize_t) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_all(spaceid: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_copy(dst_id: hid_t, src_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_elements(
        space_id: hid_t,
        op: H5S_seloper_t,
        num_elem: usize,
        coord: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_hyperslab(
        space_id: hid_t,
        op: H5S_seloper_t,
        start: *const hsize_t,
        stride: *const hsize_t,
        count: *const hsize_t,
        block: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_intersect_block(
        space_id: hid_t,
        start: *const hsize_t,
        end: *const hsize_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Sselect_none(spaceid: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_project_intersection(
        src_space_id: hid_t,
        dst_space_id: hid_t,
        src_intersect_space_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Sselect_shape_same(space1_id: hid_t, space2_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Sselect_valid(spaceid: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Sset_extent_none(space_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sset_extent_simple(
        space_id: hid_t,
        rank: ::std::os::raw::c_int,
        dims: *const hsize_t,
        max: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Sencode1(
        obj_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
        nalloc: *mut usize,
    ) -> herr_t;
}
pub type H5Z_filter_t = ::std::os::raw::c_int;
pub const H5Z_SO_scale_type_t_H5Z_SO_FLOAT_DSCALE: H5Z_SO_scale_type_t = 0;
pub const H5Z_SO_scale_type_t_H5Z_SO_FLOAT_ESCALE: H5Z_SO_scale_type_t = 1;
pub const H5Z_SO_scale_type_t_H5Z_SO_INT: H5Z_SO_scale_type_t = 2;
pub type H5Z_SO_scale_type_t = ::std::os::raw::c_uint;
pub const H5Z_EDC_t_H5Z_ERROR_EDC: H5Z_EDC_t = -1;
pub const H5Z_EDC_t_H5Z_DISABLE_EDC: H5Z_EDC_t = 0;
pub const H5Z_EDC_t_H5Z_ENABLE_EDC: H5Z_EDC_t = 1;
pub const H5Z_EDC_t_H5Z_NO_EDC: H5Z_EDC_t = 2;
pub type H5Z_EDC_t = ::std::os::raw::c_int;
pub const H5Z_cb_return_t_H5Z_CB_ERROR: H5Z_cb_return_t = -1;
pub const H5Z_cb_return_t_H5Z_CB_FAIL: H5Z_cb_return_t = 0;
pub const H5Z_cb_return_t_H5Z_CB_CONT: H5Z_cb_return_t = 1;
pub const H5Z_cb_return_t_H5Z_CB_NO: H5Z_cb_return_t = 2;
pub type H5Z_cb_return_t = ::std::os::raw::c_int;
pub type H5Z_filter_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        filter: H5Z_filter_t,
        buf: *mut ::std::os::raw::c_void,
        buf_size: usize,
        op_data: *mut ::std::os::raw::c_void,
    ) -> H5Z_cb_return_t,
>;
extern "C" {
    pub fn H5Zfilter_avail(id: H5Z_filter_t) -> htri_t;
}
extern "C" {
    pub fn H5Zget_filter_info(
        filter: H5Z_filter_t,
        filter_config_flags: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
pub type H5P_cls_create_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        prop_id: hid_t,
        create_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5P_cls_copy_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        new_prop_id: hid_t,
        old_prop_id: hid_t,
        copy_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5P_cls_close_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        prop_id: hid_t,
        close_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5P_prp_cb1_t = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        size: usize,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5P_prp_cb2_t = ::std::option::Option<
    unsafe extern "C" fn(
        prop_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5P_prp_create_func_t = H5P_prp_cb1_t;
pub type H5P_prp_set_func_t = H5P_prp_cb2_t;
pub type H5P_prp_get_func_t = H5P_prp_cb2_t;
pub type H5P_prp_encode_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        buf: *mut *mut ::std::os::raw::c_void,
        size: *mut usize,
    ) -> herr_t,
>;
pub type H5P_prp_decode_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5P_prp_delete_func_t = H5P_prp_cb2_t;
pub type H5P_prp_copy_func_t = H5P_prp_cb1_t;
pub type H5P_prp_compare_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type H5P_prp_close_func_t = H5P_prp_cb1_t;
pub type H5P_iterate_t = ::std::option::Option<
    unsafe extern "C" fn(
        id: hid_t,
        name: *const ::std::os::raw::c_char,
        iter_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub const H5D_mpio_actual_chunk_opt_mode_t_H5D_MPIO_NO_CHUNK_OPTIMIZATION:
    H5D_mpio_actual_chunk_opt_mode_t = 0;
pub const H5D_mpio_actual_chunk_opt_mode_t_H5D_MPIO_LINK_CHUNK:
    H5D_mpio_actual_chunk_opt_mode_t = 1;
pub const H5D_mpio_actual_chunk_opt_mode_t_H5D_MPIO_MULTI_CHUNK:
    H5D_mpio_actual_chunk_opt_mode_t = 2;
pub type H5D_mpio_actual_chunk_opt_mode_t = ::std::os::raw::c_uint;
pub const H5D_mpio_actual_io_mode_t_H5D_MPIO_NO_COLLECTIVE:
    H5D_mpio_actual_io_mode_t = 0;
pub const H5D_mpio_actual_io_mode_t_H5D_MPIO_CHUNK_INDEPENDENT:
    H5D_mpio_actual_io_mode_t = 1;
pub const H5D_mpio_actual_io_mode_t_H5D_MPIO_CHUNK_COLLECTIVE:
    H5D_mpio_actual_io_mode_t = 2;
pub const H5D_mpio_actual_io_mode_t_H5D_MPIO_CHUNK_MIXED:
    H5D_mpio_actual_io_mode_t = 3;
pub const H5D_mpio_actual_io_mode_t_H5D_MPIO_CONTIGUOUS_COLLECTIVE:
    H5D_mpio_actual_io_mode_t = 4;
pub type H5D_mpio_actual_io_mode_t = ::std::os::raw::c_uint;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_COLLECTIVE:
    H5D_mpio_no_collective_cause_t = 0;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_SET_INDEPENDENT:
    H5D_mpio_no_collective_cause_t = 1;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_DATATYPE_CONVERSION:
    H5D_mpio_no_collective_cause_t = 2;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_DATA_TRANSFORMS:
    H5D_mpio_no_collective_cause_t = 4;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED : H5D_mpio_no_collective_cause_t = 8 ;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES : H5D_mpio_no_collective_cause_t = 16 ;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET : H5D_mpio_no_collective_cause_t = 32 ;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_PARALLEL_FILTERED_WRITES_DISABLED : H5D_mpio_no_collective_cause_t = 64 ;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_ERROR_WHILE_CHECKING_COLLECTIVE_POSSIBLE : H5D_mpio_no_collective_cause_t = 128 ;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_NO_SELECTION_IO:
    H5D_mpio_no_collective_cause_t = 256;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_NO_COLLECTIVE_MAX_CAUSE:
    H5D_mpio_no_collective_cause_t = 512;
pub type H5D_mpio_no_collective_cause_t = ::std::os::raw::c_uint;
pub const H5D_selection_io_mode_t_H5D_SELECTION_IO_MODE_DEFAULT:
    H5D_selection_io_mode_t = 0;
pub const H5D_selection_io_mode_t_H5D_SELECTION_IO_MODE_OFF:
    H5D_selection_io_mode_t = 1;
pub const H5D_selection_io_mode_t_H5D_SELECTION_IO_MODE_ON:
    H5D_selection_io_mode_t = 2;
pub type H5D_selection_io_mode_t = ::std::os::raw::c_uint;
extern "C" {
    pub static mut H5P_CLS_ROOT_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_OBJECT_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_FILE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_FILE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_DATASET_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_DATASET_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_DATASET_XFER_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_FILE_MOUNT_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_GROUP_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_GROUP_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_DATATYPE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_DATATYPE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_MAP_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_MAP_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_STRING_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_ATTRIBUTE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_ATTRIBUTE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_OBJECT_COPY_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_LINK_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_LINK_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_VOL_INITIALIZE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_REFERENCE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_FILE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_FILE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_DATASET_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_DATASET_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_DATASET_XFER_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_FILE_MOUNT_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_GROUP_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_GROUP_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_DATATYPE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_DATATYPE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_MAP_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_MAP_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_ATTRIBUTE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_ATTRIBUTE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_OBJECT_COPY_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_LINK_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_LINK_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_VOL_INITIALIZE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_REFERENCE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub fn H5Pclose(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pclose_class(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pcopy(plist_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pcopy_prop(
        dst_id: hid_t,
        src_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pcreate(cls_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pcreate_class(
        parent: hid_t,
        name: *const ::std::os::raw::c_char,
        create: H5P_cls_create_func_t,
        create_data: *mut ::std::os::raw::c_void,
        copy: H5P_cls_copy_func_t,
        copy_data: *mut ::std::os::raw::c_void,
        close: H5P_cls_close_func_t,
        close_data: *mut ::std::os::raw::c_void,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Pdecode(buf: *const ::std::os::raw::c_void) -> hid_t;
}
extern "C" {
    pub fn H5Pencode2(
        plist_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
        nalloc: *mut usize,
        fapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pequal(id1: hid_t, id2: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Pexist(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Pget(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_class(plist_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pget_class_name(pclass_id: hid_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn H5Pget_class_parent(pclass_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pget_nprops(id: hid_t, nprops: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5Pget_size(
        id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pinsert2(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        value: *mut ::std::os::raw::c_void,
        set: H5P_prp_set_func_t,
        get: H5P_prp_get_func_t,
        prp_del: H5P_prp_delete_func_t,
        copy: H5P_prp_copy_func_t,
        compare: H5P_prp_compare_func_t,
        close: H5P_prp_close_func_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pisa_class(plist_id: hid_t, pclass_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Piterate(
        id: hid_t,
        idx: *mut ::std::os::raw::c_int,
        iter_func: H5P_iterate_t,
        iter_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Pregister2(
        cls_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        def_value: *mut ::std::os::raw::c_void,
        create: H5P_prp_create_func_t,
        set: H5P_prp_set_func_t,
        get: H5P_prp_get_func_t,
        prp_del: H5P_prp_delete_func_t,
        copy: H5P_prp_copy_func_t,
        compare: H5P_prp_compare_func_t,
        close: H5P_prp_close_func_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Premove(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Punregister(
        pclass_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pall_filters_avail(plist_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Pget_attr_creation_order(
        plist_id: hid_t,
        crt_order_flags: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_attr_phase_change(
        plist_id: hid_t,
        max_compact: *mut ::std::os::raw::c_uint,
        min_dense: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_filter2(
        plist_id: hid_t,
        idx: ::std::os::raw::c_uint,
        flags: *mut ::std::os::raw::c_uint,
        cd_nelmts: *mut usize,
        cd_values: *mut ::std::os::raw::c_uint,
        namelen: usize,
        name: *mut ::std::os::raw::c_char,
        filter_config: *mut ::std::os::raw::c_uint,
    ) -> H5Z_filter_t;
}
extern "C" {
    pub fn H5Pget_filter_by_id2(
        plist_id: hid_t,
        filter_id: H5Z_filter_t,
        flags: *mut ::std::os::raw::c_uint,
        cd_nelmts: *mut usize,
        cd_values: *mut ::std::os::raw::c_uint,
        namelen: usize,
        name: *mut ::std::os::raw::c_char,
        filter_config: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_nfilters(plist_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Pget_obj_track_times(
        plist_id: hid_t,
        track_times: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pmodify_filter(
        plist_id: hid_t,
        filter: H5Z_filter_t,
        flags: ::std::os::raw::c_uint,
        cd_nelmts: usize,
        cd_values: *const ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Premove_filter(plist_id: hid_t, filter: H5Z_filter_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_attr_creation_order(
        plist_id: hid_t,
        crt_order_flags: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_attr_phase_change(
        plist_id: hid_t,
        max_compact: ::std::os::raw::c_uint,
        min_dense: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_deflate(
        plist_id: hid_t,
        level: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_filter(
        plist_id: hid_t,
        filter: H5Z_filter_t,
        flags: ::std::os::raw::c_uint,
        cd_nelmts: usize,
        c_values: *const ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fletcher32(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_obj_track_times(
        plist_id: hid_t,
        track_times: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_space_page_size(
        plist_id: hid_t,
        fsp_size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_space_strategy(
        plist_id: hid_t,
        strategy: *mut H5F_fspace_strategy_t,
        persist: *mut hbool_t,
        threshold: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_istore_k(
        plist_id: hid_t,
        ik: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_shared_mesg_index(
        plist_id: hid_t,
        index_num: ::std::os::raw::c_uint,
        mesg_type_flags: *mut ::std::os::raw::c_uint,
        min_mesg_size: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_shared_mesg_nindexes(
        plist_id: hid_t,
        nindexes: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_shared_mesg_phase_change(
        plist_id: hid_t,
        max_list: *mut ::std::os::raw::c_uint,
        min_btree: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_sizes(
        plist_id: hid_t,
        sizeof_addr: *mut usize,
        sizeof_size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_sym_k(
        plist_id: hid_t,
        ik: *mut ::std::os::raw::c_uint,
        lk: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_userblock(plist_id: hid_t, size: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_space_page_size(
        plist_id: hid_t,
        fsp_size: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_space_strategy(
        plist_id: hid_t,
        strategy: H5F_fspace_strategy_t,
        persist: hbool_t,
        threshold: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_istore_k(
        plist_id: hid_t,
        ik: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_shared_mesg_index(
        plist_id: hid_t,
        index_num: ::std::os::raw::c_uint,
        mesg_type_flags: ::std::os::raw::c_uint,
        min_mesg_size: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_shared_mesg_nindexes(
        plist_id: hid_t,
        nindexes: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_shared_mesg_phase_change(
        plist_id: hid_t,
        max_list: ::std::os::raw::c_uint,
        min_btree: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_sizes(
        plist_id: hid_t,
        sizeof_addr: usize,
        sizeof_size: usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_sym_k(
        plist_id: hid_t,
        ik: ::std::os::raw::c_uint,
        lk: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_userblock(plist_id: hid_t, size: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_alignment(
        fapl_id: hid_t,
        threshold: *mut hsize_t,
        alignment: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_cache(
        plist_id: hid_t,
        mdc_nelmts: *mut ::std::os::raw::c_int,
        rdcc_nslots: *mut usize,
        rdcc_nbytes: *mut usize,
        rdcc_w0: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_core_write_tracking(
        fapl_id: hid_t,
        is_enabled: *mut hbool_t,
        page_size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_driver(plist_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pget_driver_info(plist_id: hid_t)
        -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5Pget_driver_config_str(
        fapl_id: hid_t,
        config_buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pget_elink_file_cache_size(
        plist_id: hid_t,
        efc_size: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_evict_on_close(
        fapl_id: hid_t,
        evict_on_close: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_family_offset(fapl_id: hid_t, offset: *mut hsize_t)
        -> herr_t;
}
extern "C" {
    pub fn H5Pget_fclose_degree(
        fapl_id: hid_t,
        degree: *mut H5F_close_degree_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_image(
        fapl_id: hid_t,
        buf_ptr_ptr: *mut *mut ::std::os::raw::c_void,
        buf_len_ptr: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_image_callbacks(
        fapl_id: hid_t,
        callbacks_ptr: *mut H5FD_file_image_callbacks_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_locking(
        fapl_id: hid_t,
        use_file_locking: *mut hbool_t,
        ignore_when_disabled: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_gc_references(
        fapl_id: hid_t,
        gc_ref: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_libver_bounds(
        plist_id: hid_t,
        low: *mut H5F_libver_t,
        high: *mut H5F_libver_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mdc_config(
        plist_id: hid_t,
        config_ptr: *mut H5AC_cache_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mdc_image_config(
        plist_id: hid_t,
        config_ptr: *mut H5AC_cache_image_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mdc_log_options(
        plist_id: hid_t,
        is_enabled: *mut hbool_t,
        location: *mut ::std::os::raw::c_char,
        location_size: *mut usize,
        start_on_access: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_meta_block_size(fapl_id: hid_t, size: *mut hsize_t)
        -> herr_t;
}
extern "C" {
    pub fn H5Pget_metadata_read_attempts(
        plist_id: hid_t,
        attempts: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_multi_type(fapl_id: hid_t, type_: *mut H5FD_mem_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_object_flush_cb(
        plist_id: hid_t,
        func: *mut H5F_flush_cb_t,
        udata: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_page_buffer_size(
        plist_id: hid_t,
        buf_size: *mut usize,
        min_meta_perc: *mut ::std::os::raw::c_uint,
        min_raw_perc: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_sieve_buf_size(fapl_id: hid_t, size: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5Pget_small_data_block_size(
        fapl_id: hid_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_vol_id(plist_id: hid_t, vol_id: *mut hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_vol_info(
        plist_id: hid_t,
        vol_info: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_alignment(
        fapl_id: hid_t,
        threshold: hsize_t,
        alignment: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_cache(
        plist_id: hid_t,
        mdc_nelmts: ::std::os::raw::c_int,
        rdcc_nslots: usize,
        rdcc_nbytes: usize,
        rdcc_w0: f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_core_write_tracking(
        fapl_id: hid_t,
        is_enabled: hbool_t,
        page_size: usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_driver(
        plist_id: hid_t,
        driver_id: hid_t,
        driver_info: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_driver_by_name(
        plist_id: hid_t,
        driver_name: *const ::std::os::raw::c_char,
        driver_config: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_driver_by_value(
        plist_id: hid_t,
        driver_value: H5FD_class_value_t,
        driver_config: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_elink_file_cache_size(
        plist_id: hid_t,
        efc_size: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_evict_on_close(
        fapl_id: hid_t,
        evict_on_close: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_family_offset(fapl_id: hid_t, offset: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fclose_degree(
        fapl_id: hid_t,
        degree: H5F_close_degree_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_image(
        fapl_id: hid_t,
        buf_ptr: *mut ::std::os::raw::c_void,
        buf_len: usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_image_callbacks(
        fapl_id: hid_t,
        callbacks_ptr: *mut H5FD_file_image_callbacks_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_locking(
        fapl_id: hid_t,
        use_file_locking: hbool_t,
        ignore_when_disabled: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_gc_references(
        fapl_id: hid_t,
        gc_ref: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_libver_bounds(
        plist_id: hid_t,
        low: H5F_libver_t,
        high: H5F_libver_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_mdc_config(
        plist_id: hid_t,
        config_ptr: *mut H5AC_cache_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_mdc_log_options(
        plist_id: hid_t,
        is_enabled: hbool_t,
        location: *const ::std::os::raw::c_char,
        start_on_access: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_meta_block_size(fapl_id: hid_t, size: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_metadata_read_attempts(
        plist_id: hid_t,
        attempts: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_multi_type(fapl_id: hid_t, type_: H5FD_mem_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_object_flush_cb(
        plist_id: hid_t,
        func: H5F_flush_cb_t,
        udata: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_sieve_buf_size(fapl_id: hid_t, size: usize) -> herr_t;
}
extern "C" {
    pub fn H5Pset_small_data_block_size(
        fapl_id: hid_t,
        size: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_vol(
        plist_id: hid_t,
        new_vol_id: hid_t,
        new_vol_info: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_vol_cap_flags(plist_id: hid_t, cap_flags: *mut u64)
        -> herr_t;
}
extern "C" {
    pub fn H5Pset_all_coll_metadata_ops(
        plist_id: hid_t,
        is_collective: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_all_coll_metadata_ops(
        plist_id: hid_t,
        is_collective: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_coll_metadata_write(
        plist_id: hid_t,
        is_collective: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_coll_metadata_write(
        plist_id: hid_t,
        is_collective: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mpi_params(
        fapl_id: hid_t,
        comm: *mut MPI_Comm,
        info: *mut MPI_Info,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_mpi_params(
        fapl_id: hid_t,
        comm: MPI_Comm,
        info: MPI_Info,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_mdc_image_config(
        plist_id: hid_t,
        config_ptr: *mut H5AC_cache_image_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_page_buffer_size(
        plist_id: hid_t,
        buf_size: usize,
        min_meta_per: ::std::os::raw::c_uint,
        min_raw_per: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_relax_file_integrity_checks(
        plist_id: hid_t,
        flags: u64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_relax_file_integrity_checks(
        plist_id: hid_t,
        flags: *mut u64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pfill_value_defined(
        plist: hid_t,
        status: *mut H5D_fill_value_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_alloc_time(
        plist_id: hid_t,
        alloc_time: *mut H5D_alloc_time_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_chunk(
        plist_id: hid_t,
        max_ndims: ::std::os::raw::c_int,
        dim: *mut hsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Pget_chunk_opts(
        plist_id: hid_t,
        opts: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_dset_no_attrs_hint(
        dcpl_id: hid_t,
        minimize: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_external(
        plist_id: hid_t,
        idx: ::std::os::raw::c_uint,
        name_size: usize,
        name: *mut ::std::os::raw::c_char,
        offset: *mut off_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_external_count(plist_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Pget_fill_time(
        plist_id: hid_t,
        fill_time: *mut H5D_fill_time_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fill_value(
        plist_id: hid_t,
        type_id: hid_t,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_layout(plist_id: hid_t) -> H5D_layout_t;
}
extern "C" {
    pub fn H5Pget_virtual_count(dcpl_id: hid_t, count: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5Pget_virtual_dsetname(
        dcpl_id: hid_t,
        index: usize,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pget_virtual_filename(
        dcpl_id: hid_t,
        index: usize,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pget_virtual_srcspace(dcpl_id: hid_t, index: usize) -> hid_t;
}
extern "C" {
    pub fn H5Pget_virtual_vspace(dcpl_id: hid_t, index: usize) -> hid_t;
}
extern "C" {
    pub fn H5Pset_alloc_time(
        plist_id: hid_t,
        alloc_time: H5D_alloc_time_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_chunk(
        plist_id: hid_t,
        ndims: ::std::os::raw::c_int,
        dim: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_chunk_opts(
        plist_id: hid_t,
        opts: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_dset_no_attrs_hint(
        dcpl_id: hid_t,
        minimize: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_external(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
        offset: off_t,
        size: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fill_time(
        plist_id: hid_t,
        fill_time: H5D_fill_time_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fill_value(
        plist_id: hid_t,
        type_id: hid_t,
        value: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_shuffle(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_layout(plist_id: hid_t, layout: H5D_layout_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_nbit(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_scaleoffset(
        plist_id: hid_t,
        scale_type: H5Z_SO_scale_type_t,
        scale_factor: ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_szip(
        plist_id: hid_t,
        options_mask: ::std::os::raw::c_uint,
        pixels_per_block: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_virtual(
        dcpl_id: hid_t,
        vspace_id: hid_t,
        src_file_name: *const ::std::os::raw::c_char,
        src_dset_name: *const ::std::os::raw::c_char,
        src_space_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_append_flush(
        dapl_id: hid_t,
        dims: ::std::os::raw::c_uint,
        boundary: *mut hsize_t,
        func: *mut H5D_append_cb_t,
        udata: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_chunk_cache(
        dapl_id: hid_t,
        rdcc_nslots: *mut usize,
        rdcc_nbytes: *mut usize,
        rdcc_w0: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_efile_prefix(
        dapl_id: hid_t,
        prefix: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pget_virtual_prefix(
        dapl_id: hid_t,
        prefix: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pget_virtual_printf_gap(
        dapl_id: hid_t,
        gap_size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_virtual_view(
        dapl_id: hid_t,
        view: *mut H5D_vds_view_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_append_flush(
        dapl_id: hid_t,
        ndims: ::std::os::raw::c_uint,
        boundary: *const hsize_t,
        func: H5D_append_cb_t,
        udata: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_chunk_cache(
        dapl_id: hid_t,
        rdcc_nslots: usize,
        rdcc_nbytes: usize,
        rdcc_w0: f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_efile_prefix(
        dapl_id: hid_t,
        prefix: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_virtual_prefix(
        dapl_id: hid_t,
        prefix: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_virtual_printf_gap(
        dapl_id: hid_t,
        gap_size: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_virtual_view(dapl_id: hid_t, view: H5D_vds_view_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_btree_ratios(
        plist_id: hid_t,
        left: *mut f64,
        middle: *mut f64,
        right: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_buffer(
        plist_id: hid_t,
        tconv: *mut *mut ::std::os::raw::c_void,
        bkg: *mut *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn H5Pget_data_transform(
        plist_id: hid_t,
        expression: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pget_edc_check(plist_id: hid_t) -> H5Z_EDC_t;
}
extern "C" {
    pub fn H5Pget_hyper_vector_size(fapl_id: hid_t, size: *mut usize)
        -> herr_t;
}
extern "C" {
    pub fn H5Pget_preserve(plist_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Pget_type_conv_cb(
        dxpl_id: hid_t,
        op: *mut H5T_conv_except_func_t,
        operate_data: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_vlen_mem_manager(
        plist_id: hid_t,
        alloc_func: *mut H5MM_allocate_t,
        alloc_info: *mut *mut ::std::os::raw::c_void,
        free_func: *mut H5MM_free_t,
        free_info: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_btree_ratios(
        plist_id: hid_t,
        left: f64,
        middle: f64,
        right: f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_buffer(
        plist_id: hid_t,
        size: usize,
        tconv: *mut ::std::os::raw::c_void,
        bkg: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_data_transform(
        plist_id: hid_t,
        expression: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_edc_check(plist_id: hid_t, check: H5Z_EDC_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_filter_callback(
        plist_id: hid_t,
        func: H5Z_filter_func_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_hyper_vector_size(plist_id: hid_t, size: usize) -> herr_t;
}
extern "C" {
    pub fn H5Pset_preserve(plist_id: hid_t, status: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_type_conv_cb(
        dxpl_id: hid_t,
        op: H5T_conv_except_func_t,
        operate_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_vlen_mem_manager(
        plist_id: hid_t,
        alloc_func: H5MM_allocate_t,
        alloc_info: *mut ::std::os::raw::c_void,
        free_func: H5MM_free_t,
        free_info: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mpio_actual_chunk_opt_mode(
        plist_id: hid_t,
        actual_chunk_opt_mode: *mut H5D_mpio_actual_chunk_opt_mode_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mpio_actual_io_mode(
        plist_id: hid_t,
        actual_io_mode: *mut H5D_mpio_actual_io_mode_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mpio_no_collective_cause(
        plist_id: hid_t,
        local_no_collective_cause: *mut u32,
        global_no_collective_cause: *mut u32,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_dataset_io_hyperslab_selection(
        plist_id: hid_t,
        rank: ::std::os::raw::c_uint,
        op: H5S_seloper_t,
        start: *const hsize_t,
        stride: *const hsize_t,
        count: *const hsize_t,
        block: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_selection_io(
        plist_id: hid_t,
        selection_io_mode: H5D_selection_io_mode_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_selection_io(
        plist_id: hid_t,
        selection_io_mode: *mut H5D_selection_io_mode_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_no_selection_io_cause(
        plist_id: hid_t,
        no_selection_io_cause: *mut u32,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_actual_selection_io_mode(
        plist_id: hid_t,
        actual_selection_io_mode: *mut u32,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_modify_write_buf(
        plist_id: hid_t,
        modify_write_buf: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_modify_write_buf(
        plist_id: hid_t,
        modify_write_buf: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_create_intermediate_group(
        plist_id: hid_t,
        crt_intmd: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_create_intermediate_group(
        plist_id: hid_t,
        crt_intmd: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_est_link_info(
        plist_id: hid_t,
        est_num_entries: *mut ::std::os::raw::c_uint,
        est_name_len: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_link_creation_order(
        plist_id: hid_t,
        crt_order_flags: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_link_phase_change(
        plist_id: hid_t,
        max_compact: *mut ::std::os::raw::c_uint,
        min_dense: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_local_heap_size_hint(
        plist_id: hid_t,
        size_hint: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_est_link_info(
        plist_id: hid_t,
        est_num_entries: ::std::os::raw::c_uint,
        est_name_len: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_link_creation_order(
        plist_id: hid_t,
        crt_order_flags: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_link_phase_change(
        plist_id: hid_t,
        max_compact: ::std::os::raw::c_uint,
        min_dense: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_local_heap_size_hint(
        plist_id: hid_t,
        size_hint: usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_char_encoding(
        plist_id: hid_t,
        encoding: *mut H5T_cset_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_char_encoding(
        plist_id: hid_t,
        encoding: H5T_cset_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_elink_acc_flags(
        lapl_id: hid_t,
        flags: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_elink_cb(
        lapl_id: hid_t,
        func: *mut H5L_elink_traverse_t,
        op_data: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_elink_fapl(lapl_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pget_elink_prefix(
        plist_id: hid_t,
        prefix: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pget_nlinks(plist_id: hid_t, nlinks: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5Pset_elink_acc_flags(
        lapl_id: hid_t,
        flags: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_elink_cb(
        lapl_id: hid_t,
        func: H5L_elink_traverse_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_elink_fapl(lapl_id: hid_t, fapl_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_elink_prefix(
        plist_id: hid_t,
        prefix: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_nlinks(plist_id: hid_t, nlinks: usize) -> herr_t;
}
extern "C" {
    pub fn H5Padd_merge_committed_dtype_path(
        plist_id: hid_t,
        path: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pfree_merge_committed_dtype_paths(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_copy_object(
        plist_id: hid_t,
        copy_options: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mcdt_search_cb(
        plist_id: hid_t,
        func: *mut H5O_mcdt_search_cb_t,
        op_data: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_copy_object(
        plist_id: hid_t,
        copy_options: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_mcdt_search_cb(
        plist_id: hid_t,
        func: H5O_mcdt_search_cb_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pregister1(
        cls_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        def_value: *mut ::std::os::raw::c_void,
        prp_create: H5P_prp_create_func_t,
        prp_set: H5P_prp_set_func_t,
        prp_get: H5P_prp_get_func_t,
        prp_del: H5P_prp_delete_func_t,
        prp_copy: H5P_prp_copy_func_t,
        prp_close: H5P_prp_close_func_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pinsert1(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        value: *mut ::std::os::raw::c_void,
        prp_set: H5P_prp_set_func_t,
        prp_get: H5P_prp_get_func_t,
        prp_delete: H5P_prp_delete_func_t,
        prp_copy: H5P_prp_copy_func_t,
        prp_close: H5P_prp_close_func_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pencode1(
        plist_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
        nalloc: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_filter1(
        plist_id: hid_t,
        filter: ::std::os::raw::c_uint,
        flags: *mut ::std::os::raw::c_uint,
        cd_nelmts: *mut usize,
        cd_values: *mut ::std::os::raw::c_uint,
        namelen: usize,
        name: *mut ::std::os::raw::c_char,
    ) -> H5Z_filter_t;
}
extern "C" {
    pub fn H5Pget_filter_by_id1(
        plist_id: hid_t,
        id: H5Z_filter_t,
        flags: *mut ::std::os::raw::c_uint,
        cd_nelmts: *mut usize,
        cd_values: *mut ::std::os::raw::c_uint,
        namelen: usize,
        name: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_version(
        plist_id: hid_t,
        boot: *mut ::std::os::raw::c_uint,
        freelist: *mut ::std::os::raw::c_uint,
        stab: *mut ::std::os::raw::c_uint,
        shhdr: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_space(
        plist_id: hid_t,
        strategy: H5F_file_space_type_t,
        threshold: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_space(
        plist_id: hid_t,
        strategy: *mut H5F_file_space_type_t,
        threshold: *mut hsize_t,
    ) -> herr_t;
}
pub const H5PL_type_t_H5PL_TYPE_ERROR: H5PL_type_t = -1;
pub const H5PL_type_t_H5PL_TYPE_FILTER: H5PL_type_t = 0;
pub const H5PL_type_t_H5PL_TYPE_VOL: H5PL_type_t = 1;
pub const H5PL_type_t_H5PL_TYPE_VFD: H5PL_type_t = 2;
pub const H5PL_type_t_H5PL_TYPE_NONE: H5PL_type_t = 3;
pub type H5PL_type_t = ::std::os::raw::c_int;
extern "C" {
    pub fn H5PLset_loading_state(
        plugin_control_mask: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5PLget_loading_state(
        plugin_control_mask: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5PLappend(search_path: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5PLprepend(search_path: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5PLreplace(
        search_path: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5PLinsert(
        search_path: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5PLremove(index: ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5PLget(
        index: ::std::os::raw::c_uint,
        path_buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5PLsize(num_paths: *mut ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5ESinsert_request(
        es_id: hid_t,
        connector_id: hid_t,
        request: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5ESget_requests(
        es_id: hid_t,
        order: H5_iter_order_t,
        connector_ids: *mut hid_t,
        requests: *mut *mut ::std::os::raw::c_void,
        array_len: usize,
        count: *mut usize,
    ) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_class_t {
    pub version: ::std::os::raw::c_uint,
    pub value: H5FD_class_value_t,
    pub name: *const ::std::os::raw::c_char,
    pub maxaddr: haddr_t,
    pub fc_degree: H5F_close_degree_t,
    pub terminate: ::std::option::Option<unsafe extern "C" fn() -> herr_t>,
    pub sb_size: ::std::option::Option<
        unsafe extern "C" fn(file: *mut H5FD_t) -> hsize_t,
    >,
    pub sb_encode: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            name: *mut ::std::os::raw::c_char,
            p: *mut ::std::os::raw::c_uchar,
        ) -> herr_t,
    >,
    pub sb_decode: ::std::option::Option<
        unsafe extern "C" fn(
            f: *mut H5FD_t,
            name: *const ::std::os::raw::c_char,
            p: *const ::std::os::raw::c_uchar,
        ) -> herr_t,
    >,
    pub fapl_size: usize,
    pub fapl_get: ::std::option::Option<
        unsafe extern "C" fn(file: *mut H5FD_t) -> *mut ::std::os::raw::c_void,
    >,
    pub fapl_copy: ::std::option::Option<
        unsafe extern "C" fn(
            fapl: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub fapl_free: ::std::option::Option<
        unsafe extern "C" fn(fapl: *mut ::std::os::raw::c_void) -> herr_t,
    >,
    pub dxpl_size: usize,
    pub dxpl_copy: ::std::option::Option<
        unsafe extern "C" fn(
            dxpl: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub dxpl_free: ::std::option::Option<
        unsafe extern "C" fn(dxpl: *mut ::std::os::raw::c_void) -> herr_t,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_uint,
            fapl: hid_t,
            maxaddr: haddr_t,
        ) -> *mut H5FD_t,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(file: *mut H5FD_t) -> herr_t,
    >,
    pub cmp: ::std::option::Option<
        unsafe extern "C" fn(
            f1: *const H5FD_t,
            f2: *const H5FD_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub query: ::std::option::Option<
        unsafe extern "C" fn(
            f1: *const H5FD_t,
            flags: *mut ::std::os::raw::c_ulong,
        ) -> herr_t,
    >,
    pub get_type_map: ::std::option::Option<
        unsafe extern "C" fn(
            file: *const H5FD_t,
            type_map: *mut H5FD_mem_t,
        ) -> herr_t,
    >,
    pub alloc: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            type_: H5FD_mem_t,
            dxpl_id: hid_t,
            size: hsize_t,
        ) -> haddr_t,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            type_: H5FD_mem_t,
            dxpl_id: hid_t,
            addr: haddr_t,
            size: hsize_t,
        ) -> herr_t,
    >,
    pub get_eoa: ::std::option::Option<
        unsafe extern "C" fn(file: *const H5FD_t, type_: H5FD_mem_t) -> haddr_t,
    >,
    pub set_eoa: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            type_: H5FD_mem_t,
            addr: haddr_t,
        ) -> herr_t,
    >,
    pub get_eof: ::std::option::Option<
        unsafe extern "C" fn(file: *const H5FD_t, type_: H5FD_mem_t) -> haddr_t,
    >,
    pub get_handle: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            fapl: hid_t,
            file_handle: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            type_: H5FD_mem_t,
            dxpl: hid_t,
            addr: haddr_t,
            size: usize,
            buffer: *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            type_: H5FD_mem_t,
            dxpl: hid_t,
            addr: haddr_t,
            size: usize,
            buffer: *const ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub read_vector: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            dxpl: hid_t,
            count: u32,
            types: *mut H5FD_mem_t,
            addrs: *mut haddr_t,
            sizes: *mut usize,
            bufs: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub write_vector: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            dxpl: hid_t,
            count: u32,
            types: *mut H5FD_mem_t,
            addrs: *mut haddr_t,
            sizes: *mut usize,
            bufs: *mut *const ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub read_selection: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            type_: H5FD_mem_t,
            dxpl_id: hid_t,
            count: usize,
            mem_spaces: *mut hid_t,
            file_spaces: *mut hid_t,
            offsets: *mut haddr_t,
            element_sizes: *mut usize,
            bufs: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub write_selection: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            type_: H5FD_mem_t,
            dxpl_id: hid_t,
            count: usize,
            mem_spaces: *mut hid_t,
            file_spaces: *mut hid_t,
            offsets: *mut haddr_t,
            element_sizes: *mut usize,
            bufs: *mut *const ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            dxpl_id: hid_t,
            closing: hbool_t,
        ) -> herr_t,
    >,
    pub truncate: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            dxpl_id: hid_t,
            closing: hbool_t,
        ) -> herr_t,
    >,
    pub lock: ::std::option::Option<
        unsafe extern "C" fn(file: *mut H5FD_t, rw: hbool_t) -> herr_t,
    >,
    pub unlock: ::std::option::Option<
        unsafe extern "C" fn(file: *mut H5FD_t) -> herr_t,
    >,
    pub del: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            fapl: hid_t,
        ) -> herr_t,
    >,
    pub ctl: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            op_code: u64,
            flags: u64,
            input: *const ::std::os::raw::c_void,
            output: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub fl_map: [H5FD_mem_t; 7usize],
}
#[test]
fn bindgen_test_layout_H5FD_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5FD_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5FD_class_t>(),
        336usize,
        concat!("Size of: ", stringify!(H5FD_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5FD_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5FD_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxaddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(maxaddr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fc_degree) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(fc_degree)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).terminate) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(terminate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(sb_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sb_encode) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(sb_encode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sb_decode) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(sb_decode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fapl_size) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(fapl_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fapl_get) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(fapl_get)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fapl_copy) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(fapl_copy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fapl_free) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(fapl_free)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dxpl_size) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(dxpl_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dxpl_copy) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(dxpl_copy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dxpl_free) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(dxpl_free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_type_map) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(get_type_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_eoa) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(get_eoa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_eoa) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(set_eoa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_eof) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(get_eof)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_handle) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(get_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).read_vector) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(read_vector)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).write_vector) as usize - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(write_vector)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).read_selection) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(read_selection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).write_selection) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(write_selection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).truncate) as usize - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlock) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(unlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).del) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(del)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctl) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(ctl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fl_map) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_class_t),
            "::",
            stringify!(fl_map)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_free_t {
    pub addr: haddr_t,
    pub size: hsize_t,
    pub next: *mut H5FD_free_t,
}
#[test]
fn bindgen_test_layout_H5FD_free_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5FD_free_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5FD_free_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5FD_free_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5FD_free_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5FD_free_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_free_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_free_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_free_t),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_t {
    pub driver_id: hid_t,
    pub cls: *const H5FD_class_t,
    pub fileno: ::std::os::raw::c_ulong,
    pub access_flags: ::std::os::raw::c_uint,
    pub feature_flags: ::std::os::raw::c_ulong,
    pub maxaddr: haddr_t,
    pub base_addr: haddr_t,
    pub threshold: hsize_t,
    pub alignment: hsize_t,
    pub paged_aggr: hbool_t,
}
#[test]
fn bindgen_test_layout_H5FD_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5FD_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5FD_t>(),
        80usize,
        concat!("Size of: ", stringify!(H5FD_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5FD_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5FD_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).driver_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_t),
            "::",
            stringify!(driver_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cls) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(H5FD_t), "::", stringify!(cls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileno) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_t),
            "::",
            stringify!(fileno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).access_flags) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_t),
            "::",
            stringify!(access_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).feature_flags) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_t),
            "::",
            stringify!(feature_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxaddr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_t),
            "::",
            stringify!(maxaddr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).base_addr) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_t),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).threshold) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_t),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_t),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).paged_aggr) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_t),
            "::",
            stringify!(paged_aggr)
        )
    );
}
pub type H5FD_init_t = ::std::option::Option<unsafe extern "C" fn() -> hid_t>;
extern "C" {
    pub fn H5FDperform_init(op: H5FD_init_t) -> hid_t;
}
extern "C" {
    pub fn H5FDregister(cls: *const H5FD_class_t) -> hid_t;
}
extern "C" {
    pub fn H5FDis_driver_registered_by_name(
        driver_name: *const ::std::os::raw::c_char,
    ) -> htri_t;
}
extern "C" {
    pub fn H5FDis_driver_registered_by_value(
        driver_value: H5FD_class_value_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5FDunregister(driver_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5FDopen(
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        fapl_id: hid_t,
        maxaddr: haddr_t,
    ) -> *mut H5FD_t;
}
extern "C" {
    pub fn H5FDclose(file: *mut H5FD_t) -> herr_t;
}
extern "C" {
    pub fn H5FDcmp(
        f1: *const H5FD_t,
        f2: *const H5FD_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5FDquery(
        f: *const H5FD_t,
        flags: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5FDalloc(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        size: hsize_t,
    ) -> haddr_t;
}
extern "C" {
    pub fn H5FDfree(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        addr: haddr_t,
        size: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDget_eoa(file: *mut H5FD_t, type_: H5FD_mem_t) -> haddr_t;
}
extern "C" {
    pub fn H5FDset_eoa(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        eoa: haddr_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDget_eof(file: *mut H5FD_t, type_: H5FD_mem_t) -> haddr_t;
}
extern "C" {
    pub fn H5FDget_vfd_handle(
        file: *mut H5FD_t,
        fapl: hid_t,
        file_handle: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDread(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        addr: haddr_t,
        size: usize,
        buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDwrite(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        addr: haddr_t,
        size: usize,
        buf: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDread_vector(
        file: *mut H5FD_t,
        dxpl_id: hid_t,
        count: u32,
        types: *mut H5FD_mem_t,
        addrs: *mut haddr_t,
        sizes: *mut usize,
        bufs: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDwrite_vector(
        file: *mut H5FD_t,
        dxpl_id: hid_t,
        count: u32,
        types: *mut H5FD_mem_t,
        addrs: *mut haddr_t,
        sizes: *mut usize,
        bufs: *mut *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDread_selection(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        count: u32,
        mem_spaces: *mut hid_t,
        file_spaces: *mut hid_t,
        offsets: *mut haddr_t,
        element_sizes: *mut usize,
        bufs: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDwrite_selection(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        count: u32,
        mem_spaces: *mut hid_t,
        file_spaces: *mut hid_t,
        offsets: *mut haddr_t,
        element_sizes: *mut usize,
        bufs: *mut *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDread_vector_from_selection(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        count: u32,
        mem_spaces: *mut hid_t,
        file_spaces: *mut hid_t,
        offsets: *mut haddr_t,
        element_sizes: *mut usize,
        bufs: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDwrite_vector_from_selection(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        count: u32,
        mem_spaces: *mut hid_t,
        file_spaces: *mut hid_t,
        offsets: *mut haddr_t,
        element_sizes: *mut usize,
        bufs: *mut *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDread_from_selection(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        count: u32,
        mem_space_ids: *mut hid_t,
        file_space_ids: *mut hid_t,
        offsets: *mut haddr_t,
        element_sizes: *mut usize,
        bufs: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDwrite_from_selection(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        count: u32,
        mem_space_ids: *mut hid_t,
        file_space_ids: *mut hid_t,
        offsets: *mut haddr_t,
        element_sizes: *mut usize,
        bufs: *mut *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDflush(
        file: *mut H5FD_t,
        dxpl_id: hid_t,
        closing: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDtruncate(
        file: *mut H5FD_t,
        dxpl_id: hid_t,
        closing: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDlock(file: *mut H5FD_t, rw: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5FDunlock(file: *mut H5FD_t) -> herr_t;
}
extern "C" {
    pub fn H5FDdelete(
        name: *const ::std::os::raw::c_char,
        fapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDctl(
        file: *mut H5FD_t,
        op_code: u64,
        flags: u64,
        input: *const ::std::os::raw::c_void,
        output: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
pub type H5I_future_realize_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        future_object: *mut ::std::os::raw::c_void,
        actual_object_id: *mut hid_t,
    ) -> herr_t,
>;
pub type H5I_future_discard_func_t = ::std::option::Option<
    unsafe extern "C" fn(future_object: *mut ::std::os::raw::c_void) -> herr_t,
>;
extern "C" {
    pub fn H5Iregister_future(
        type_: H5I_type_t,
        object: *const ::std::os::raw::c_void,
        realize_cb: H5I_future_realize_func_t,
        discard_cb: H5I_future_discard_func_t,
    ) -> hid_t;
}
pub type H5L_create_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        link_name: *const ::std::os::raw::c_char,
        loc_group: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
        lcpl_id: hid_t,
    ) -> herr_t,
>;
pub type H5L_move_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        new_name: *const ::std::os::raw::c_char,
        new_loc: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
    ) -> herr_t,
>;
pub type H5L_copy_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        new_name: *const ::std::os::raw::c_char,
        new_loc: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
    ) -> herr_t,
>;
pub type H5L_traverse_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        link_name: *const ::std::os::raw::c_char,
        cur_group: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
        lapl_id: hid_t,
        dxpl_id: hid_t,
    ) -> hid_t,
>;
pub type H5L_delete_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        link_name: *const ::std::os::raw::c_char,
        file: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
    ) -> herr_t,
>;
pub type H5L_query_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        link_name: *const ::std::os::raw::c_char,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
        buf: *mut ::std::os::raw::c_void,
        buf_size: usize,
    ) -> isize,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5L_class_t {
    pub version: ::std::os::raw::c_int,
    pub id: H5L_type_t,
    pub comment: *const ::std::os::raw::c_char,
    pub create_func: H5L_create_func_t,
    pub move_func: H5L_move_func_t,
    pub copy_func: H5L_copy_func_t,
    pub trav_func: H5L_traverse_func_t,
    pub del_func: H5L_delete_func_t,
    pub query_func: H5L_query_func_t,
}
#[test]
fn bindgen_test_layout_H5L_class_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5L_class_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5L_class_t>(),
        64usize,
        concat!("Size of: ", stringify!(H5L_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5L_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5L_class_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).create_func) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_t),
            "::",
            stringify!(create_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).move_func) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_t),
            "::",
            stringify!(move_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copy_func) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_t),
            "::",
            stringify!(copy_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).trav_func) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_t),
            "::",
            stringify!(trav_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).del_func) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_t),
            "::",
            stringify!(del_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).query_func) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_t),
            "::",
            stringify!(query_func)
        )
    );
}
extern "C" {
    pub fn H5Lregister(cls: *const H5L_class_t) -> herr_t;
}
extern "C" {
    pub fn H5Lunregister(id: H5L_type_t) -> herr_t;
}
pub type H5L_traverse_0_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        link_name: *const ::std::os::raw::c_char,
        cur_group: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
        lapl_id: hid_t,
    ) -> hid_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5L_class_0_t {
    pub version: ::std::os::raw::c_int,
    pub id: H5L_type_t,
    pub comment: *const ::std::os::raw::c_char,
    pub create_func: H5L_create_func_t,
    pub move_func: H5L_move_func_t,
    pub copy_func: H5L_copy_func_t,
    pub trav_func: H5L_traverse_0_func_t,
    pub del_func: H5L_delete_func_t,
    pub query_func: H5L_query_func_t,
}
#[test]
fn bindgen_test_layout_H5L_class_0_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5L_class_0_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5L_class_0_t>(),
        64usize,
        concat!("Size of: ", stringify!(H5L_class_0_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5L_class_0_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5L_class_0_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_0_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_0_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_0_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).create_func) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_0_t),
            "::",
            stringify!(create_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).move_func) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_0_t),
            "::",
            stringify!(move_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copy_func) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_0_t),
            "::",
            stringify!(copy_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).trav_func) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_0_t),
            "::",
            stringify!(trav_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).del_func) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_0_t),
            "::",
            stringify!(del_func)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).query_func) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5L_class_0_t),
            "::",
            stringify!(query_func)
        )
    );
}
pub const H5T_cmd_t_H5T_CONV_INIT: H5T_cmd_t = 0;
pub const H5T_cmd_t_H5T_CONV_CONV: H5T_cmd_t = 1;
pub const H5T_cmd_t_H5T_CONV_FREE: H5T_cmd_t = 2;
pub type H5T_cmd_t = ::std::os::raw::c_uint;
pub const H5T_bkg_t_H5T_BKG_NO: H5T_bkg_t = 0;
pub const H5T_bkg_t_H5T_BKG_TEMP: H5T_bkg_t = 1;
pub const H5T_bkg_t_H5T_BKG_YES: H5T_bkg_t = 2;
pub type H5T_bkg_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5T_cdata_t {
    pub command: H5T_cmd_t,
    pub need_bkg: H5T_bkg_t,
    pub recalc: hbool_t,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5T_cdata_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5T_cdata_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5T_cdata_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5T_cdata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5T_cdata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5T_cdata_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5T_cdata_t),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).need_bkg) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5T_cdata_t),
            "::",
            stringify!(need_bkg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recalc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5T_cdata_t),
            "::",
            stringify!(recalc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priv_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5T_cdata_t),
            "::",
            stringify!(priv_)
        )
    );
}
pub const H5T_pers_t_H5T_PERS_DONTCARE: H5T_pers_t = -1;
pub const H5T_pers_t_H5T_PERS_HARD: H5T_pers_t = 0;
pub const H5T_pers_t_H5T_PERS_SOFT: H5T_pers_t = 1;
pub type H5T_pers_t = ::std::os::raw::c_int;
pub type H5T_conv_t = ::std::option::Option<
    unsafe extern "C" fn(
        src_id: hid_t,
        dst_id: hid_t,
        cdata: *mut H5T_cdata_t,
        nelmts: usize,
        buf_stride: usize,
        bkg_stride: usize,
        buf: *mut ::std::os::raw::c_void,
        bkg: *mut ::std::os::raw::c_void,
        dset_xfer_plist: hid_t,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Tregister(
        pers: H5T_pers_t,
        name: *const ::std::os::raw::c_char,
        src_id: hid_t,
        dst_id: hid_t,
        func: H5T_conv_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tunregister(
        pers: H5T_pers_t,
        name: *const ::std::os::raw::c_char,
        src_id: hid_t,
        dst_id: hid_t,
        func: H5T_conv_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tfind(
        src_id: hid_t,
        dst_id: hid_t,
        pcdata: *mut *mut H5T_cdata_t,
    ) -> H5T_conv_t;
}
extern "C" {
    pub fn H5Tcompiler_conv(src_id: hid_t, dst_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5TSmutex_acquire(
        lock_count: ::std::os::raw::c_uint,
        acquired: *mut bool,
    ) -> herr_t;
}
extern "C" {
    pub fn H5TSmutex_release(lock_count: *mut ::std::os::raw::c_uint)
        -> herr_t;
}
extern "C" {
    pub fn H5TSmutex_get_attempt_count(
        count: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5Z_cb_t {
    pub func: H5Z_filter_func_t,
    pub op_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5Z_cb_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5Z_cb_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5Z_cb_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5Z_cb_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5Z_cb_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5Z_cb_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_cb_t),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_cb_t),
            "::",
            stringify!(op_data)
        )
    );
}
pub type H5Z_can_apply_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        dcpl_id: hid_t,
        type_id: hid_t,
        space_id: hid_t,
    ) -> htri_t,
>;
pub type H5Z_set_local_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        dcpl_id: hid_t,
        type_id: hid_t,
        space_id: hid_t,
    ) -> herr_t,
>;
pub type H5Z_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        flags: ::std::os::raw::c_uint,
        cd_nelmts: usize,
        cd_values: *const ::std::os::raw::c_uint,
        nbytes: usize,
        buf_size: *mut usize,
        buf: *mut *mut ::std::os::raw::c_void,
    ) -> usize,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5Z_class2_t {
    pub version: ::std::os::raw::c_int,
    pub id: H5Z_filter_t,
    pub encoder_present: ::std::os::raw::c_uint,
    pub decoder_present: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
    pub can_apply: H5Z_can_apply_func_t,
    pub set_local: H5Z_set_local_func_t,
    pub filter: H5Z_func_t,
}
#[test]
fn bindgen_test_layout_H5Z_class2_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5Z_class2_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5Z_class2_t>(),
        48usize,
        concat!("Size of: ", stringify!(H5Z_class2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5Z_class2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5Z_class2_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class2_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class2_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).encoder_present) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class2_t),
            "::",
            stringify!(encoder_present)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).decoder_present) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class2_t),
            "::",
            stringify!(decoder_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class2_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).can_apply) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class2_t),
            "::",
            stringify!(can_apply)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).set_local) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class2_t),
            "::",
            stringify!(set_local)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class2_t),
            "::",
            stringify!(filter)
        )
    );
}
extern "C" {
    pub fn H5Zregister(cls: *const ::std::os::raw::c_void) -> herr_t;
}
extern "C" {
    pub fn H5Zunregister(id: H5Z_filter_t) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5Z_class1_t {
    pub id: H5Z_filter_t,
    pub name: *const ::std::os::raw::c_char,
    pub can_apply: H5Z_can_apply_func_t,
    pub set_local: H5Z_set_local_func_t,
    pub filter: H5Z_func_t,
}
#[test]
fn bindgen_test_layout_H5Z_class1_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5Z_class1_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5Z_class1_t>(),
        40usize,
        concat!("Size of: ", stringify!(H5Z_class1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5Z_class1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5Z_class1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class1_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class1_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).can_apply) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class1_t),
            "::",
            stringify!(can_apply)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).set_local) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class1_t),
            "::",
            stringify!(set_local)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5Z_class1_t),
            "::",
            stringify!(filter)
        )
    );
}
extern "C" {
    pub fn H5VLcmp_connector_cls(
        cmp: *mut ::std::os::raw::c_int,
        connector_id1: hid_t,
        connector_id2: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLwrap_register(
        obj: *mut ::std::os::raw::c_void,
        type_: H5I_type_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5VLretrieve_lib_state(
        state: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLstart_lib_state() -> herr_t;
}
extern "C" {
    pub fn H5VLrestore_lib_state(
        state: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLfinish_lib_state() -> herr_t;
}
extern "C" {
    pub fn H5VLfree_lib_state(state: *mut ::std::os::raw::c_void) -> herr_t;
}
extern "C" {
    pub fn H5VLget_object(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLget_wrap_ctx(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        wrap_ctx: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLwrap_object(
        obj: *mut ::std::os::raw::c_void,
        obj_type: H5I_type_t,
        connector_id: hid_t,
        wrap_ctx: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLunwrap_object(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLfree_wrap_ctx(
        wrap_ctx: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLinitialize(connector_id: hid_t, vipl_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5VLterminate(connector_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5VLget_cap_flags(
        connector_id: hid_t,
        cap_flags: *mut u64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLget_value(
        connector_id: hid_t,
        conn_value: *mut H5VL_class_value_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLcopy_connector_info(
        connector_id: hid_t,
        dst_vol_info: *mut *mut ::std::os::raw::c_void,
        src_vol_info: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLcmp_connector_info(
        cmp: *mut ::std::os::raw::c_int,
        connector_id: hid_t,
        info1: *const ::std::os::raw::c_void,
        info2: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLfree_connector_info(
        connector_id: hid_t,
        vol_info: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLconnector_info_to_str(
        info: *const ::std::os::raw::c_void,
        connector_id: hid_t,
        str_: *mut *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLconnector_str_to_info(
        str_: *const ::std::os::raw::c_char,
        connector_id: hid_t,
        info: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLattr_create(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        acpl_id: hid_t,
        aapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLattr_open(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        name: *const ::std::os::raw::c_char,
        aapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLattr_read(
        attr: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        dtype_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLattr_write(
        attr: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        dtype_id: hid_t,
        buf: *const ::std::os::raw::c_void,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLattr_get(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_attr_get_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLattr_specific(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        args: *mut H5VL_attr_specific_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLattr_optional(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLattr_close(
        attr: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdataset_create(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        type_id: hid_t,
        space_id: hid_t,
        dcpl_id: hid_t,
        dapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLdataset_open(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        name: *const ::std::os::raw::c_char,
        dapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLdataset_read(
        count: usize,
        dset: *mut *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        mem_type_id: *mut hid_t,
        mem_space_id: *mut hid_t,
        file_space_id: *mut hid_t,
        plist_id: hid_t,
        buf: *mut *mut ::std::os::raw::c_void,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdataset_write(
        count: usize,
        dset: *mut *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        mem_type_id: *mut hid_t,
        mem_space_id: *mut hid_t,
        file_space_id: *mut hid_t,
        plist_id: hid_t,
        buf: *mut *const ::std::os::raw::c_void,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdataset_get(
        dset: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_dataset_get_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdataset_specific(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_dataset_specific_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdataset_optional(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdataset_close(
        dset: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdatatype_commit(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        lcpl_id: hid_t,
        tcpl_id: hid_t,
        tapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLdatatype_open(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        name: *const ::std::os::raw::c_char,
        tapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLdatatype_get(
        dt: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_datatype_get_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdatatype_specific(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_datatype_specific_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdatatype_optional(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLdatatype_close(
        dt: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLfile_create(
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        fcpl_id: hid_t,
        fapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLfile_open(
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        fapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLfile_get(
        file: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_file_get_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLfile_specific(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_file_specific_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLfile_optional(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLfile_close(
        file: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLgroup_create(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        gcpl_id: hid_t,
        gapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLgroup_open(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        name: *const ::std::os::raw::c_char,
        gapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLgroup_get(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_group_get_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLgroup_specific(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_group_specific_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLgroup_optional(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLgroup_close(
        grp: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLlink_create(
        args: *mut H5VL_link_create_args_t,
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        lcpl_id: hid_t,
        lapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLlink_copy(
        src_obj: *mut ::std::os::raw::c_void,
        loc_params1: *const H5VL_loc_params_t,
        dst_obj: *mut ::std::os::raw::c_void,
        loc_params2: *const H5VL_loc_params_t,
        connector_id: hid_t,
        lcpl_id: hid_t,
        lapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLlink_move(
        src_obj: *mut ::std::os::raw::c_void,
        loc_params1: *const H5VL_loc_params_t,
        dst_obj: *mut ::std::os::raw::c_void,
        loc_params2: *const H5VL_loc_params_t,
        connector_id: hid_t,
        lcpl_id: hid_t,
        lapl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLlink_get(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        args: *mut H5VL_link_get_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLlink_specific(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        args: *mut H5VL_link_specific_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLlink_optional(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLobject_open(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        opened_type: *mut H5I_type_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5VLobject_copy(
        src_obj: *mut ::std::os::raw::c_void,
        loc_params1: *const H5VL_loc_params_t,
        src_name: *const ::std::os::raw::c_char,
        dst_obj: *mut ::std::os::raw::c_void,
        loc_params2: *const H5VL_loc_params_t,
        dst_name: *const ::std::os::raw::c_char,
        connector_id: hid_t,
        ocpypl_id: hid_t,
        lcpl_id: hid_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLobject_get(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        args: *mut H5VL_object_get_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLobject_specific(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        args: *mut H5VL_object_specific_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLobject_optional(
        obj: *mut ::std::os::raw::c_void,
        loc_params: *const H5VL_loc_params_t,
        connector_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLintrospect_get_conn_cls(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        lvl: H5VL_get_conn_lvl_t,
        conn_cls: *mut *const H5VL_class_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLintrospect_get_cap_flags(
        info: *const ::std::os::raw::c_void,
        connector_id: hid_t,
        cap_flags: *mut u64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLintrospect_opt_query(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        subcls: H5VL_subclass_t,
        opt_type: ::std::os::raw::c_int,
        flags: *mut u64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLrequest_wait(
        req: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        timeout: u64,
        status: *mut H5VL_request_status_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLrequest_notify(
        req: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        cb: H5VL_request_notify_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLrequest_cancel(
        req: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        status: *mut H5VL_request_status_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLrequest_specific(
        req: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_request_specific_args_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLrequest_optional(
        req: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_optional_args_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLrequest_free(
        req: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLblob_put(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        buf: *const ::std::os::raw::c_void,
        size: usize,
        blob_id: *mut ::std::os::raw::c_void,
        ctx: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLblob_get(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        blob_id: *const ::std::os::raw::c_void,
        buf: *mut ::std::os::raw::c_void,
        size: usize,
        ctx: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLblob_specific(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        blob_id: *mut ::std::os::raw::c_void,
        args: *mut H5VL_blob_specific_args_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLblob_optional(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        blob_id: *mut ::std::os::raw::c_void,
        args: *mut H5VL_optional_args_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLtoken_cmp(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        token1: *const H5O_token_t,
        token2: *const H5O_token_t,
        cmp_value: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLtoken_to_str(
        obj: *mut ::std::os::raw::c_void,
        obj_type: H5I_type_t,
        connector_id: hid_t,
        token: *const H5O_token_t,
        token_str: *mut *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLtoken_from_str(
        obj: *mut ::std::os::raw::c_void,
        obj_type: H5I_type_t,
        connector_id: hid_t,
        token_str: *const ::std::os::raw::c_char,
        token: *mut H5O_token_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLoptional(
        obj: *mut ::std::os::raw::c_void,
        connector_id: hid_t,
        args: *mut H5VL_optional_args_t,
        dxpl_id: hid_t,
        req: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_attr_iterate_old_t {
    pub loc_id: hid_t,
    pub attr_num: *mut ::std::os::raw::c_uint,
    pub op: H5A_operator1_t,
    pub op_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_native_attr_iterate_old_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_attr_iterate_old_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_attr_iterate_old_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_native_attr_iterate_old_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_attr_iterate_old_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_attr_iterate_old_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loc_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_attr_iterate_old_t),
            "::",
            stringify!(loc_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attr_num) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_attr_iterate_old_t),
            "::",
            stringify!(attr_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_attr_iterate_old_t),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_attr_iterate_old_t),
            "::",
            stringify!(op_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_native_attr_optional_args_t {
    pub iterate_old: H5VL_native_attr_iterate_old_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_attr_optional_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_attr_optional_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_attr_optional_args_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_native_attr_optional_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_attr_optional_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_attr_optional_args_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iterate_old) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_attr_optional_args_t),
            "::",
            stringify!(iterate_old)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_dataset_chunk_read_t {
    pub offset: *const hsize_t,
    pub filters: u32,
    pub buf: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_native_dataset_chunk_read_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_dataset_chunk_read_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_dataset_chunk_read_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_native_dataset_chunk_read_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_dataset_chunk_read_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_dataset_chunk_read_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_chunk_read_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filters) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_chunk_read_t),
            "::",
            stringify!(filters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_chunk_read_t),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_dataset_chunk_write_t {
    pub offset: *const hsize_t,
    pub filters: u32,
    pub size: u32,
    pub buf: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_native_dataset_chunk_write_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_dataset_chunk_write_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_dataset_chunk_write_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_native_dataset_chunk_write_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_dataset_chunk_write_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_dataset_chunk_write_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_chunk_write_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filters) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_chunk_write_t),
            "::",
            stringify!(filters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_chunk_write_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_chunk_write_t),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_dataset_get_vlen_buf_size_t {
    pub type_id: hid_t,
    pub space_id: hid_t,
    pub size: *mut hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_dataset_get_vlen_buf_size_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_dataset_get_vlen_buf_size_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_dataset_get_vlen_buf_size_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_dataset_get_vlen_buf_size_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_dataset_get_vlen_buf_size_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_dataset_get_vlen_buf_size_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_vlen_buf_size_t),
            "::",
            stringify!(type_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).space_id) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_vlen_buf_size_t),
            "::",
            stringify!(space_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_vlen_buf_size_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_dataset_get_chunk_storage_size_t {
    pub offset: *const hsize_t,
    pub size: *mut hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_dataset_get_chunk_storage_size_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_dataset_get_chunk_storage_size_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_dataset_get_chunk_storage_size_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_dataset_get_chunk_storage_size_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_dataset_get_chunk_storage_size_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_dataset_get_chunk_storage_size_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_storage_size_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_storage_size_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_dataset_get_num_chunks_t {
    pub space_id: hid_t,
    pub nchunks: *mut hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_dataset_get_num_chunks_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_dataset_get_num_chunks_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_dataset_get_num_chunks_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_native_dataset_get_num_chunks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_dataset_get_num_chunks_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_dataset_get_num_chunks_t)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).space_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_num_chunks_t),
            "::",
            stringify!(space_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nchunks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_num_chunks_t),
            "::",
            stringify!(nchunks)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_dataset_get_chunk_info_by_idx_t {
    pub space_id: hid_t,
    pub chk_index: hsize_t,
    pub offset: *mut hsize_t,
    pub filter_mask: *mut ::std::os::raw::c_uint,
    pub addr: *mut haddr_t,
    pub size: *mut hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_dataset_get_chunk_info_by_idx_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_dataset_get_chunk_info_by_idx_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_dataset_get_chunk_info_by_idx_t>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_idx_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_dataset_get_chunk_info_by_idx_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_idx_t)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).space_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_idx_t),
            "::",
            stringify!(space_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chk_index) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_idx_t),
            "::",
            stringify!(chk_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_idx_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).filter_mask) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_idx_t),
            "::",
            stringify!(filter_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_idx_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_idx_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_dataset_get_chunk_info_by_coord_t {
    pub offset: *const hsize_t,
    pub filter_mask: *mut ::std::os::raw::c_uint,
    pub addr: *mut haddr_t,
    pub size: *mut hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_dataset_get_chunk_info_by_coord_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_dataset_get_chunk_info_by_coord_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_dataset_get_chunk_info_by_coord_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_coord_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_dataset_get_chunk_info_by_coord_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_coord_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_coord_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).filter_mask) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_coord_t),
            "::",
            stringify!(filter_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_coord_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_get_chunk_info_by_coord_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_native_dataset_optional_args_t {
    pub get_chunk_idx_type: H5VL_native_dataset_optional_args_t__bindgen_ty_1,
    pub get_chunk_storage_size: H5VL_native_dataset_get_chunk_storage_size_t,
    pub get_num_chunks: H5VL_native_dataset_get_num_chunks_t,
    pub get_chunk_info_by_idx: H5VL_native_dataset_get_chunk_info_by_idx_t,
    pub get_chunk_info_by_coord: H5VL_native_dataset_get_chunk_info_by_coord_t,
    pub chunk_read: H5VL_native_dataset_chunk_read_t,
    pub chunk_write: H5VL_native_dataset_chunk_write_t,
    pub get_vlen_buf_size: H5VL_native_dataset_get_vlen_buf_size_t,
    pub get_offset: H5VL_native_dataset_optional_args_t__bindgen_ty_2,
    pub chunk_iter: H5VL_native_dataset_optional_args_t__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_dataset_optional_args_t__bindgen_ty_1 {
    pub idx_type: *mut H5D_chunk_index_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_dataset_optional_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_dataset_optional_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_dataset_optional_args_t__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_dataset_optional_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_dataset_optional_args_t__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_dataset_optional_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).idx_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t__bindgen_ty_1),
            "::",
            stringify!(idx_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_dataset_optional_args_t__bindgen_ty_2 {
    pub offset: *mut haddr_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_dataset_optional_args_t__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_dataset_optional_args_t__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_dataset_optional_args_t__bindgen_ty_2>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_dataset_optional_args_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_dataset_optional_args_t__bindgen_ty_2>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_dataset_optional_args_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t__bindgen_ty_2),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_dataset_optional_args_t__bindgen_ty_3 {
    pub op: H5D_chunk_iter_op_t,
    pub op_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_native_dataset_optional_args_t__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_dataset_optional_args_t__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_dataset_optional_args_t__bindgen_ty_3>(
        ),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_dataset_optional_args_t__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_dataset_optional_args_t__bindgen_ty_3>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_dataset_optional_args_t__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t__bindgen_ty_3),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t__bindgen_ty_3),
            "::",
            stringify!(op_data)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_native_dataset_optional_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_dataset_optional_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_dataset_optional_args_t>(),
        48usize,
        concat!("Size of: ", stringify!(H5VL_native_dataset_optional_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_dataset_optional_args_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_dataset_optional_args_t)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_chunk_idx_type) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t),
            "::",
            stringify!(get_chunk_idx_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_chunk_storage_size) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t),
            "::",
            stringify!(get_chunk_storage_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_num_chunks) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t),
            "::",
            stringify!(get_num_chunks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_chunk_info_by_idx) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t),
            "::",
            stringify!(get_chunk_info_by_idx)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_chunk_info_by_coord) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t),
            "::",
            stringify!(get_chunk_info_by_coord)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chunk_read) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t),
            "::",
            stringify!(chunk_read)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chunk_write) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t),
            "::",
            stringify!(chunk_write)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_vlen_buf_size) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t),
            "::",
            stringify!(get_vlen_buf_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_offset) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t),
            "::",
            stringify!(get_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chunk_iter) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_dataset_optional_args_t),
            "::",
            stringify!(chunk_iter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_get_file_image_t {
    pub buf_size: usize,
    pub buf: *mut ::std::os::raw::c_void,
    pub image_len: *mut usize,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_get_file_image_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_file_get_file_image_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_get_file_image_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_native_file_get_file_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_get_file_image_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_file_get_file_image_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_file_image_t),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_file_image_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).image_len) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_file_image_t),
            "::",
            stringify!(image_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_get_free_sections_t {
    pub type_: H5F_mem_t,
    pub sect_info: *mut H5F_sect_info_t,
    pub nsects: usize,
    pub sect_count: *mut usize,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_get_free_sections_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_get_free_sections_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_get_free_sections_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_native_file_get_free_sections_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_get_free_sections_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_get_free_sections_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_free_sections_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sect_info) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_free_sections_t),
            "::",
            stringify!(sect_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsects) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_free_sections_t),
            "::",
            stringify!(nsects)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sect_count) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_free_sections_t),
            "::",
            stringify!(sect_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_get_freespace_t {
    pub size: *mut hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_get_freespace_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_file_get_freespace_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_get_freespace_t>(),
        8usize,
        concat!("Size of: ", stringify!(H5VL_native_file_get_freespace_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_get_freespace_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_file_get_freespace_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_freespace_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_get_info_t {
    pub type_: H5I_type_t,
    pub finfo: *mut H5F_info2_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_get_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_file_get_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_get_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_native_file_get_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_get_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_file_get_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_info_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_info_t),
            "::",
            stringify!(finfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_get_mdc_size_t {
    pub max_size: *mut usize,
    pub min_clean_size: *mut usize,
    pub cur_size: *mut usize,
    pub cur_num_entries: *mut u32,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_get_mdc_size_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_file_get_mdc_size_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_get_mdc_size_t>(),
        32usize,
        concat!("Size of: ", stringify!(H5VL_native_file_get_mdc_size_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_get_mdc_size_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_file_get_mdc_size_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_mdc_size_t),
            "::",
            stringify!(max_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).min_clean_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_mdc_size_t),
            "::",
            stringify!(min_clean_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cur_size) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_mdc_size_t),
            "::",
            stringify!(cur_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cur_num_entries) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_mdc_size_t),
            "::",
            stringify!(cur_num_entries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_get_vfd_handle_t {
    pub fapl_id: hid_t,
    pub file_handle: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_get_vfd_handle_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_file_get_vfd_handle_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_get_vfd_handle_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_native_file_get_vfd_handle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_get_vfd_handle_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_file_get_vfd_handle_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fapl_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_vfd_handle_t),
            "::",
            stringify!(fapl_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_handle) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_vfd_handle_t),
            "::",
            stringify!(file_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_get_mdc_logging_status_t {
    pub is_enabled: *mut hbool_t,
    pub is_currently_logging: *mut hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_get_mdc_logging_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_get_mdc_logging_status_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_get_mdc_logging_status_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_get_mdc_logging_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_get_mdc_logging_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_get_mdc_logging_status_t)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).is_enabled) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_mdc_logging_status_t),
            "::",
            stringify!(is_enabled)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).is_currently_logging) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_mdc_logging_status_t),
            "::",
            stringify!(is_currently_logging)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_get_page_buffering_stats_t {
    pub accesses: *mut ::std::os::raw::c_uint,
    pub hits: *mut ::std::os::raw::c_uint,
    pub misses: *mut ::std::os::raw::c_uint,
    pub evictions: *mut ::std::os::raw::c_uint,
    pub bypasses: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_get_page_buffering_stats_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_get_page_buffering_stats_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_get_page_buffering_stats_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_get_page_buffering_stats_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_get_page_buffering_stats_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_get_page_buffering_stats_t)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).accesses) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_page_buffering_stats_t),
            "::",
            stringify!(accesses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_page_buffering_stats_t),
            "::",
            stringify!(hits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).misses) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_page_buffering_stats_t),
            "::",
            stringify!(misses)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).evictions) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_page_buffering_stats_t),
            "::",
            stringify!(evictions)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bypasses) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_page_buffering_stats_t),
            "::",
            stringify!(bypasses)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_get_mdc_image_info_t {
    pub addr: *mut haddr_t,
    pub len: *mut hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_get_mdc_image_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_get_mdc_image_info_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_get_mdc_image_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_native_file_get_mdc_image_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_get_mdc_image_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_get_mdc_image_info_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_mdc_image_info_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_get_mdc_image_info_t),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_set_libver_bounds_t {
    pub low: H5F_libver_t,
    pub high: H5F_libver_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_set_libver_bounds_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_set_libver_bounds_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_set_libver_bounds_t>(),
        8usize,
        concat!("Size of: ", stringify!(H5VL_native_file_set_libver_bounds_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_set_libver_bounds_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_set_libver_bounds_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_set_libver_bounds_t),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_set_libver_bounds_t),
            "::",
            stringify!(high)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_native_file_optional_args_t {
    pub get_file_image: H5VL_native_file_get_file_image_t,
    pub get_free_sections: H5VL_native_file_get_free_sections_t,
    pub get_freespace: H5VL_native_file_get_freespace_t,
    pub get_info: H5VL_native_file_get_info_t,
    pub get_mdc_config: H5VL_native_file_optional_args_t__bindgen_ty_1,
    pub get_mdc_hit_rate: H5VL_native_file_optional_args_t__bindgen_ty_2,
    pub get_mdc_size: H5VL_native_file_get_mdc_size_t,
    pub get_size: H5VL_native_file_optional_args_t__bindgen_ty_3,
    pub get_vfd_handle: H5VL_native_file_get_vfd_handle_t,
    pub set_mdc_config: H5VL_native_file_optional_args_t__bindgen_ty_4,
    pub get_metadata_read_retry_info:
        H5VL_native_file_optional_args_t__bindgen_ty_5,
    pub get_mdc_logging_status: H5VL_native_file_get_mdc_logging_status_t,
    pub get_page_buffering_stats: H5VL_native_file_get_page_buffering_stats_t,
    pub get_mdc_image_info: H5VL_native_file_get_mdc_image_info_t,
    pub get_eoa: H5VL_native_file_optional_args_t__bindgen_ty_6,
    pub increment_filesize: H5VL_native_file_optional_args_t__bindgen_ty_7,
    pub set_libver_bounds: H5VL_native_file_set_libver_bounds_t,
    pub get_min_dset_ohdr_flag: H5VL_native_file_optional_args_t__bindgen_ty_8,
    pub set_min_dset_ohdr_flag: H5VL_native_file_optional_args_t__bindgen_ty_9,
    pub get_mpi_atomicity: H5VL_native_file_optional_args_t__bindgen_ty_10,
    pub set_mpi_atomicity: H5VL_native_file_optional_args_t__bindgen_ty_11,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_optional_args_t__bindgen_ty_1 {
    pub config: *mut H5AC_cache_config_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_optional_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_1),
            "::",
            stringify!(config)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_optional_args_t__bindgen_ty_2 {
    pub hit_rate: *mut f64,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_optional_args_t__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t__bindgen_ty_2>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hit_rate) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_2),
            "::",
            stringify!(hit_rate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_optional_args_t__bindgen_ty_3 {
    pub size: *mut hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_optional_args_t__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t__bindgen_ty_3>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_3),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_optional_args_t__bindgen_ty_4 {
    pub config: *const H5AC_cache_config_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_optional_args_t__bindgen_ty_4,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t__bindgen_ty_4>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_4),
            "::",
            stringify!(config)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_optional_args_t__bindgen_ty_5 {
    pub info: *mut H5F_retry_info_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_optional_args_t__bindgen_ty_5,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t__bindgen_ty_5>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t__bindgen_ty_5>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_5),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_optional_args_t__bindgen_ty_6 {
    pub eoa: *mut haddr_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_optional_args_t__bindgen_ty_6,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t__bindgen_ty_6>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t__bindgen_ty_6>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eoa) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_6),
            "::",
            stringify!(eoa)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_optional_args_t__bindgen_ty_7 {
    pub increment: hsize_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_optional_args_t__bindgen_ty_7,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t__bindgen_ty_7>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t__bindgen_ty_7>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).increment) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_7),
            "::",
            stringify!(increment)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_optional_args_t__bindgen_ty_8 {
    pub minimize: *mut hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_optional_args_t__bindgen_ty_8,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t__bindgen_ty_8>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t__bindgen_ty_8>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minimize) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_8),
            "::",
            stringify!(minimize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_optional_args_t__bindgen_ty_9 {
    pub minimize: hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t__bindgen_ty_9() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_optional_args_t__bindgen_ty_9,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t__bindgen_ty_9>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_9)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t__bindgen_ty_9>(
        ),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_9)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minimize) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_9),
            "::",
            stringify!(minimize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_optional_args_t__bindgen_ty_10 {
    pub flag: *mut hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t__bindgen_ty_10() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_optional_args_t__bindgen_ty_10,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t__bindgen_ty_10>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_10)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t__bindgen_ty_10>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_10),
            "::",
            stringify!(flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_file_optional_args_t__bindgen_ty_11 {
    pub flag: hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t__bindgen_ty_11() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_file_optional_args_t__bindgen_ty_11,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t__bindgen_ty_11>(
        ),
        1usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_11)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t__bindgen_ty_11>(
        ),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t__bindgen_ty_11),
            "::",
            stringify!(flag)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_native_file_optional_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_file_optional_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_file_optional_args_t>(),
        40usize,
        concat!("Size of: ", stringify!(H5VL_native_file_optional_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_file_optional_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_file_optional_args_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_file_image) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_file_image)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_free_sections) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_free_sections)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_freespace) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_freespace)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_mdc_config) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_mdc_config)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_mdc_hit_rate) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_mdc_hit_rate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_mdc_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_mdc_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_vfd_handle) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_vfd_handle)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).set_mdc_config) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(set_mdc_config)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_metadata_read_retry_info) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_metadata_read_retry_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_mdc_logging_status) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_mdc_logging_status)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_page_buffering_stats) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_page_buffering_stats)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_mdc_image_info) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_mdc_image_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_eoa) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_eoa)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).increment_filesize) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(increment_filesize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).set_libver_bounds) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(set_libver_bounds)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_min_dset_ohdr_flag) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_min_dset_ohdr_flag)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).set_min_dset_ohdr_flag) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(set_min_dset_ohdr_flag)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_mpi_atomicity) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(get_mpi_atomicity)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).set_mpi_atomicity) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_file_optional_args_t),
            "::",
            stringify!(set_mpi_atomicity)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_native_group_iterate_old_t {
    pub loc_params: H5VL_loc_params_t,
    pub idx: hsize_t,
    pub last_obj: *mut hsize_t,
    pub op: H5G_iterate_t,
    pub op_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_native_group_iterate_old_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_group_iterate_old_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_group_iterate_old_t>(),
        72usize,
        concat!("Size of: ", stringify!(H5VL_native_group_iterate_old_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_group_iterate_old_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_group_iterate_old_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_params) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_group_iterate_old_t),
            "::",
            stringify!(loc_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_group_iterate_old_t),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_obj) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_group_iterate_old_t),
            "::",
            stringify!(last_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_group_iterate_old_t),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_data) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_group_iterate_old_t),
            "::",
            stringify!(op_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5VL_native_group_get_objinfo_t {
    pub loc_params: H5VL_loc_params_t,
    pub follow_link: hbool_t,
    pub statbuf: *mut H5G_stat_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_group_get_objinfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_group_get_objinfo_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_group_get_objinfo_t>(),
        56usize,
        concat!("Size of: ", stringify!(H5VL_native_group_get_objinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_group_get_objinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_group_get_objinfo_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).loc_params) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_group_get_objinfo_t),
            "::",
            stringify!(loc_params)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).follow_link) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_group_get_objinfo_t),
            "::",
            stringify!(follow_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).statbuf) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_group_get_objinfo_t),
            "::",
            stringify!(statbuf)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_native_group_optional_args_t {
    pub iterate_old: H5VL_native_group_iterate_old_t,
    pub get_objinfo: H5VL_native_group_get_objinfo_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_group_optional_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_group_optional_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_group_optional_args_t>(),
        72usize,
        concat!("Size of: ", stringify!(H5VL_native_group_optional_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_group_optional_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_group_optional_args_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iterate_old) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_group_optional_args_t),
            "::",
            stringify!(iterate_old)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_objinfo) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_group_optional_args_t),
            "::",
            stringify!(get_objinfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_object_get_comment_t {
    pub buf_size: usize,
    pub buf: *mut ::std::os::raw::c_void,
    pub comment_len: *mut usize,
}
#[test]
fn bindgen_test_layout_H5VL_native_object_get_comment_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_object_get_comment_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_object_get_comment_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_native_object_get_comment_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_object_get_comment_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_native_object_get_comment_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_object_get_comment_t),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_object_get_comment_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).comment_len) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_object_get_comment_t),
            "::",
            stringify!(comment_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_object_get_native_info_t {
    pub fields: ::std::os::raw::c_uint,
    pub ninfo: *mut H5O_native_info_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_object_get_native_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_object_get_native_info_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_object_get_native_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_native_object_get_native_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_object_get_native_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_object_get_native_info_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_object_get_native_info_t),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ninfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_object_get_native_info_t),
            "::",
            stringify!(ninfo)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5VL_native_object_optional_args_t {
    pub get_comment: H5VL_native_object_get_comment_t,
    pub set_comment: H5VL_native_object_optional_args_t__bindgen_ty_1,
    pub are_mdc_flushes_disabled:
        H5VL_native_object_optional_args_t__bindgen_ty_2,
    pub get_native_info: H5VL_native_object_get_native_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_object_optional_args_t__bindgen_ty_1 {
    pub comment: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_H5VL_native_object_optional_args_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_object_optional_args_t__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_object_optional_args_t__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_object_optional_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_object_optional_args_t__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_object_optional_args_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_object_optional_args_t__bindgen_ty_1),
            "::",
            stringify!(comment)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_native_object_optional_args_t__bindgen_ty_2 {
    pub flag: *mut hbool_t,
}
#[test]
fn bindgen_test_layout_H5VL_native_object_optional_args_t__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        H5VL_native_object_optional_args_t__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_object_optional_args_t__bindgen_ty_2>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(H5VL_native_object_optional_args_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_object_optional_args_t__bindgen_ty_2>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_object_optional_args_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_object_optional_args_t__bindgen_ty_2),
            "::",
            stringify!(flag)
        )
    );
}
#[test]
fn bindgen_test_layout_H5VL_native_object_optional_args_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_native_object_optional_args_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_native_object_optional_args_t>(),
        24usize,
        concat!("Size of: ", stringify!(H5VL_native_object_optional_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_native_object_optional_args_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(H5VL_native_object_optional_args_t)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_comment) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_object_optional_args_t),
            "::",
            stringify!(get_comment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).set_comment) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_object_optional_args_t),
            "::",
            stringify!(set_comment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).are_mdc_flushes_disabled) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_object_optional_args_t),
            "::",
            stringify!(are_mdc_flushes_disabled)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_native_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_native_object_optional_args_t),
            "::",
            stringify!(get_native_info)
        )
    );
}
extern "C" {
    pub fn H5VLnative_addr_to_token(
        loc_id: hid_t,
        addr: haddr_t,
        token: *mut H5O_token_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VLnative_token_to_addr(
        loc_id: hid_t,
        token: H5O_token_t,
        addr: *mut haddr_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5VL_native_register() -> hid_t;
}
extern "C" {
    pub fn H5FD_core_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_core(
        fapl_id: hid_t,
        increment: usize,
        backing_store: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fapl_core(
        fapl_id: hid_t,
        increment: *mut usize,
        backing_store: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FD_family_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_family(
        fapl_id: hid_t,
        memb_size: hsize_t,
        memb_fapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fapl_family(
        fapl_id: hid_t,
        memb_size: *mut hsize_t,
        memb_fapl_id: *mut hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FD_log_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_log(
        fapl_id: hid_t,
        logfile: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_ulonglong,
        buf_size: usize,
    ) -> herr_t;
}
pub const H5FD_mpio_xfer_t_H5FD_MPIO_INDEPENDENT: H5FD_mpio_xfer_t = 0;
pub const H5FD_mpio_xfer_t_H5FD_MPIO_COLLECTIVE: H5FD_mpio_xfer_t = 1;
pub type H5FD_mpio_xfer_t = ::std::os::raw::c_uint;
pub const H5FD_mpio_chunk_opt_t_H5FD_MPIO_CHUNK_DEFAULT: H5FD_mpio_chunk_opt_t =
    0;
pub const H5FD_mpio_chunk_opt_t_H5FD_MPIO_CHUNK_ONE_IO: H5FD_mpio_chunk_opt_t =
    1;
pub const H5FD_mpio_chunk_opt_t_H5FD_MPIO_CHUNK_MULTI_IO:
    H5FD_mpio_chunk_opt_t = 2;
pub type H5FD_mpio_chunk_opt_t = ::std::os::raw::c_uint;
pub const H5FD_mpio_collective_opt_t_H5FD_MPIO_COLLECTIVE_IO:
    H5FD_mpio_collective_opt_t = 0;
pub const H5FD_mpio_collective_opt_t_H5FD_MPIO_INDIVIDUAL_IO:
    H5FD_mpio_collective_opt_t = 1;
pub type H5FD_mpio_collective_opt_t = ::std::os::raw::c_uint;
extern "C" {
    pub static mut H5FD_mpi_opt_types_g: hbool_t;
}
extern "C" {
    pub fn H5FD_mpio_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_mpio(
        fapl_id: hid_t,
        comm: MPI_Comm,
        info: MPI_Info,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fapl_mpio(
        fapl_id: hid_t,
        comm: *mut MPI_Comm,
        info: *mut MPI_Info,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_dxpl_mpio(
        dxpl_id: hid_t,
        xfer_mode: H5FD_mpio_xfer_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_dxpl_mpio(
        dxpl_id: hid_t,
        xfer_mode: *mut H5FD_mpio_xfer_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_dxpl_mpio_collective_opt(
        dxpl_id: hid_t,
        opt_mode: H5FD_mpio_collective_opt_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_dxpl_mpio_chunk_opt(
        dxpl_id: hid_t,
        opt_mode: H5FD_mpio_chunk_opt_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_dxpl_mpio_chunk_opt_num(
        dxpl_id: hid_t,
        num_chunk_per_proc: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_dxpl_mpio_chunk_opt_ratio(
        dxpl_id: hid_t,
        percent_num_proc_per_chunk: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FD_multi_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_multi(
        fapl_id: hid_t,
        memb_map: *const H5FD_mem_t,
        memb_fapl: *const hid_t,
        memb_name: *const *const ::std::os::raw::c_char,
        memb_addr: *const haddr_t,
        relax: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fapl_multi(
        fapl_id: hid_t,
        memb_map: *mut H5FD_mem_t,
        memb_fapl: *mut hid_t,
        memb_name: *mut *mut ::std::os::raw::c_char,
        memb_addr: *mut haddr_t,
        relax: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fapl_split(
        fapl: hid_t,
        meta_ext: *const ::std::os::raw::c_char,
        meta_plist_id: hid_t,
        raw_ext: *const ::std::os::raw::c_char,
        raw_plist_id: hid_t,
    ) -> herr_t;
}
pub const H5FD_onion_target_file_constant_t_H5FD_ONION_STORE_TARGET_ONION:
    H5FD_onion_target_file_constant_t = 0;
pub type H5FD_onion_target_file_constant_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_onion_fapl_info_t {
    pub version: u8,
    pub backing_fapl_id: hid_t,
    pub page_size: u32,
    pub store_target: H5FD_onion_target_file_constant_t,
    pub revision_num: u64,
    pub force_write_open: u8,
    pub creation_flags: u8,
    pub comment: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_H5FD_onion_fapl_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5FD_onion_fapl_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5FD_onion_fapl_info_t>(),
        296usize,
        concat!("Size of: ", stringify!(H5FD_onion_fapl_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5FD_onion_fapl_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5FD_onion_fapl_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_onion_fapl_info_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).backing_fapl_id) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_onion_fapl_info_t),
            "::",
            stringify!(backing_fapl_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).page_size) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_onion_fapl_info_t),
            "::",
            stringify!(page_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).store_target) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_onion_fapl_info_t),
            "::",
            stringify!(store_target)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).revision_num) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_onion_fapl_info_t),
            "::",
            stringify!(revision_num)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).force_write_open) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_onion_fapl_info_t),
            "::",
            stringify!(force_write_open)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).creation_flags) as usize - ptr as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_onion_fapl_info_t),
            "::",
            stringify!(creation_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_onion_fapl_info_t),
            "::",
            stringify!(comment)
        )
    );
}
extern "C" {
    pub fn H5FD_onion_init() -> hid_t;
}
extern "C" {
    pub fn H5Pget_fapl_onion(
        fapl_id: hid_t,
        fa_out: *mut H5FD_onion_fapl_info_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fapl_onion(
        fapl_id: hid_t,
        fa: *const H5FD_onion_fapl_info_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDonion_get_revision_count(
        filename: *const ::std::os::raw::c_char,
        fapl_id: hid_t,
        revision_count: *mut u64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FD_sec2_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_sec2(fapl_id: hid_t) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_splitter_vfd_config_t {
    pub magic: i32,
    pub version: ::std::os::raw::c_uint,
    pub rw_fapl_id: hid_t,
    pub wo_fapl_id: hid_t,
    pub wo_path: [::std::os::raw::c_char; 4097usize],
    pub log_file_path: [::std::os::raw::c_char; 4097usize],
    pub ignore_wo_errs: hbool_t,
}
#[test]
fn bindgen_test_layout_H5FD_splitter_vfd_config_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5FD_splitter_vfd_config_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5FD_splitter_vfd_config_t>(),
        8224usize,
        concat!("Size of: ", stringify!(H5FD_splitter_vfd_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5FD_splitter_vfd_config_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5FD_splitter_vfd_config_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_splitter_vfd_config_t),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_splitter_vfd_config_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rw_fapl_id) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_splitter_vfd_config_t),
            "::",
            stringify!(rw_fapl_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wo_fapl_id) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_splitter_vfd_config_t),
            "::",
            stringify!(wo_fapl_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_path) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_splitter_vfd_config_t),
            "::",
            stringify!(wo_path)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log_file_path) as usize - ptr as usize
        },
        4121usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_splitter_vfd_config_t),
            "::",
            stringify!(log_file_path)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ignore_wo_errs) as usize - ptr as usize
        },
        8218usize,
        concat!(
            "Offset of field: ",
            stringify!(H5FD_splitter_vfd_config_t),
            "::",
            stringify!(ignore_wo_errs)
        )
    );
}
extern "C" {
    pub fn H5FD_splitter_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_splitter(
        fapl_id: hid_t,
        config_ptr: *mut H5FD_splitter_vfd_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fapl_splitter(
        fapl_id: hid_t,
        config_ptr: *mut H5FD_splitter_vfd_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FD_stdio_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_stdio(fapl_id: hid_t) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5VL_pass_through_info_t {
    pub under_vol_id: hid_t,
    pub under_vol_info: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_H5VL_pass_through_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<H5VL_pass_through_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<H5VL_pass_through_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(H5VL_pass_through_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<H5VL_pass_through_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(H5VL_pass_through_info_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).under_vol_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_pass_through_info_t),
            "::",
            stringify!(under_vol_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).under_vol_info) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(H5VL_pass_through_info_t),
            "::",
            stringify!(under_vol_info)
        )
    );
}
extern "C" {
    pub fn H5VL_pass_through_register() -> hid_t;
}
pub const phaseh5_error_OK: phaseh5_error = 0;
pub const phaseh5_error_INIT_CREATE_STRING_TYPE_FAIL: phaseh5_error = 1;
pub const phaseh5_error_OPEN_FAIL: phaseh5_error = 2;
pub const phaseh5_error_CLOSE_FILE_FAIL: phaseh5_error = 3;
pub const phaseh5_error_OPEN_DATA_GROUP_FAIL: phaseh5_error = 4;
pub const phaseh5_error_OPEN_DATE_ATTRIBUTE_FAIL: phaseh5_error = 5;
pub const phaseh5_error_READ_DATE_ATTRIBUTE_FAIL: phaseh5_error = 6;
pub const phaseh5_error_OPEN_DATE_DATATYPE_FAIL: phaseh5_error = 7;
pub const phaseh5_error_OPEN_ALLOCATE_ANALOGS_FAIL: phaseh5_error = 8;
pub const phaseh5_error_OPEN_ANALOG_GROUP_FAIL: phaseh5_error = 9;
pub const phaseh5_error_OPEN_INFO_CHANNEL_DATASET_FAIL: phaseh5_error = 10;
pub const phaseh5_error_OPEN_INFO_CHANNEL_DATASPACE_FAIL: phaseh5_error = 11;
pub const phaseh5_error_OPEN_INFO_CHANNEL_DATATYPE_FAIL: phaseh5_error = 12;
pub const phaseh5_error_OPEN_ANALOG_DATASET_FAIL: phaseh5_error = 13;
pub const phaseh5_error_OPEN_LABEL_ATTRIBUTE_FAIL: phaseh5_error = 14;
pub const phaseh5_error_READ_LABEL_ATTRIBUTE_FAIL: phaseh5_error = 15;
pub const phaseh5_error_OPEN_LABEL_DATATYPE_FAIL: phaseh5_error = 16;
pub const phaseh5_error_READ_INFO_CHANNELS_FAIL: phaseh5_error = 17;
pub const phaseh5_error_PARSE_ANALOG_STREAM_DIFFERENT_TICK: phaseh5_error = 18;
pub const phaseh5_error_MULTIPLE_DIGITAL_STREAMS: phaseh5_error = 19;
pub const phaseh5_error_MULTIPLE_RAW_DATA_STREAMS: phaseh5_error = 20;
pub const phaseh5_error_MULTIPLE_SAMPLING_FREQUENCIES: phaseh5_error = 21;
pub const phaseh5_error_MULTIPLE_DATALENS: phaseh5_error = 22;
pub const phaseh5_error_OPEN_CHANNEL_DATA_FAIL: phaseh5_error = 23;
pub const phaseh5_error_OPEN_CHANNEL_DATA_DATASPACE_FAIL: phaseh5_error = 24;
pub const phaseh5_error_GET_CHANNEL_DATA_DIMS_FAIL: phaseh5_error = 25;
pub const phaseh5_error_NO_RAW_DATA_STREAM: phaseh5_error = 26;
pub const phaseh5_error_OPEN_EVENT_STREAM_GROUP_LINK_FAIL: phaseh5_error = 27;
pub const phaseh5_error_OPEN_EVENT_STREAM_GROUP_FAIL: phaseh5_error = 28;
pub const phaseh5_error_OPEN_EVENT_STREAM_STREAM_0_GROUP_LINK_FAIL:
    phaseh5_error = 29;
pub const phaseh5_error_MAX_EVENT_STREAMS_EXCEEDED: phaseh5_error = 30;
pub const phaseh5_error_OPEN_ENTITY_DATASET_FAIL: phaseh5_error = 31;
pub const phaseh5_error_EVENT_ENTITY_DATASET_CLOSE_FAIL: phaseh5_error = 32;
pub const phaseh5_error_OPEN_PEAK_TRAIN_GROUP_FAIL: phaseh5_error = 33;
pub const phaseh5_error_CREATE_PEAK_GROUP_FAIL: phaseh5_error = 34;
pub const phaseh5_error_RAW_DATA_END_BEFORE_START: phaseh5_error = 35;
pub const phaseh5_error_RAW_DATA_END_OUT_OF_BOUNDS: phaseh5_error = 36;
pub const phaseh5_error_RAW_DATA_GET_DATASPACE_FAIL: phaseh5_error = 37;
pub const phaseh5_error_RAW_DATA_SELECT_HYPERSLAB_FAIL: phaseh5_error = 38;
pub const phaseh5_error_RAW_DATA_CREATE_MEMORY_DATASPACE_FAIL: phaseh5_error =
    39;
pub const phaseh5_error_RAW_DATA_READ_DATA_FAIL: phaseh5_error = 40;
pub const phaseh5_error_SET_RAW_DATA_END_BEFORE_START: phaseh5_error = 41;
pub const phaseh5_error_SET_RAW_DATA_END_OUT_OF_BOUNDS: phaseh5_error = 42;
pub const phaseh5_error_SET_RAW_DATA_GET_DATASPACE_FAIL: phaseh5_error = 43;
pub const phaseh5_error_SET_RAW_DATA_SELECT_HYPERSLAB_FAIL: phaseh5_error = 44;
pub const phaseh5_error_SET_RAW_DATA_CREATE_MEMORY_DATASPACE_FAIL:
    phaseh5_error = 45;
pub const phaseh5_error_SET_RAW_DATA_WRITE_DATASET_FAIL: phaseh5_error = 46;
pub const phaseh5_error_DIGITAL_NO_DIGITAL: phaseh5_error = 47;
pub const phaseh5_error_DIGITAL_END_BEFORE_START: phaseh5_error = 48;
pub const phaseh5_error_DIGITAL_END_OUT_OF_BOUNDS: phaseh5_error = 49;
pub const phaseh5_error_DIGITAL_GET_DATASPACE_FAIL: phaseh5_error = 50;
pub const phaseh5_error_DIGITAL_SELECT_HYPERSLAB_FAIL: phaseh5_error = 51;
pub const phaseh5_error_DIGITAL_CREATE_MEMORY_DATASPACE_FAIL: phaseh5_error =
    52;
pub const phaseh5_error_DIGITAL_READ_DATA_FAIL: phaseh5_error = 53;
pub const phaseh5_error_SET_DIGITAL_NO_DIGITAL: phaseh5_error = 54;
pub const phaseh5_error_SET_DIGITAL_END_BEFORE_START: phaseh5_error = 55;
pub const phaseh5_error_SET_DIGITAL_END_OUT_OF_BOUNDS: phaseh5_error = 56;
pub const phaseh5_error_SET_DIGITAL_GET_DATASPACE_FAIL: phaseh5_error = 57;
pub const phaseh5_error_SET_DIGITAL_SELECT_HYPERSLAB_FAIL: phaseh5_error = 58;
pub const phaseh5_error_SET_DIGITAL_CREATE_MEMORY_DATASPACE_FAIL:
    phaseh5_error = 59;
pub const phaseh5_error_SET_DIGITAL_WRITE_DATA_FAIL: phaseh5_error = 60;
pub const phaseh5_error_EVENTS_LEN_INDEX_OUT_OF_BOUNDS: phaseh5_error = 61;
pub const phaseh5_error_EVENTS_LEN_OPEN_EVENT_DATASPACE_FAIL: phaseh5_error =
    62;
pub const phaseh5_error_EVENTS_INDEX_OUT_OF_BOUNDS: phaseh5_error = 63;
pub const phaseh5_error_EVENTS_LEN_GET_DIMS_FAIL: phaseh5_error = 64;
pub const phaseh5_error_EVENTS_GET_EVENTS_DATASPACE_FAIL: phaseh5_error = 65;
pub const phaseh5_error_EVENTS_SELECT_DATASPACE_HYPERSLAB_FAIL: phaseh5_error =
    66;
pub const phaseh5_error_EVENTS_CREATE_MEMORY_DATASPACE_FAIL: phaseh5_error = 67;
pub const phaseh5_error_EVENTS_READ_DATASET_FAIL: phaseh5_error = 68;
pub const phaseh5_error_PEAK_TRAIN_NO_PEAK_GROUP: phaseh5_error = 69;
pub const phaseh5_error_PEAK_TRAIN_VALUES_DATASET_LINK_FAIL: phaseh5_error = 70;
pub const phaseh5_error_PEAK_TRAIN_NO_VALUES_DATASET: phaseh5_error = 71;
pub const phaseh5_error_PEAK_TRAIN_SAMPLES_DATASET_LINK_FAIL: phaseh5_error =
    72;
pub const phaseh5_error_PEAK_TRAIN_NO_SAMPLES_DATASET: phaseh5_error = 73;
pub const phaseh5_error_PEAK_TRAIN_OPEN_VALUES_DATASET_FAIL: phaseh5_error = 74;
pub const phaseh5_error_PEAK_TRAIN_OPEN_SAMPLES_DATASET_FAIL: phaseh5_error =
    75;
pub const phaseh5_error_DELETE_PEAK_TRAIN_VALUES_DATASET_LINK_FAIL:
    phaseh5_error = 76;
pub const phaseh5_error_DELETE_PEAK_TRAIN_NO_VALUES_DATASET: phaseh5_error = 77;
pub const phaseh5_error_DELETE_PEAK_TRAIN_SAMPLES_DATASET_LINK_FAIL:
    phaseh5_error = 78;
pub const phaseh5_error_DELETE_PEAK_TRAIN_NO_SAMPLES_DATASET: phaseh5_error =
    79;
pub const phaseh5_error_DELETE_PEAK_TRAIN_VALUES_DATASET_FAIL: phaseh5_error =
    80;
pub const phaseh5_error_DELETE_PEAK_TRAIN_SAMPLES_DATASET_FAIL: phaseh5_error =
    81;
pub const phaseh5_error_PEAK_TRAIN_LEN_OPEN_VALUES_DATASPACE_FAIL:
    phaseh5_error = 82;
pub const phaseh5_error_PEAK_TRAIN_LEN_GET_VALUES_DATASPACE_DIM_FAIL:
    phaseh5_error = 83;
pub const phaseh5_error_PEAK_TRAIN_CLOSE_MEMORY_DATASPACE_FAIL: phaseh5_error =
    84;
pub const phaseh5_error_PEAK_TRAIN_LEN_CLOSE_VALUES_DATASPACE_FAIL:
    phaseh5_error = 85;
pub const phaseh5_error_PEAK_TRAIN_LEN_CLOSE_VALUES_DATASET_FAIL:
    phaseh5_error = 86;
pub const phaseh5_error_PEAK_TRAIN_LEN_CLOSE_SAMPLES_DATASPACE_FAIL:
    phaseh5_error = 87;
pub const phaseh5_error_PEAK_TRAIN_LEN_CLOSE_SAMPLES_DATASET_FAIL:
    phaseh5_error = 88;
pub const phaseh5_error_PEAK_TRAIN_LEN_OPEN_SAMPLES_DATASPACE_FAIL:
    phaseh5_error = 89;
pub const phaseh5_error_PEAK_TRAIN_LEN_GET_SAMPLES_DATASPACE_DIM_FAIL:
    phaseh5_error = 90;
pub const phaseh5_error_PEAK_TRAIN_LEN_VALUES_SAMPLES_DIFFERENT: phaseh5_error =
    91;
pub const phaseh5_error_PEAK_TRAIN_CREATE_MEMORY_DATASPACE_FAIL: phaseh5_error =
    92;
pub const phaseh5_error_PEAK_TRAIN_READ_VALUES_DATASET_FAIL: phaseh5_error = 93;
pub const phaseh5_error_PEAK_TRAIN_READ_SAMPLES_DATASET_FAIL: phaseh5_error =
    94;
pub const phaseh5_error_PEAK_TRAIN_CLOSE_VALUES_DATASET_FAIL: phaseh5_error =
    95;
pub const phaseh5_error_PEAK_TRAIN_CLOSE_SAMPLES_DATASET_FAIL: phaseh5_error =
    96;
pub const phaseh5_error_SET_PEAK_TRAIN_CHECK_LABEL_GROUP_FAIL: phaseh5_error =
    97;
pub const phaseh5_error_SET_PEAK_TRAIN_CLOSE_DELETED_VALUES_DATASET_FAIL:
    phaseh5_error = 98;
pub const phaseh5_error_SET_PEAK_TRAIN_CLOSE_DELETED_SAMPLES_DATASET_FAIL:
    phaseh5_error = 99;
pub const phaseh5_error_SET_PEAK_TRAIN_CLOSE_SAMPLES_FILE_DATASPACE_FAIL:
    phaseh5_error = 100;
pub const phaseh5_error_SET_PEAK_TRAIN_CLOSE_VALUES_FILE_DATASPACE_FAIL:
    phaseh5_error = 101;
pub const phaseh5_error_SET_PEAK_TRAIN_CREATE_SAMPLES_MEMORY_DATASPACE_FAIL:
    phaseh5_error = 102;
pub const phaseh5_error_SET_PEAK_TRAIN_CREATE_VALUES_MEMORY_DATASPACE_FAIL:
    phaseh5_error = 103;
pub const phaseh5_error_SET_PEAK_TRAIN_CREATE_SAMPLES_FILE_DATASPACE_FAIL:
    phaseh5_error = 104;
pub const phaseh5_error_SET_PEAK_TRAIN_CREATE_VALUES_FILE_DATASPACE_FAIL:
    phaseh5_error = 105;
pub const phaseh5_error_SET_PEAK_TRAIN_CREATE_SAMPLES_FILE_DATASET_FAIL:
    phaseh5_error = 106;
pub const phaseh5_error_SET_PEAK_TRAIN_CREATE_VALUES_FILE_DATASET_FAIL:
    phaseh5_error = 107;
pub const phaseh5_error_SET_PEAK_TRAIN_WRITE_SAMPLES_DATASET_FAIL:
    phaseh5_error = 108;
pub const phaseh5_error_SET_PEAK_TRAIN_WRITE_VALUES_DATASET_FAIL:
    phaseh5_error = 109;
pub const phaseh5_error_SET_PEAK_TRAIN_CLOSE_SAMPLES_MEMORY_DATASPACE_FAIL:
    phaseh5_error = 110;
pub const phaseh5_error_SET_PEAK_TRAIN_CLOSE_VALUES_MEMORY_DATASPACE_FAIL:
    phaseh5_error = 111;
pub const phaseh5_error_SET_PEAK_TRAIN_CLOSE_SAMPLES_DATASET_FAIL:
    phaseh5_error = 112;
pub const phaseh5_error_SET_PEAK_TRAIN_CLOSE_VALUES_DATASET_FAIL:
    phaseh5_error = 113;
pub type phaseh5_error = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InfoChannel {
    pub channel_id: ::std::os::raw::c_int,
    pub row_index: ::std::os::raw::c_int,
    pub group_id: ::std::os::raw::c_int,
    pub electrode_group: ::std::os::raw::c_int,
    pub label: *const ::std::os::raw::c_char,
    pub raw_data_type: *const ::std::os::raw::c_char,
    pub unit: *const ::std::os::raw::c_char,
    pub exponent: ::std::os::raw::c_int,
    pub ad_zero: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_long,
    pub conversion_factor: ::std::os::raw::c_long,
    pub adc_bits: ::std::os::raw::c_int,
    pub high_pass_filter_type: *const ::std::os::raw::c_char,
    pub high_pass_filter_cutoff: *const ::std::os::raw::c_char,
    pub high_pass_filter_order: ::std::os::raw::c_int,
    pub low_pass_filter_type: *const ::std::os::raw::c_char,
    pub low_pass_filter_cutoff: *const ::std::os::raw::c_char,
    pub low_pass_filter_order: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_InfoChannel() {
    const UNINIT: ::std::mem::MaybeUninit<InfoChannel> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<InfoChannel>(),
        120usize,
        concat!("Size of: ", stringify!(InfoChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<InfoChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(InfoChannel))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).channel_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(channel_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).row_index) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(row_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).group_id) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(group_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).electrode_group) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(electrode_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).raw_data_type) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(raw_data_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exponent) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_zero) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(ad_zero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tick) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).conversion_factor) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(conversion_factor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).adc_bits) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(adc_bits)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).high_pass_filter_type) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(high_pass_filter_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).high_pass_filter_cutoff) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(high_pass_filter_cutoff)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).high_pass_filter_order) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(high_pass_filter_order)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).low_pass_filter_type) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(low_pass_filter_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).low_pass_filter_cutoff) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(low_pass_filter_cutoff)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).low_pass_filter_order) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(InfoChannel),
            "::",
            stringify!(low_pass_filter_order)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnalogStream {
    pub label: [::std::os::raw::c_char; 64usize],
    pub n_channels: hsize_t,
    pub channel_data_dataset: hid_t,
    pub datalen: usize,
    pub info_channels: [InfoChannel; 60usize],
}
#[test]
fn bindgen_test_layout_AnalogStream() {
    const UNINIT: ::std::mem::MaybeUninit<AnalogStream> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AnalogStream>(),
        7288usize,
        concat!("Size of: ", stringify!(AnalogStream))
    );
    assert_eq!(
        ::std::mem::align_of::<AnalogStream>(),
        8usize,
        concat!("Alignment of ", stringify!(AnalogStream))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AnalogStream),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).n_channels) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(AnalogStream),
            "::",
            stringify!(n_channels)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).channel_data_dataset) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(AnalogStream),
            "::",
            stringify!(channel_data_dataset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datalen) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(AnalogStream),
            "::",
            stringify!(datalen)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).info_channels) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(AnalogStream),
            "::",
            stringify!(info_channels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PeakTrain {
    pub n_peaks: usize,
    pub values: *mut f32,
    pub samples: *mut ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_PeakTrain() {
    const UNINIT: ::std::mem::MaybeUninit<PeakTrain> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PeakTrain>(),
        24usize,
        concat!("Size of: ", stringify!(PeakTrain))
    );
    assert_eq!(
        ::std::mem::align_of::<PeakTrain>(),
        8usize,
        concat!("Alignment of ", stringify!(PeakTrain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_peaks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PeakTrain),
            "::",
            stringify!(n_peaks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PeakTrain),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samples) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PeakTrain),
            "::",
            stringify!(samples)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhaseH5 {
    pub fid: hid_t,
    pub date: [::std::os::raw::c_char; 32usize],
    pub datalen: usize,
    pub sampling_frequency: f32,
    pub raw_data: AnalogStream,
    pub has_digital: bool,
    pub digital: AnalogStream,
    pub n_events: ::std::os::raw::c_int,
    pub event_entities: [hid_t; 16usize],
    pub peaks_group: hid_t,
}
#[test]
fn bindgen_test_layout_PhaseH5() {
    const UNINIT: ::std::mem::MaybeUninit<PhaseH5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhaseH5>(),
        14784usize,
        concat!("Size of: ", stringify!(PhaseH5))
    );
    assert_eq!(
        ::std::mem::align_of::<PhaseH5>(),
        8usize,
        concat!("Alignment of ", stringify!(PhaseH5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhaseH5),
            "::",
            stringify!(fid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PhaseH5),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datalen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PhaseH5),
            "::",
            stringify!(datalen)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sampling_frequency) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PhaseH5),
            "::",
            stringify!(sampling_frequency)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).raw_data) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PhaseH5),
            "::",
            stringify!(raw_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).has_digital) as usize - ptr as usize
        },
        7344usize,
        concat!(
            "Offset of field: ",
            stringify!(PhaseH5),
            "::",
            stringify!(has_digital)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digital) as usize - ptr as usize },
        7352usize,
        concat!(
            "Offset of field: ",
            stringify!(PhaseH5),
            "::",
            stringify!(digital)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).n_events) as usize - ptr as usize
        },
        14640usize,
        concat!(
            "Offset of field: ",
            stringify!(PhaseH5),
            "::",
            stringify!(n_events)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).event_entities) as usize - ptr as usize
        },
        14648usize,
        concat!(
            "Offset of field: ",
            stringify!(PhaseH5),
            "::",
            stringify!(event_entities)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).peaks_group) as usize - ptr as usize
        },
        14776usize,
        concat!(
            "Offset of field: ",
            stringify!(PhaseH5),
            "::",
            stringify!(peaks_group)
        )
    );
}
extern "C" {
    pub fn pycodeh5_init() -> phaseh5_error;
}
extern "C" {
    pub fn pycodeh5_close();
}
extern "C" {
    pub fn init_phase(phase: *mut PhaseH5);
}
extern "C" {
    pub fn phase_open(
        phase: *mut PhaseH5,
        filename: *const ::std::os::raw::c_char,
    ) -> phaseh5_error;
}
extern "C" {
    pub fn phase_close(phase: *mut PhaseH5) -> phaseh5_error;
}
extern "C" {
    pub fn raw_data(
        phase: *mut PhaseH5,
        index: usize,
        start: usize,
        end: usize,
        buf: *mut ::std::os::raw::c_int,
    ) -> phaseh5_error;
}
extern "C" {
    pub fn set_raw_data(
        phase: *mut PhaseH5,
        index: usize,
        start: usize,
        end: usize,
        buf: *const ::std::os::raw::c_int,
    ) -> phaseh5_error;
}
extern "C" {
    pub fn digital(
        phase: *mut PhaseH5,
        start: usize,
        end: usize,
        buf: *mut ::std::os::raw::c_int,
    ) -> phaseh5_error;
}
extern "C" {
    pub fn set_digital(
        phase: *mut PhaseH5,
        start: usize,
        end: usize,
        buf: *const ::std::os::raw::c_int,
    ) -> phaseh5_error;
}
extern "C" {
    pub fn events_len(
        phase: *mut PhaseH5,
        index: usize,
        len: *mut hsize_t,
    ) -> phaseh5_error;
}
extern "C" {
    pub fn events(
        phase: *mut PhaseH5,
        index: usize,
        buf: *mut ::std::os::raw::c_long,
    ) -> phaseh5_error;
}
extern "C" {
    pub fn peak_train_len(
        arg1: *mut PhaseH5,
        label: *const ::std::os::raw::c_char,
        len: *mut usize,
    ) -> phaseh5_error;
}
extern "C" {
    pub fn peak_train(
        phase: *mut PhaseH5,
        label: *const ::std::os::raw::c_char,
        peak_train: *mut PeakTrain,
    ) -> phaseh5_error;
}
extern "C" {
    pub fn set_peak_train(
        phase: *mut PhaseH5,
        label: *const ::std::os::raw::c_char,
        peak_train: *const PeakTrain,
    ) -> phaseh5_error;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
